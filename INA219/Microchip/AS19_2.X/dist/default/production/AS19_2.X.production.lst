

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Dec 09 17:51:43 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47  0000                     
    48                           ; Version 2.10
    49                           ; Generated 31/07/2019 GMT
    50                           ; 
    51                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4550 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataBANK0
    84  001BCA                     __pidataBANK0:
    85                           	opt callstack 0
    86                           
    87                           ;initializer for _texto1
    88  001BCA  45                 	db	69
    89  001BCB  45                 	db	69
    90  001BCC  50                 	db	80
    91  001BCD  52                 	db	82
    92  001BCE  4F                 	db	79
    93  001BCF  4D                 	db	77
    94  001BD0  3A                 	db	58
    95  001BD1  00                 	db	0
    96                           
    97                           ;initializer for _name
    98  001BD2  66                 	db	102
    99  001BD3  41                 	db	65
   100  001BD4  62                 	db	98
   101  001BD5  49                 	db	73
   102  001BD6  61                 	db	97
   103  001BD7  4E                 	db	78
   104  0000                     _SSPBUF	set	4041
   105  0000                     _LATE	set	3981
   106  0000                     _TRISE	set	3990
   107  0000                     _LATD	set	3980
   108  0000                     _TRISD	set	3989
   109  0000                     _SSPADD	set	4040
   110  0000                     _SSPCON2	set	4037
   111  0000                     _SSPCON1	set	4038
   112  0000                     _SSPSTAT	set	4039
   113  0000                     _TRISBbits	set	3987
   114  0000                     _ADCON1	set	4033
   115  0000                     _OSCCON	set	4051
   116  0000                     _LATE0	set	31848
   117  0000                     _LATE1	set	31849
   118  0000                     _ACKEN	set	32300
   119  0000                     _ACKDT	set	32301
   120  0000                     _RCEN	set	32299
   121  0000                     _RSEN	set	32297
   122  0000                     _PEN	set	32298
   123  0000                     _SEN	set	32296
   124                           
   125                           	psect	smallconst
   126  000800                     __psmallconst:
   127                           	opt callstack 0
   128  000800  00                 	db	0
   129  000801                     STR_1:
   130  000801  25                 	db	37
   131  000802  78                 	db	120	;'x'
   132  000803  2C                 	db	44
   133  000804  25                 	db	37
   134  000805  78                 	db	120	;'x'
   135  000806  2C                 	db	44
   136  000807  25                 	db	37
   137  000808  64                 	db	100	;'d'
   138  000809  2C                 	db	44
   139  00080A  25                 	db	37
   140  00080B  63                 	db	99	;'c'
   141  00080C  2C                 	db	44
   142  00080D  25                 	db	37
   143  00080E  58                 	db	88	;'X'
   144  00080F  00                 	db	0
   145                           
   146                           ; #config settings
   147  000810  00                 	db	0	; dummy byte at the end
   148  0000                     
   149                           	psect	cinit
   150  001A6A                     __pcinit:
   151                           	opt callstack 0
   152  001A6A                     start_initialization:
   153                           	opt callstack 0
   154  001A6A                     __initialization:
   155                           	opt callstack 0
   156                           
   157                           ; Initialize objects allocated to BANK0 (14 bytes)
   158                           ; load TBLPTR registers with __pidataBANK0
   159  001A6A  0ECA               	movlw	low __pidataBANK0
   160  001A6C  6EF6               	movwf	tblptrl,c
   161  001A6E  0E1B               	movlw	high __pidataBANK0
   162  001A70  6EF7               	movwf	tblptrh,c
   163  001A72  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   164  001A74  6EF8               	movwf	tblptru,c
   165  001A76  EE00  F0C5         	lfsr	0,__pdataBANK0
   166  001A7A  EE10 F00E          	lfsr	1,14
   167  001A7E                     copy_data0:
   168  001A7E  0009               	tblrd		*+
   169  001A80  CFF5 FFEE          	movff	tablat,postinc0
   170  001A84  50E5               	movf	postdec1,w,c
   171  001A86  50E1               	movf	fsr1l,w,c
   172  001A88  E1FA               	bnz	copy_data0
   173                           
   174                           ; Clear objects allocated to BANK0 (71 bytes)
   175  001A8A  EE00  F060         	lfsr	0,__pbssBANK0
   176  001A8E  0E47               	movlw	71
   177  001A90                     clear_0:
   178  001A90  6AEE               	clrf	postinc0,c
   179  001A92  06E8               	decf	wreg,f,c
   180  001A94  E1FD               	bnz	clear_0
   181  001A96                     end_of_initialization:
   182                           	opt callstack 0
   183  001A96                     __end_of__initialization:
   184                           	opt callstack 0
   185  001A96  0E00               	movlw	low (__Lsmallconst shr (0+16))
   186  001A98  6EF8               	movwf	tblptru,c
   187  001A9A  0E08               	movlw	high __Lsmallconst
   188  001A9C  6EF7               	movwf	tblptrh,c
   189  001A9E  0100               	movlb	0
   190  001AA0  EF81  F00B         	goto	_main	;jump to C main() function
   191                           
   192                           	psect	bssBANK0
   193  000060                     __pbssBANK0:
   194                           	opt callstack 0
   195  000060                     _nout:
   196                           	opt callstack 0
   197  000060                     	ds	2
   198  000062                     _width:
   199                           	opt callstack 0
   200  000062                     	ds	2
   201  000064                     _prec:
   202                           	opt callstack 0
   203  000064                     	ds	2
   204  000066                     _flags:
   205                           	opt callstack 0
   206  000066                     	ds	2
   207  000068                     _i:
   208                           	opt callstack 0
   209  000068                     	ds	2
   210  00006A                     _dbuf:
   211                           	opt callstack 0
   212  00006A                     	ds	32
   213  00008A                     _texto2:
   214                           	opt callstack 0
   215  00008A                     	ds	20
   216  00009E                     _dataSaved:
   217                           	opt callstack 0
   218  00009E                     	ds	9
   219                           
   220                           	psect	dataBANK0
   221  0000C5                     __pdataBANK0:
   222                           	opt callstack 0
   223  0000C5                     _texto1:
   224                           	opt callstack 0
   225  0000C5                     	ds	8
   226  0000CD                     _name:
   227                           	opt callstack 0
   228  0000CD                     	ds	6
   229                           
   230                           	psect	cstackBANK0
   231  0000A7                     __pcstackBANK0:
   232                           	opt callstack 0
   233  0000A7                     ?_vfprintf:
   234                           	opt callstack 0
   235  0000A7                     vfprintf@fp:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0x0
   239  0000A7                     	ds	2
   240  0000A9                     vfprintf@fmt:
   241                           	opt callstack 0
   242                           
   243                           ; 2 bytes @ 0x2
   244  0000A9                     	ds	2
   245  0000AB                     vfprintf@ap:
   246                           	opt callstack 0
   247                           
   248                           ; 2 bytes @ 0x4
   249  0000AB                     	ds	2
   250  0000AD                     ?_sprintf:
   251                           	opt callstack 0
   252  0000AD                     sprintf@s:
   253                           	opt callstack 0
   254                           
   255                           ; 2 bytes @ 0x6
   256  0000AD                     	ds	2
   257  0000AF                     sprintf@fmt:
   258                           	opt callstack 0
   259                           
   260                           ; 2 bytes @ 0x8
   261  0000AF                     	ds	14
   262  0000BD                     sprintf@ap:
   263                           	opt callstack 0
   264                           
   265                           ; 2 bytes @ 0x16
   266  0000BD                     	ds	2
   267  0000BF                     sprintf@f:
   268                           	opt callstack 0
   269                           
   270                           ; 6 bytes @ 0x18
   271  0000BF                     	ds	6
   272                           
   273                           	psect	cstackCOMRAM
   274  000001                     __pcstackCOMRAM:
   275                           	opt callstack 0
   276  000001                     ??_ReadyI2C:
   277  000001                     ??_LCD:
   278  000001                     ?_strlen:
   279                           	opt callstack 0
   280  000001                     ?_isupper:
   281                           	opt callstack 0
   282  000001                     ?_isalpha:
   283                           	opt callstack 0
   284  000001                     ?_islower:
   285                           	opt callstack 0
   286  000001                     ?___aodiv:
   287                           	opt callstack 0
   288  000001                     ?___aomod:
   289                           	opt callstack 0
   290  000001                     isalpha@c:
   291                           	opt callstack 0
   292  000001                     isupper@c:
   293                           	opt callstack 0
   294  000001                     fputc@c:
   295                           	opt callstack 0
   296  000001                     strlen@s:
   297                           	opt callstack 0
   298  000001                     islower@c:
   299                           	opt callstack 0
   300  000001                     ___aodiv@dividend:
   301                           	opt callstack 0
   302  000001                     ___aomod@dividend:
   303                           	opt callstack 0
   304                           
   305                           ; 8 bytes @ 0x0
   306  000001                     	ds	1
   307  000002                     SendI2C@data:
   308                           	opt callstack 0
   309  000002                     ReceiveI2C@flag:
   310                           	opt callstack 0
   311  000002                     LCD@data:
   312                           	opt callstack 0
   313                           
   314                           ; 1 bytes @ 0x1
   315  000002                     	ds	1
   316  000003                     ??_isupper:
   317  000003                     ??_isalpha:
   318  000003                     ??_islower:
   319  000003                     WriteI2C@Register:
   320                           	opt callstack 0
   321  000003                     ReceiveI2C@buffer:
   322                           	opt callstack 0
   323  000003                     SettingsLCD@word:
   324                           	opt callstack 0
   325  000003                     WriteLCD@word:
   326                           	opt callstack 0
   327  000003                     fputc@fp:
   328                           	opt callstack 0
   329  000003                     strlen@a:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x2
   333  000003                     	ds	1
   334  000004                     ReadI2C@Register:
   335                           	opt callstack 0
   336  000004                     WriteI2C@Data:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0x3
   340  000004                     	ds	1
   341  000005                     ??_fputc:
   342  000005                     ReadI2C@Data:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x4
   346  000005                     	ds	1
   347  000006                     WriteI2C@bytes:
   348                           	opt callstack 0
   349                           
   350                           ; 2 bytes @ 0x5
   351  000006                     	ds	1
   352  000007                     ?_toupper:
   353                           	opt callstack 0
   354  000007                     ReadI2C@bytes:
   355                           	opt callstack 0
   356  000007                     toupper@c:
   357                           	opt callstack 0
   358                           
   359                           ; 2 bytes @ 0x6
   360  000007                     	ds	1
   361  000008                     ??_WriteI2C:
   362                           
   363                           ; 1 bytes @ 0x7
   364  000008                     	ds	1
   365  000009                     ??_ReadI2C:
   366  000009                     ??_toupper:
   367  000009                     ___aodiv@divisor:
   368                           	opt callstack 0
   369  000009                     ___aomod@divisor:
   370                           	opt callstack 0
   371                           
   372                           ; 8 bytes @ 0x8
   373  000009                     	ds	1
   374  00000A                     WriteI2C@Address:
   375                           	opt callstack 0
   376  00000A                     fputs@s:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x9
   380  00000A                     	ds	1
   381  00000B                     ReadI2C@Address:
   382                           	opt callstack 0
   383                           
   384                           ; 1 bytes @ 0xA
   385  00000B                     	ds	1
   386  00000C                     fputs@fp:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0xB
   390  00000C                     	ds	1
   391  00000D                     _toupper$830:
   392                           	opt callstack 0
   393                           
   394                           ; 2 bytes @ 0xC
   395  00000D                     	ds	1
   396  00000E                     fputs@c:
   397                           	opt callstack 0
   398                           
   399                           ; 1 bytes @ 0xD
   400  00000E                     	ds	1
   401  00000F                     fputs@i:
   402                           	opt callstack 0
   403                           
   404                           ; 2 bytes @ 0xE
   405  00000F                     	ds	2
   406  000011                     ?_pad:
   407                           	opt callstack 0
   408  000011                     ___aodiv@counter:
   409                           	opt callstack 0
   410  000011                     ___aomod@counter:
   411                           	opt callstack 0
   412  000011                     pad@fp:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x10
   416  000011                     	ds	1
   417  000012                     ___aodiv@sign:
   418                           	opt callstack 0
   419  000012                     ___aomod@sign:
   420                           	opt callstack 0
   421                           
   422                           ; 1 bytes @ 0x11
   423  000012                     	ds	1
   424  000013                     ?_abs:
   425                           	opt callstack 0
   426  000013                     pad@buf:
   427                           	opt callstack 0
   428  000013                     abs@a:
   429                           	opt callstack 0
   430  000013                     ___aodiv@quotient:
   431                           	opt callstack 0
   432                           
   433                           ; 8 bytes @ 0x12
   434  000013                     	ds	2
   435  000015                     ??_abs:
   436  000015                     pad@p:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x14
   440  000015                     	ds	2
   441  000017                     ??_pad:
   442                           
   443                           ; 1 bytes @ 0x16
   444  000017                     	ds	1
   445  000018                     pad@i:
   446                           	opt callstack 0
   447                           
   448                           ; 2 bytes @ 0x17
   449  000018                     	ds	2
   450  00001A                     pad@w:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x19
   454  00001A                     	ds	2
   455  00001C                     ?_ctoa:
   456                           	opt callstack 0
   457  00001C                     ?_dtoa:
   458                           	opt callstack 0
   459  00001C                     ?_xtoa:
   460                           	opt callstack 0
   461  00001C                     ctoa@fp:
   462                           	opt callstack 0
   463  00001C                     dtoa@fp:
   464                           	opt callstack 0
   465  00001C                     xtoa@fp:
   466                           	opt callstack 0
   467                           
   468                           ; 2 bytes @ 0x1B
   469  00001C                     	ds	2
   470  00001E                     ctoa@c:
   471                           	opt callstack 0
   472  00001E                     dtoa@d:
   473                           	opt callstack 0
   474  00001E                     xtoa@d:
   475                           	opt callstack 0
   476                           
   477                           ; 8 bytes @ 0x1D
   478  00001E                     	ds	1
   479  00001F                     ctoa@w:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x1E
   483  00001F                     	ds	7
   484  000026                     ??_dtoa:
   485  000026                     xtoa@x:
   486                           	opt callstack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  000026                     	ds	1
   490  000027                     ??_xtoa:
   491                           
   492                           ; 1 bytes @ 0x26
   493  000027                     	ds	7
   494  00002E                     _dtoa$276:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x2D
   498  00002E                     	ds	1
   499  00002F                     _xtoa$286:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x2E
   503  00002F                     	ds	1
   504  000030                     dtoa@p:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0x2F
   508  000030                     	ds	1
   509  000031                     _xtoa$287:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x30
   513  000031                     	ds	1
   514  000032                     dtoa@w:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x31
   518  000032                     	ds	1
   519  000033                     xtoa@p:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x32
   523  000033                     	ds	1
   524  000034                     dtoa@s:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x33
   528  000034                     	ds	1
   529  000035                     xtoa@w:
   530                           	opt callstack 0
   531                           
   532                           ; 2 bytes @ 0x34
   533  000035                     	ds	1
   534  000036                     dtoa@n:
   535                           	opt callstack 0
   536                           
   537                           ; 8 bytes @ 0x35
   538  000036                     	ds	1
   539  000037                     xtoa@n:
   540                           	opt callstack 0
   541                           
   542                           ; 8 bytes @ 0x36
   543  000037                     	ds	7
   544  00003E                     dtoa@i:
   545                           	opt callstack 0
   546                           
   547                           ; 2 bytes @ 0x3D
   548  00003E                     	ds	1
   549  00003F                     xtoa@i:
   550                           	opt callstack 0
   551                           
   552                           ; 2 bytes @ 0x3E
   553  00003F                     	ds	2
   554  000041                     xtoa@c:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0x40
   558  000041                     	ds	2
   559  000043                     ?_vfpfcnvrt:
   560                           	opt callstack 0
   561  000043                     vfpfcnvrt@fp:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x42
   565  000043                     	ds	2
   566  000045                     vfpfcnvrt@fmt:
   567                           	opt callstack 0
   568                           
   569                           ; 2 bytes @ 0x44
   570  000045                     	ds	2
   571  000047                     vfpfcnvrt@ap:
   572                           	opt callstack 0
   573                           
   574                           ; 2 bytes @ 0x46
   575  000047                     	ds	2
   576  000049                     ??_vfpfcnvrt:
   577                           
   578                           ; 1 bytes @ 0x48
   579  000049                     	ds	4
   580  00004D                     vfpfcnvrt@ll:
   581                           	opt callstack 0
   582                           
   583                           ; 8 bytes @ 0x4C
   584  00004D                     	ds	8
   585  000055                     vfpfcnvrt@llu:
   586                           	opt callstack 0
   587                           
   588                           ; 8 bytes @ 0x54
   589  000055                     	ds	8
   590  00005D                     vfpfcnvrt@c:
   591                           	opt callstack 0
   592                           
   593                           ; 1 bytes @ 0x5C
   594  00005D                     	ds	1
   595  00005E                     vfprintf@cfmt:
   596                           	opt callstack 0
   597                           
   598                           ; 2 bytes @ 0x5D
   599  00005E                     	ds	2
   600  000060                     
   601                           ; 1 bytes @ 0x5F
   602 ;;
   603 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   604 ;;
   605 ;; *************** function _main *****************
   606 ;; Defined at:
   607 ;;		line 53 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   621 ;;      Params:         0       0       0       0       0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0       0       0       0       0
   624 ;;      Totals:         0       0       0       0       0       0       0       0       0
   625 ;;Total ram usage:        0 bytes
   626 ;; Hardware stack levels required when called:    9
   627 ;; This function calls:
   628 ;;		_Data1LCD
   629 ;;		_Data2LCD
   630 ;;		_ReadI2C
   631 ;;		_WriteI2C
   632 ;;		_settings
   633 ;; This function is called by:
   634 ;;		Startup code after reset
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text0
   639  001702                     __ptext0:
   640                           	opt callstack 0
   641  001702                     _main:
   642                           	opt callstack 22
   643  001702                     
   644                           ;main.c: 54:     settings();
   645  001702  EC91  F00C         	call	_settings	;wreg free
   646  001706                     
   647                           ;main.c: 55:     Data1LCD();
   648  001706  EC68  F00C         	call	_Data1LCD	;wreg free
   649  00170A                     
   650                           ;main.c: 56:     WriteI2C(0xA0,0xB5,name,6);
   651  00170A  0EB5               	movlw	181
   652  00170C  6E03               	movwf	WriteI2C@Register^0,c
   653  00170E  0ECD               	movlw	low _name
   654  001710  6E04               	movwf	WriteI2C@Data^0,c
   655  001712  0E00               	movlw	high _name
   656  001714  6E05               	movwf	(WriteI2C@Data+1)^0,c
   657  001716  0E00               	movlw	0
   658  001718  6E07               	movwf	(WriteI2C@bytes+1)^0,c
   659  00171A  0E06               	movlw	6
   660  00171C  6E06               	movwf	WriteI2C@bytes^0,c
   661  00171E  0EA0               	movlw	160
   662  001720  EC48  F00B         	call	_WriteI2C
   663  001724                     
   664                           ;main.c: 57:     WriteI2C(0xA0,0xFF,&name[2],1);
   665  001724  0EFF               	movlw	255
   666  001726  6E03               	movwf	WriteI2C@Register^0,c
   667  001728  0ECF               	movlw	low (_name+2)
   668  00172A  6E04               	movwf	WriteI2C@Data^0,c
   669  00172C  0E00               	movlw	high (_name+2)
   670  00172E  6E05               	movwf	(WriteI2C@Data+1)^0,c
   671  001730  0E00               	movlw	0
   672  001732  6E07               	movwf	(WriteI2C@bytes+1)^0,c
   673  001734  0E01               	movlw	1
   674  001736  6E06               	movwf	WriteI2C@bytes^0,c
   675  001738  0EA0               	movlw	160
   676  00173A  EC48  F00B         	call	_WriteI2C
   677  00173E                     
   678                           ;main.c: 58:     ReadI2C(0xA0,0xB3,dataSaved,9);
   679  00173E  0EB3               	movlw	179
   680  001740  6E04               	movwf	ReadI2C@Register^0,c
   681  001742  0E9E               	movlw	low _dataSaved
   682  001744  6E05               	movwf	ReadI2C@Data^0,c
   683  001746  0E00               	movlw	high _dataSaved
   684  001748  6E06               	movwf	(ReadI2C@Data+1)^0,c
   685  00174A  0E00               	movlw	0
   686  00174C  6E08               	movwf	(ReadI2C@bytes+1)^0,c
   687  00174E  0E09               	movlw	9
   688  001750  6E07               	movwf	ReadI2C@bytes^0,c
   689  001752  0EA0               	movlw	160
   690  001754  ECA9  F00A         	call	_ReadI2C
   691  001758                     
   692                           ;main.c: 59:     Data2LCD();
   693  001758  EC05  F00B         	call	_Data2LCD	;wreg free
   694  00175C                     l87:
   695  00175C  EFAE  F00B         	goto	l87
   696  001760  EF00  F000         	goto	start
   697  001764                     __end_of_main:
   698                           	opt callstack 0
   699                           
   700 ;; *************** function _settings *****************
   701 ;; Defined at:
   702 ;;		line 65 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   716 ;;      Params:         0       0       0       0       0       0       0       0       0
   717 ;;      Locals:         0       0       0       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0       0       0
   719 ;;      Totals:         0       0       0       0       0       0       0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    2
   723 ;; This function calls:
   724 ;;		_SettingsLCD
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text1
   731  001922                     __ptext1:
   732                           	opt callstack 0
   733  001922                     _settings:
   734                           	opt callstack 28
   735  001922                     
   736                           ;main.c: 66:     OSCCON = 0x72;
   737  001922  0E72               	movlw	114
   738  001924  6ED3               	movwf	211,c	;volatile
   739                           
   740                           ;main.c: 67:     ADCON1 = 0x0F;
   741  001926  0E0F               	movlw	15
   742  001928  6EC1               	movwf	193,c	;volatile
   743  00192A                     
   744                           ;main.c: 68:     TRISBbits.RB0 = 1;
   745  00192A  8093               	bsf	147,0,c	;volatile
   746  00192C                     
   747                           ;main.c: 69:     TRISBbits.RB1 = 1;
   748  00192C  8293               	bsf	147,1,c	;volatile
   749                           
   750                           ;main.c: 70:     SSPSTAT = 0x80;
   751  00192E  0E80               	movlw	128
   752  001930  6EC7               	movwf	199,c	;volatile
   753                           
   754                           ;main.c: 71:     SSPCON1 = 0x28;
   755  001932  0E28               	movlw	40
   756  001934  6EC6               	movwf	198,c	;volatile
   757                           
   758                           ;main.c: 72:     SSPCON2 = 0;
   759  001936  0E00               	movlw	0
   760  001938  6EC5               	movwf	197,c	;volatile
   761                           
   762                           ;main.c: 73:     SSPADD = 0x13;
   763  00193A  0E13               	movlw	19
   764  00193C  6EC8               	movwf	200,c	;volatile
   765                           
   766                           ;main.c: 75:     TRISD = 0x00;
   767  00193E  0E00               	movlw	0
   768  001940  6E95               	movwf	149,c	;volatile
   769                           
   770                           ;main.c: 76:     LATD = 0x00;
   771  001942  0E00               	movlw	0
   772  001944  6E8C               	movwf	140,c	;volatile
   773                           
   774                           ;main.c: 77:     TRISE = 0x00;
   775  001946  0E00               	movlw	0
   776  001948  6E96               	movwf	150,c	;volatile
   777                           
   778                           ;main.c: 78:     LATE = 0x00;
   779  00194A  0E00               	movlw	0
   780  00194C  6E8D               	movwf	141,c	;volatile
   781  00194E                     
   782                           ;main.c: 79:     SettingsLCD(0x02);
   783  00194E  0E02               	movlw	2
   784  001950  ECDA  F00D         	call	_SettingsLCD
   785  001954                     
   786                           ;main.c: 80:     SettingsLCD(0x06);
   787  001954  0E06               	movlw	6
   788  001956  ECDA  F00D         	call	_SettingsLCD
   789  00195A                     
   790                           ;main.c: 81:     SettingsLCD(0x0F);
   791  00195A  0E0F               	movlw	15
   792  00195C  ECDA  F00D         	call	_SettingsLCD
   793  001960                     
   794                           ;main.c: 82:     SettingsLCD(0x28);
   795  001960  0E28               	movlw	40
   796  001962  ECDA  F00D         	call	_SettingsLCD
   797  001966                     
   798                           ;main.c: 83:     SettingsLCD(0x01);
   799  001966  0E01               	movlw	1
   800  001968  ECDA  F00D         	call	_SettingsLCD
   801  00196C  0012               	return		;funcret
   802  00196E                     __end_of_settings:
   803                           	opt callstack 0
   804                           
   805 ;; *************** function _WriteI2C *****************
   806 ;; Defined at:
   807 ;;		line 86 in file "main.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;  Address         1    wreg     unsigned char 
   810 ;;  Register        1    2[COMRAM] unsigned char 
   811 ;;  Data            2    3[COMRAM] PTR unsigned char 
   812 ;;		 -> name(6), 
   813 ;;  bytes           2    5[COMRAM] int 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  Address         1    9[COMRAM] unsigned char 
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   825 ;;      Params:         5       0       0       0       0       0       0       0       0
   826 ;;      Locals:         1       0       0       0       0       0       0       0       0
   827 ;;      Temps:          2       0       0       0       0       0       0       0       0
   828 ;;      Totals:         8       0       0       0       0       0       0       0       0
   829 ;;Total ram usage:        8 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    2
   832 ;; This function calls:
   833 ;;		_SendI2C
   834 ;;		_StartI2C
   835 ;;		_StopI2C
   836 ;; This function is called by:
   837 ;;		_main
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text2
   842  001690                     __ptext2:
   843                           	opt callstack 0
   844  001690                     _WriteI2C:
   845                           	opt callstack 28
   846                           
   847                           ;incstack = 0
   848                           ;WriteI2C@Address stored from wreg
   849  001690  6E0A               	movwf	WriteI2C@Address^0,c
   850  001692                     
   851                           ;main.c: 87:     StartI2C();
   852  001692  ECF6  F00D         	call	_StartI2C	;wreg free
   853                           
   854                           ;main.c: 88:     SendI2C(Address);
   855  001696  500A               	movf	WriteI2C@Address^0,w,c
   856  001698  ECEC  F00D         	call	_SendI2C
   857                           
   858                           ;main.c: 89:     SendI2C(Register);
   859  00169C  5003               	movf	WriteI2C@Register^0,w,c
   860  00169E  ECEC  F00D         	call	_SendI2C
   861  0016A2                     
   862                           ;main.c: 90:     for(i=0; i<bytes; i++){
   863  0016A2  0E00               	movlw	0
   864  0016A4  0100               	movlb	0	; () banked
   865  0016A6  6F69               	movwf	(_i+1)& (0+255),b
   866  0016A8  0E00               	movlw	0
   867  0016AA  6F68               	movwf	_i& (0+255),b
   868  0016AC  EF64  F00B         	goto	l2024
   869  0016B0                     l2018:
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 91:         SendI2C(*Data);
   873  0016B0  C004  FFD9         	movff	WriteI2C@Data,fsr2l
   874  0016B4  C005  FFDA         	movff	WriteI2C@Data+1,fsr2h
   875  0016B8  50DF               	movf	indf2,w,c
   876  0016BA  ECEC  F00D         	call	_SendI2C
   877  0016BE                     
   878                           ;main.c: 92:         Data++;
   879  0016BE  4A04               	infsnz	WriteI2C@Data^0,f,c
   880  0016C0  2A05               	incf	(WriteI2C@Data+1)^0,f,c
   881  0016C2                     
   882                           ;main.c: 93:     }
   883  0016C2  0100               	movlb	0	; () banked
   884  0016C4  4B68               	infsnz	_i& (0+255),f,b
   885  0016C6  2B69               	incf	(_i+1)& (0+255),f,b
   886  0016C8                     l2024:
   887                           
   888                           ; BSR set to: 0
   889  0016C8  5006               	movf	WriteI2C@bytes^0,w,c
   890  0016CA  5D68               	subwf	_i& (0+255),w,b
   891  0016CC  5169               	movf	(_i+1)& (0+255),w,b
   892  0016CE  0A80               	xorlw	128
   893  0016D0  6E08               	movwf	??_WriteI2C^0,c
   894  0016D2  5007               	movf	(WriteI2C@bytes+1)^0,w,c
   895  0016D4  0A80               	xorlw	128
   896  0016D6  5808               	subwfb	??_WriteI2C^0,w,c
   897  0016D8  A0D8               	btfss	status,0,c
   898  0016DA  EF71  F00B         	goto	u1631
   899  0016DE  EF73  F00B         	goto	u1630
   900  0016E2                     u1631:
   901  0016E2  EF58  F00B         	goto	l2018
   902  0016E6                     u1630:
   903  0016E6                     
   904                           ; BSR set to: 0
   905                           ;main.c: 94:     StopI2C();
   906  0016E6  ECF2  F00D         	call	_StopI2C	;wreg free
   907  0016EA                     
   908                           ;main.c: 95:     _delay((unsigned long)((10*100)*(8000000/4000.0)));
   909  0016EA  0E0B               	movlw	11
   910  0016EC  6E09               	movwf	(??_WriteI2C+1)^0,c
   911  0016EE  0E26               	movlw	38
   912  0016F0  6E08               	movwf	??_WriteI2C^0,c
   913  0016F2  0E5E               	movlw	94
   914  0016F4                     u1677:
   915  0016F4  2EE8               	decfsz	wreg,f,c
   916  0016F6  D7FE               	bra	u1677
   917  0016F8  2E08               	decfsz	??_WriteI2C^0,f,c
   918  0016FA  D7FC               	bra	u1677
   919  0016FC  2E09               	decfsz	(??_WriteI2C+1)^0,f,c
   920  0016FE  D7FA               	bra	u1677
   921  001700  0012               	return		;funcret
   922  001702                     __end_of_WriteI2C:
   923                           	opt callstack 0
   924                           
   925 ;; *************** function _ReadI2C *****************
   926 ;; Defined at:
   927 ;;		line 117 in file "main.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  Address         1    wreg     unsigned char 
   930 ;;  Register        1    3[COMRAM] unsigned char 
   931 ;;  Data            2    4[COMRAM] PTR unsigned char 
   932 ;;		 -> dataSaved(9), 
   933 ;;  bytes           2    6[COMRAM] int 
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  Address         1   10[COMRAM] unsigned char 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   945 ;;      Params:         5       0       0       0       0       0       0       0       0
   946 ;;      Locals:         1       0       0       0       0       0       0       0       0
   947 ;;      Temps:          2       0       0       0       0       0       0       0       0
   948 ;;      Totals:         8       0       0       0       0       0       0       0       0
   949 ;;Total ram usage:        8 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    2
   952 ;; This function calls:
   953 ;;		_ReceiveI2C
   954 ;;		_RepeatedStartI2C
   955 ;;		_SendI2C
   956 ;;		_StartI2C
   957 ;;		_StopI2C
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text3
   964  001552                     __ptext3:
   965                           	opt callstack 0
   966  001552                     _ReadI2C:
   967                           	opt callstack 28
   968                           
   969                           ;incstack = 0
   970                           ;ReadI2C@Address stored from wreg
   971  001552  6E0B               	movwf	ReadI2C@Address^0,c
   972  001554                     
   973                           ;main.c: 118:     StartI2C();
   974  001554  ECF6  F00D         	call	_StartI2C	;wreg free
   975                           
   976                           ;main.c: 119:     SendI2C(Address);
   977  001558  500B               	movf	ReadI2C@Address^0,w,c
   978  00155A  ECEC  F00D         	call	_SendI2C
   979                           
   980                           ;main.c: 120:     SendI2C(Register);
   981  00155E  5004               	movf	ReadI2C@Register^0,w,c
   982  001560  ECEC  F00D         	call	_SendI2C
   983                           
   984                           ;main.c: 121:     RepeatedStartI2C();
   985  001564  ECFA  F00D         	call	_RepeatedStartI2C	;wreg free
   986                           
   987                           ;main.c: 122:     SendI2C(Address|0x01);
   988  001568  500B               	movf	ReadI2C@Address^0,w,c
   989  00156A  0901               	iorlw	1
   990  00156C  ECEC  F00D         	call	_SendI2C
   991  001570                     
   992                           ;main.c: 123:     for(i=0; i<bytes; i++){
   993  001570  0E00               	movlw	0
   994  001572  0100               	movlb	0	; () banked
   995  001574  6F69               	movwf	(_i+1)& (0+255),b
   996  001576  0E00               	movlw	0
   997  001578  6F68               	movwf	_i& (0+255),b
   998  00157A  EFE8  F00A         	goto	l2044
   999  00157E                     l2034:
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;main.c: 124:         if(i+1 == bytes){
  1003  00157E  0E01               	movlw	1
  1004  001580  2568               	addwf	_i& (0+255),w,b
  1005  001582  6E09               	movwf	??_ReadI2C^0,c
  1006  001584  0E00               	movlw	0
  1007  001586  2169               	addwfc	(_i+1)& (0+255),w,b
  1008  001588  6E0A               	movwf	(??_ReadI2C+1)^0,c
  1009  00158A  5007               	movf	ReadI2C@bytes^0,w,c
  1010  00158C  1809               	xorwf	??_ReadI2C^0,w,c
  1011  00158E  E107               	bnz	u1641
  1012  001590  5008               	movf	(ReadI2C@bytes+1)^0,w,c
  1013  001592  180A               	xorwf	(??_ReadI2C+1)^0,w,c
  1014  001594  A4D8               	btfss	status,2,c
  1015  001596  EFCF  F00A         	goto	u1641
  1016  00159A  EFD1  F00A         	goto	u1640
  1017  00159E                     u1641:
  1018  00159E  EFDB  F00A         	goto	l2038
  1019  0015A2                     u1640:
  1020  0015A2                     
  1021                           ; BSR set to: 0
  1022                           ;main.c: 125:             *Data = ReceiveI2C(1);
  1023  0015A2  0E01               	movlw	1
  1024  0015A4  ECA5  F00D         	call	_ReceiveI2C
  1025  0015A8  C005  FFD9         	movff	ReadI2C@Data,fsr2l
  1026  0015AC  C006  FFDA         	movff	ReadI2C@Data+1,fsr2h
  1027  0015B0  6EDF               	movwf	indf2,c
  1028                           
  1029                           ;main.c: 126:         }else{
  1030  0015B2  EFE3  F00A         	goto	l2040
  1031  0015B6                     l2038:
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;main.c: 127:             *Data = ReceiveI2C(0);
  1035  0015B6  0E00               	movlw	0
  1036  0015B8  ECA5  F00D         	call	_ReceiveI2C
  1037  0015BC  C005  FFD9         	movff	ReadI2C@Data,fsr2l
  1038  0015C0  C006  FFDA         	movff	ReadI2C@Data+1,fsr2h
  1039  0015C4  6EDF               	movwf	indf2,c
  1040  0015C6                     l2040:
  1041                           
  1042                           ;main.c: 129:         Data++;
  1043  0015C6  4A05               	infsnz	ReadI2C@Data^0,f,c
  1044  0015C8  2A06               	incf	(ReadI2C@Data+1)^0,f,c
  1045  0015CA                     
  1046                           ;main.c: 130:     }
  1047  0015CA  0100               	movlb	0	; () banked
  1048  0015CC  4B68               	infsnz	_i& (0+255),f,b
  1049  0015CE  2B69               	incf	(_i+1)& (0+255),f,b
  1050  0015D0                     l2044:
  1051                           
  1052                           ; BSR set to: 0
  1053  0015D0  5007               	movf	ReadI2C@bytes^0,w,c
  1054  0015D2  5D68               	subwf	_i& (0+255),w,b
  1055  0015D4  5169               	movf	(_i+1)& (0+255),w,b
  1056  0015D6  0A80               	xorlw	128
  1057  0015D8  6E09               	movwf	??_ReadI2C^0,c
  1058  0015DA  5008               	movf	(ReadI2C@bytes+1)^0,w,c
  1059  0015DC  0A80               	xorlw	128
  1060  0015DE  5809               	subwfb	??_ReadI2C^0,w,c
  1061  0015E0  A0D8               	btfss	status,0,c
  1062  0015E2  EFF5  F00A         	goto	u1651
  1063  0015E6  EFF7  F00A         	goto	u1650
  1064  0015EA                     u1651:
  1065  0015EA  EFBF  F00A         	goto	l2034
  1066  0015EE                     u1650:
  1067  0015EE                     
  1068                           ; BSR set to: 0
  1069                           ;main.c: 131:     StopI2C();
  1070  0015EE  ECF2  F00D         	call	_StopI2C	;wreg free
  1071  0015F2                     
  1072                           ;main.c: 132:     _delay((unsigned long)((10*100)*(8000000/4000.0)));
  1073  0015F2  0E0B               	movlw	11
  1074  0015F4  6E0A               	movwf	(??_ReadI2C+1)^0,c
  1075  0015F6  0E26               	movlw	38
  1076  0015F8  6E09               	movwf	??_ReadI2C^0,c
  1077  0015FA  0E5E               	movlw	94
  1078  0015FC                     u1687:
  1079  0015FC  2EE8               	decfsz	wreg,f,c
  1080  0015FE  D7FE               	bra	u1687
  1081  001600  2E09               	decfsz	??_ReadI2C^0,f,c
  1082  001602  D7FC               	bra	u1687
  1083  001604  2E0A               	decfsz	(??_ReadI2C+1)^0,f,c
  1084  001606  D7FA               	bra	u1687
  1085  001608  0012               	return		;funcret
  1086  00160A                     __end_of_ReadI2C:
  1087                           	opt callstack 0
  1088                           
  1089 ;; *************** function _StopI2C *****************
  1090 ;; Defined at:
  1091 ;;		line 112 in file "main.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;		None
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;		None
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1105 ;;      Params:         0       0       0       0       0       0       0       0       0
  1106 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1108 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1109 ;;Total ram usage:        0 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; Hardware stack levels required when called:    1
  1112 ;; This function calls:
  1113 ;;		_ReadyI2C
  1114 ;; This function is called by:
  1115 ;;		_WriteI2C
  1116 ;;		_ReadI2C
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text4
  1121  001BE4                     __ptext4:
  1122                           	opt callstack 0
  1123  001BE4                     _StopI2C:
  1124                           	opt callstack 28
  1125  001BE4                     
  1126                           ;main.c: 113:     ReadyI2C();
  1127  001BE4  ECBC  F00D         	call	_ReadyI2C	;wreg free
  1128  001BE8                     
  1129                           ;main.c: 114:     PEN = 1;
  1130  001BE8  84C5               	bsf	4037,2,c	;volatile
  1131  001BEA  0012               	return		;funcret
  1132  001BEC                     __end_of_StopI2C:
  1133                           	opt callstack 0
  1134                           
  1135 ;; *************** function _StartI2C *****************
  1136 ;; Defined at:
  1137 ;;		line 98 in file "main.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, status,2, status,0, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1151 ;;      Params:         0       0       0       0       0       0       0       0       0
  1152 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1153 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1154 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1155 ;;Total ram usage:        0 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    1
  1158 ;; This function calls:
  1159 ;;		_ReadyI2C
  1160 ;; This function is called by:
  1161 ;;		_WriteI2C
  1162 ;;		_ReadI2C
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text5
  1167  001BEC                     __ptext5:
  1168                           	opt callstack 0
  1169  001BEC                     _StartI2C:
  1170                           	opt callstack 28
  1171  001BEC                     
  1172                           ;main.c: 99:     ReadyI2C();
  1173  001BEC  ECBC  F00D         	call	_ReadyI2C	;wreg free
  1174  001BF0                     
  1175                           ;main.c: 100:     SEN = 1;
  1176  001BF0  80C5               	bsf	4037,0,c	;volatile
  1177  001BF2  0012               	return		;funcret
  1178  001BF4                     __end_of_StartI2C:
  1179                           	opt callstack 0
  1180                           
  1181 ;; *************** function _SendI2C *****************
  1182 ;; Defined at:
  1183 ;;		line 107 in file "main.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;  data            1    wreg     unsigned char 
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  data            1    1[COMRAM] unsigned char 
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1197 ;;      Params:         0       0       0       0       0       0       0       0       0
  1198 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1200 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1201 ;;Total ram usage:        1 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:    1
  1204 ;; This function calls:
  1205 ;;		_ReadyI2C
  1206 ;; This function is called by:
  1207 ;;		_WriteI2C
  1208 ;;		_ReadI2C
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text6
  1213  001BD8                     __ptext6:
  1214                           	opt callstack 0
  1215  001BD8                     _SendI2C:
  1216                           	opt callstack 28
  1217                           
  1218                           ;incstack = 0
  1219                           ;SendI2C@data stored from wreg
  1220  001BD8  6E02               	movwf	SendI2C@data^0,c
  1221  001BDA                     
  1222                           ;main.c: 108:     ReadyI2C();
  1223  001BDA  ECBC  F00D         	call	_ReadyI2C	;wreg free
  1224  001BDE                     
  1225                           ;main.c: 109:     SSPBUF = data;
  1226  001BDE  C002  FFC9         	movff	SendI2C@data,4041	;volatile
  1227  001BE2  0012               	return		;funcret
  1228  001BE4                     __end_of_SendI2C:
  1229                           	opt callstack 0
  1230                           
  1231 ;; *************** function _RepeatedStartI2C *****************
  1232 ;; Defined at:
  1233 ;;		line 135 in file "main.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1247 ;;      Params:         0       0       0       0       0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    1
  1254 ;; This function calls:
  1255 ;;		_ReadyI2C
  1256 ;; This function is called by:
  1257 ;;		_ReadI2C
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text7
  1262  001BF4                     __ptext7:
  1263                           	opt callstack 0
  1264  001BF4                     _RepeatedStartI2C:
  1265                           	opt callstack 28
  1266  001BF4                     
  1267                           ;main.c: 136:     ReadyI2C();
  1268  001BF4  ECBC  F00D         	call	_ReadyI2C	;wreg free
  1269  001BF8                     
  1270                           ;main.c: 137:     RSEN = 1;
  1271  001BF8  82C5               	bsf	4037,1,c	;volatile
  1272  001BFA  0012               	return		;funcret
  1273  001BFC                     __end_of_RepeatedStartI2C:
  1274                           	opt callstack 0
  1275                           
  1276 ;; *************** function _ReceiveI2C *****************
  1277 ;; Defined at:
  1278 ;;		line 140 in file "main.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  flag            1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  flag            1    1[COMRAM] unsigned char 
  1283 ;;  buffer          1    2[COMRAM] unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      unsigned char 
  1286 ;; Registers used:
  1287 ;;		wreg, status,2, status,0, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0
  1294 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1296 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1297 ;;Total ram usage:        2 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    1
  1300 ;; This function calls:
  1301 ;;		_ReadyI2C
  1302 ;; This function is called by:
  1303 ;;		_ReadI2C
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text8
  1308  001B4A                     __ptext8:
  1309                           	opt callstack 0
  1310  001B4A                     _ReceiveI2C:
  1311                           	opt callstack 28
  1312                           
  1313                           ;incstack = 0
  1314                           ;ReceiveI2C@flag stored from wreg
  1315  001B4A  6E02               	movwf	ReceiveI2C@flag^0,c
  1316  001B4C                     
  1317                           ;main.c: 141:     unsigned char buffer;;main.c: 142:     ReadyI2C();
  1318  001B4C  ECBC  F00D         	call	_ReadyI2C	;wreg free
  1319  001B50                     
  1320                           ;main.c: 143:     RCEN = 1;
  1321  001B50  86C5               	bsf	4037,3,c	;volatile
  1322                           
  1323                           ;main.c: 144:     ReadyI2C();
  1324  001B52  ECBC  F00D         	call	_ReadyI2C	;wreg free
  1325  001B56                     
  1326                           ;main.c: 145:     buffer = SSPBUF;
  1327  001B56  CFC9 F003          	movff	4041,ReceiveI2C@buffer	;volatile
  1328                           
  1329                           ;main.c: 146:     ReadyI2C();
  1330  001B5A  ECBC  F00D         	call	_ReadyI2C	;wreg free
  1331  001B5E                     
  1332                           ;main.c: 147:     ACKDT = flag==1? 1 : 0;
  1333  001B5E  0402               	decf	ReceiveI2C@flag^0,w,c
  1334  001B60  B4D8               	btfsc	status,2,c
  1335  001B62  EFB5  F00D         	goto	u1601
  1336  001B66  EFB8  F00D         	goto	u1600
  1337  001B6A                     u1601:
  1338  001B6A  8AC5               	bsf	4037,5,c	;volatile
  1339  001B6C  EFB9  F00D         	goto	u1615
  1340  001B70                     u1600:
  1341  001B70  9AC5               	bcf	4037,5,c	;volatile
  1342  001B72                     u1615:
  1343  001B72                     
  1344                           ;main.c: 148:     ACKEN = 1;
  1345  001B72  88C5               	bsf	4037,4,c	;volatile
  1346  001B74                     
  1347                           ;main.c: 149:     return buffer;
  1348  001B74  5003               	movf	ReceiveI2C@buffer^0,w,c
  1349  001B76  0012               	return		;funcret
  1350  001B78                     __end_of_ReceiveI2C:
  1351                           	opt callstack 0
  1352                           
  1353 ;; *************** function _ReadyI2C *****************
  1354 ;; Defined at:
  1355 ;;		line 103 in file "main.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;		None
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, status,0
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1369 ;;      Params:         0       0       0       0       0       0       0       0       0
  1370 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1371 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1372 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1373 ;;Total ram usage:        1 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_StartI2C
  1379 ;;		_SendI2C
  1380 ;;		_StopI2C
  1381 ;;		_RepeatedStartI2C
  1382 ;;		_ReceiveI2C
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text9
  1387  001B78                     __ptext9:
  1388                           	opt callstack 0
  1389  001B78                     _ReadyI2C:
  1390                           	opt callstack 28
  1391  001B78                     l1914:
  1392  001B78  CFC5 F001          	movff	4037,??_ReadyI2C	;volatile
  1393  001B7C  0E1F               	movlw	31
  1394  001B7E  1601               	andwf	??_ReadyI2C^0,f,c
  1395  001B80  A4D8               	btfss	status,2,c
  1396  001B82  EFC5  F00D         	goto	u1571
  1397  001B86  EFC7  F00D         	goto	u1570
  1398  001B8A                     u1571:
  1399  001B8A  EFBC  F00D         	goto	l1914
  1400  001B8E                     u1570:
  1401  001B8E  B4C7               	btfsc	199,2,c	;volatile
  1402  001B90  EFCC  F00D         	goto	u1581
  1403  001B94  EFCE  F00D         	goto	u1580
  1404  001B98                     u1581:
  1405  001B98  EFBC  F00D         	goto	l1914
  1406  001B9C                     u1580:
  1407  001B9C  0012               	return		;funcret
  1408  001B9E                     __end_of_ReadyI2C:
  1409                           	opt callstack 0
  1410                           
  1411 ;; *************** function _Data2LCD *****************
  1412 ;; Defined at:
  1413 ;;		line 180 in file "main.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0
  1428 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1430 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1431 ;;Total ram usage:        0 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    8
  1434 ;; This function calls:
  1435 ;;		_SettingsLCD
  1436 ;;		_WriteLCD
  1437 ;;		_sprintf
  1438 ;;		_strlen
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text10
  1445  00160A                     __ptext10:
  1446                           	opt callstack 0
  1447  00160A                     _Data2LCD:
  1448                           	opt callstack 22
  1449  00160A                     
  1450                           ;main.c: 181:     SettingsLCD(0xC0);
  1451  00160A  0EC0               	movlw	192
  1452  00160C  ECDA  F00D         	call	_SettingsLCD
  1453  001610                     
  1454                           ;main.c: 182:     sprintf(texto2,"%x,%x,%d,%c,%X",dataSaved[0],dataSaved[1],dataSaved[2]
      +                          ,dataSaved[3],dataSaved[4]);
  1455  001610  0E8A               	movlw	low _texto2
  1456  001612  0100               	movlb	0	; () banked
  1457  001614  6FAD               	movwf	sprintf@s& (0+255),b
  1458  001616  0E00               	movlw	high _texto2
  1459  001618  6FAE               	movwf	(sprintf@s+1)& (0+255),b
  1460  00161A  0E01               	movlw	low STR_1
  1461  00161C  6FAF               	movwf	sprintf@fmt& (0+255),b
  1462  00161E  0E08               	movlw	high STR_1
  1463  001620  6FB0               	movwf	(sprintf@fmt+1)& (0+255),b
  1464  001622  C09E  F0B1         	movff	_dataSaved,?_sprintf+4
  1465  001626  6BB2               	clrf	(?_sprintf+5)& (0+255),b
  1466  001628  C09F  F0B3         	movff	_dataSaved+1,?_sprintf+6
  1467  00162C  6BB4               	clrf	(?_sprintf+7)& (0+255),b
  1468  00162E  C0A0  F0B5         	movff	_dataSaved+2,?_sprintf+8
  1469  001632  6BB6               	clrf	(?_sprintf+9)& (0+255),b
  1470  001634  C0A1  F0B7         	movff	_dataSaved+3,?_sprintf+10
  1471  001638  6BB8               	clrf	(?_sprintf+11)& (0+255),b
  1472  00163A  C0A2  F0B9         	movff	_dataSaved+4,?_sprintf+12
  1473  00163E  6BBA               	clrf	(?_sprintf+13)& (0+255),b
  1474  001640  EC3F  F00C         	call	_sprintf	;wreg free
  1475  001644                     
  1476                           ;main.c: 183:     for(i=0; i<strlen(texto2); i++){
  1477  001644  0E00               	movlw	0
  1478  001646  0100               	movlb	0	; () banked
  1479  001648  6F69               	movwf	(_i+1)& (0+255),b
  1480  00164A  0E00               	movlw	0
  1481  00164C  6F68               	movwf	_i& (0+255),b
  1482  00164E  EF35  F00B         	goto	l2060
  1483  001652                     l2056:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;main.c: 184:         WriteLCD(texto2[i]);
  1487  001652  0E8A               	movlw	low _texto2
  1488  001654  2568               	addwf	_i& (0+255),w,b
  1489  001656  6ED9               	movwf	fsr2l,c
  1490  001658  0E00               	movlw	high _texto2
  1491  00165A  2169               	addwfc	(_i+1)& (0+255),w,b
  1492  00165C  6EDA               	movwf	fsr2h,c
  1493  00165E  50DF               	movf	indf2,w,c
  1494  001660  ECCF  F00D         	call	_WriteLCD
  1495  001664                     
  1496                           ;main.c: 185:     }
  1497  001664  0100               	movlb	0	; () banked
  1498  001666  4B68               	infsnz	_i& (0+255),f,b
  1499  001668  2B69               	incf	(_i+1)& (0+255),f,b
  1500  00166A                     l2060:
  1501                           
  1502                           ; BSR set to: 0
  1503  00166A  0E8A               	movlw	low _texto2
  1504  00166C  6E01               	movwf	strlen@s^0,c
  1505  00166E  0E00               	movlw	high _texto2
  1506  001670  6E02               	movwf	(strlen@s+1)^0,c
  1507  001672  EC8A  F00D         	call	_strlen	;wreg free
  1508  001676  5001               	movf	?_strlen^0,w,c
  1509  001678  0100               	movlb	0	; () banked
  1510  00167A  5D68               	subwf	_i& (0+255),w,b
  1511  00167C  5002               	movf	(?_strlen+1)^0,w,c
  1512  00167E  5969               	subwfb	(_i+1)& (0+255),w,b
  1513  001680  A0D8               	btfss	status,0,c
  1514  001682  EF45  F00B         	goto	u1661
  1515  001686  EF47  F00B         	goto	u1660
  1516  00168A                     u1661:
  1517  00168A  EF29  F00B         	goto	l2056
  1518  00168E                     u1660:
  1519  00168E                     
  1520                           ; BSR set to: 0
  1521  00168E  0012               	return		;funcret
  1522  001690                     __end_of_Data2LCD:
  1523                           	opt callstack 0
  1524                           
  1525 ;; *************** function _sprintf *****************
  1526 ;; Defined at:
  1527 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  s               2    6[BANK0 ] PTR unsigned char 
  1530 ;;		 -> texto2(20), 
  1531 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  1532 ;;		 -> STR_1(15), 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  f               6   24[BANK0 ] struct _IO_FILE
  1535 ;;  ap              2   22[BANK0 ] PTR void [1]
  1536 ;;		 -> ?_sprintf(2), 
  1537 ;;  ret             2    0        int 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  2    6[BANK0 ] int 
  1540 ;; Registers used:
  1541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1547 ;;      Params:         0      14       0       0       0       0       0       0       0
  1548 ;;      Locals:         0      10       0       0       0       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1550 ;;      Totals:         0      24       0       0       0       0       0       0       0
  1551 ;;Total ram usage:       24 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    7
  1554 ;; This function calls:
  1555 ;;		_vfprintf
  1556 ;; This function is called by:
  1557 ;;		_Data2LCD
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text11
  1562  00187E                     __ptext11:
  1563                           	opt callstack 0
  1564  00187E                     _sprintf:
  1565                           	opt callstack 22
  1566  00187E  0EB1               	movlw	low (?_sprintf+4)
  1567  001880  0100               	movlb	0	; () banked
  1568  001882  6FBD               	movwf	sprintf@ap& (0+255),b
  1569  001884  0E00               	movlw	high (?_sprintf+4)
  1570  001886  6FBE               	movwf	(sprintf@ap+1)& (0+255),b
  1571  001888  C0AD  F0BF         	movff	sprintf@s,sprintf@f
  1572  00188C  C0AE  F0C0         	movff	sprintf@s+1,sprintf@f+1
  1573  001890                     
  1574                           ; BSR set to: 0
  1575  001890  0E00               	movlw	0
  1576  001892  6FC2               	movwf	(sprintf@f+3)& (0+255),b
  1577  001894  0E00               	movlw	0
  1578  001896  6FC1               	movwf	(sprintf@f+2)& (0+255),b
  1579  001898                     
  1580                           ; BSR set to: 0
  1581  001898  0E00               	movlw	0
  1582  00189A  6FC4               	movwf	(sprintf@f+5)& (0+255),b
  1583  00189C  0E00               	movlw	0
  1584  00189E  6FC3               	movwf	(sprintf@f+4)& (0+255),b
  1585  0018A0                     
  1586                           ; BSR set to: 0
  1587  0018A0  0EBF               	movlw	low sprintf@f
  1588  0018A2  6FA7               	movwf	vfprintf@fp& (0+255),b
  1589  0018A4  0E00               	movlw	high sprintf@f
  1590  0018A6  6FA8               	movwf	(vfprintf@fp+1)& (0+255),b
  1591  0018A8  C0AF  F0A9         	movff	sprintf@fmt,vfprintf@fmt
  1592  0018AC  C0B0  F0AA         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1593  0018B0  0EBD               	movlw	low sprintf@ap
  1594  0018B2  6FAB               	movwf	vfprintf@ap& (0+255),b
  1595  0018B4  0E00               	movlw	high sprintf@ap
  1596  0018B6  6FAC               	movwf	(vfprintf@ap+1)& (0+255),b
  1597  0018B8  ECB2  F00B         	call	_vfprintf	;wreg free
  1598  0018BC  0100               	movlb	0	; () banked
  1599  0018BE  51C1               	movf	(sprintf@f+2)& (0+255),w,b
  1600  0018C0  25AD               	addwf	sprintf@s& (0+255),w,b
  1601  0018C2  6ED9               	movwf	fsr2l,c
  1602  0018C4  51C2               	movf	(sprintf@f+3)& (0+255),w,b
  1603  0018C6  21AE               	addwfc	(sprintf@s+1)& (0+255),w,b
  1604  0018C8  6EDA               	movwf	fsr2h,c
  1605  0018CA  0E00               	movlw	0
  1606  0018CC  6EDF               	movwf	indf2,c
  1607  0018CE                     
  1608                           ; BSR set to: 0
  1609  0018CE  0012               	return		;funcret
  1610  0018D0                     __end_of_sprintf:
  1611                           	opt callstack 0
  1612                           
  1613 ;; *************** function _vfprintf *****************
  1614 ;; Defined at:
  1615 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  1618 ;;		 -> sprintf@f(6), 
  1619 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1620 ;;		 -> STR_1(15), 
  1621 ;;  ap              2    4[BANK0 ] PTR PTR void 
  1622 ;;		 -> sprintf@ap(2), 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  cfmt            2   93[COMRAM] PTR unsigned char 
  1625 ;;		 -> STR_1(15), 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  2    0[BANK0 ] int 
  1628 ;; Registers used:
  1629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1635 ;;      Params:         0       6       0       0       0       0       0       0       0
  1636 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1638 ;;      Totals:         2       6       0       0       0       0       0       0       0
  1639 ;;Total ram usage:        8 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    6
  1642 ;; This function calls:
  1643 ;;		_vfpfcnvrt
  1644 ;; This function is called by:
  1645 ;;		_sprintf
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text12
  1650  001764                     __ptext12:
  1651                           	opt callstack 0
  1652  001764                     _vfprintf:
  1653                           	opt callstack 22
  1654  001764                     
  1655                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1656  001764  C0A9  F05E         	movff	vfprintf@fmt,vfprintf@cfmt
  1657  001768  C0AA  F05F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1658  00176C                     
  1659                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1660  00176C  0E00               	movlw	0
  1661  00176E  0100               	movlb	0	; () banked
  1662  001770  6F61               	movwf	(_nout+1)& (0+255),b
  1663  001772  0E00               	movlw	0
  1664  001774  6F60               	movwf	_nout& (0+255),b
  1665                           
  1666                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1667  001776  EFD0  F00B         	goto	l1936
  1668  00177A                     l1934:
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1672  00177A  C0A7  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  1673  00177E  C0A8  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1674  001782  0E5E               	movlw	low vfprintf@cfmt
  1675  001784  6E45               	movwf	vfpfcnvrt@fmt^0,c
  1676  001786  0E00               	movlw	high vfprintf@cfmt
  1677  001788  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1678  00178A  C0AB  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  1679  00178E  C0AC  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1680  001792  EC09  F004         	call	_vfpfcnvrt	;wreg free
  1681  001796  5043               	movf	?_vfpfcnvrt^0,w,c
  1682  001798  0100               	movlb	0	; () banked
  1683  00179A  2760               	addwf	_nout& (0+255),f,b
  1684  00179C  5044               	movf	(?_vfpfcnvrt+1)^0,w,c
  1685  00179E  2361               	addwfc	(_nout+1)& (0+255),f,b
  1686  0017A0                     l1936:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1690  0017A0  C05E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1691  0017A4  C05F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1692  0017A8                     	if	0	;tblptru may be non-zero
  1693  0017A8                     	endif
  1694  0017A8                     	if	0	;tblptru may be non-zero
  1695  0017A8                     	endif
  1696  0017A8  0008               	tblrd		*
  1697  0017AA  50F5               	movf	tablat,w,c
  1698  0017AC  0900               	iorlw	0
  1699  0017AE  A4D8               	btfss	status,2,c
  1700  0017B0  EFDC  F00B         	goto	u1591
  1701  0017B4  EFDE  F00B         	goto	u1590
  1702  0017B8                     u1591:
  1703  0017B8  EFBD  F00B         	goto	l1934
  1704  0017BC                     u1590:
  1705  0017BC                     
  1706                           ; BSR set to: 0
  1707                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1708  0017BC  C060  F0A7         	movff	_nout,?_vfprintf
  1709  0017C0  C061  F0A8         	movff	_nout+1,?_vfprintf+1
  1710  0017C4                     
  1711                           ; BSR set to: 0
  1712  0017C4  0012               	return		;funcret
  1713  0017C6                     __end_of_vfprintf:
  1714                           	opt callstack 0
  1715                           
  1716 ;; *************** function _vfpfcnvrt *****************
  1717 ;; Defined at:
  1718 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  1721 ;;		 -> sprintf@f(6), 
  1722 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  1723 ;;		 -> vfprintf@cfmt(2), 
  1724 ;;  ap              2   70[COMRAM] PTR PTR void 
  1725 ;;		 -> sprintf@ap(2), 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  llu             8   84[COMRAM] unsigned long long 
  1728 ;;  ll              8   76[COMRAM] long long 
  1729 ;;  f               4    0        long long 
  1730 ;;  vp              3    0        PTR void 
  1731 ;;  ct              3    0        unsigned char [3]
  1732 ;;  cp              3    0        PTR unsigned char 
  1733 ;;  i               2    0        int 
  1734 ;;  done            2    0        int 
  1735 ;;  c               1   92[COMRAM] unsigned char 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  2   66[COMRAM] int 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1745 ;;      Params:         6       0       0       0       0       0       0       0       0
  1746 ;;      Locals:        17       0       0       0       0       0       0       0       0
  1747 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1748 ;;      Totals:        27       0       0       0       0       0       0       0       0
  1749 ;;Total ram usage:       27 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    5
  1752 ;; This function calls:
  1753 ;;		_ctoa
  1754 ;;		_dtoa
  1755 ;;		_fputc
  1756 ;;		_xtoa
  1757 ;; This function is called by:
  1758 ;;		_vfprintf
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text13
  1763  000812                     __ptext13:
  1764                           	opt callstack 0
  1765  000812                     _vfpfcnvrt:
  1766                           	opt callstack 22
  1767  000812                     
  1768                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1769  000812  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1770  000816  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1771  00081A  CFDE FFF6          	movff	postinc2,tblptrl
  1772  00081E  CFDD FFF7          	movff	postdec2,tblptrh
  1773  000822                     	if	0	;tblptru may be non-zero
  1774  000822                     	endif
  1775  000822                     	if	0	;tblptru may be non-zero
  1776  000822                     	endif
  1777  000822  0008               	tblrd		*
  1778  000824  50F5               	movf	tablat,w,c
  1779  000826  0A25               	xorlw	37
  1780  000828  A4D8               	btfss	status,2,c
  1781  00082A  EF19  F004         	goto	u1501
  1782  00082E  EF1B  F004         	goto	u1500
  1783  000832                     u1501:
  1784  000832  EF72  F005         	goto	l1904
  1785  000836                     u1500:
  1786  000836                     
  1787                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1788  000836  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1789  00083A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1790  00083E  2ADE               	incf	postinc2,f,c
  1791  000840  0E00               	movlw	0
  1792  000842  22DD               	addwfc	postdec2,f,c
  1793  000844                     
  1794                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1795  000844  0E00               	movlw	0
  1796  000846  0100               	movlb	0	; () banked
  1797  000848  6F63               	movwf	(_width+1)& (0+255),b
  1798  00084A  0E00               	movlw	0
  1799  00084C  6F62               	movwf	_width& (0+255),b
  1800  00084E  C062  F066         	movff	_width,_flags
  1801  000852  C063  F067         	movff	_width+1,_flags+1
  1802  000856                     
  1803                           ; BSR set to: 0
  1804                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1805  000856  6964               	setf	_prec& (0+255),b
  1806  000858  6965               	setf	(_prec+1)& (0+255),b
  1807  00085A                     
  1808                           ; BSR set to: 0
  1809                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  1810  00085A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1811  00085E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1812  000862  CFDE FFF6          	movff	postinc2,tblptrl
  1813  000866  CFDD FFF7          	movff	postdec2,tblptrh
  1814  00086A                     	if	0	;tblptru may be non-zero
  1815  00086A                     	endif
  1816  00086A                     	if	0	;tblptru may be non-zero
  1817  00086A                     	endif
  1818  00086A  0008               	tblrd		*
  1819  00086C  50F5               	movf	tablat,w,c
  1820  00086E  0A63               	xorlw	99
  1821  000870  A4D8               	btfss	status,2,c
  1822  000872  EF3D  F004         	goto	u1511
  1823  000876  EF3F  F004         	goto	u1510
  1824  00087A                     u1511:
  1825  00087A  EF66  F004         	goto	l1864
  1826  00087E                     u1510:
  1827  00087E                     
  1828                           ; BSR set to: 0
  1829                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  1830  00087E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1831  000882  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1832  000886  2ADE               	incf	postinc2,f,c
  1833  000888  0E00               	movlw	0
  1834  00088A  22DD               	addwfc	postdec2,f,c
  1835                           
  1836                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  1837  00088C  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1838  000890  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1839  000894  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1840  000898  0E02               	movlw	2
  1841  00089A  26DE               	addwf	postinc2,f,c
  1842  00089C  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1843  0008A0  0E00               	movlw	0
  1844  0008A2  22DD               	addwfc	postdec2,f,c
  1845  0008A4  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1846  0008A8  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1847  0008AC  50DF               	movf	indf2,w,c
  1848  0008AE  6E5D               	movwf	vfpfcnvrt@c^0,c
  1849  0008B0                     
  1850                           ; BSR set to: 0
  1851                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  1852  0008B0  C043  F01C         	movff	vfpfcnvrt@fp,ctoa@fp
  1853  0008B4  C044  F01D         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  1854  0008B8  C05D  F01E         	movff	vfpfcnvrt@c,ctoa@c
  1855  0008BC  EC12  F00C         	call	_ctoa	;wreg free
  1856  0008C0  C01C  F043         	movff	?_ctoa,?_vfpfcnvrt
  1857  0008C4  C01D  F044         	movff	?_ctoa+1,?_vfpfcnvrt+1
  1858  0008C8  EF8D  F005         	goto	l255
  1859  0008CC                     l1864:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1863  0008CC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1864  0008D0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1865  0008D4  CFDE FFF6          	movff	postinc2,tblptrl
  1866  0008D8  CFDD FFF7          	movff	postdec2,tblptrh
  1867  0008DC                     	if	0	;tblptru may be non-zero
  1868  0008DC                     	endif
  1869  0008DC                     	if	0	;tblptru may be non-zero
  1870  0008DC                     	endif
  1871  0008DC  0008               	tblrd		*
  1872  0008DE  50F5               	movf	tablat,w,c
  1873  0008E0  0A64               	xorlw	100
  1874  0008E2  B4D8               	btfsc	status,2,c
  1875  0008E4  EF76  F004         	goto	u1521
  1876  0008E8  EF78  F004         	goto	u1520
  1877  0008EC                     u1521:
  1878  0008EC  EF8A  F004         	goto	l1868
  1879  0008F0                     u1520:
  1880  0008F0                     
  1881                           ; BSR set to: 0
  1882  0008F0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1883  0008F4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1884  0008F8  CFDE FFF6          	movff	postinc2,tblptrl
  1885  0008FC  CFDD FFF7          	movff	postdec2,tblptrh
  1886  000900                     	if	0	;tblptru may be non-zero
  1887  000900                     	endif
  1888  000900                     	if	0	;tblptru may be non-zero
  1889  000900                     	endif
  1890  000900  0008               	tblrd		*
  1891  000902  50F5               	movf	tablat,w,c
  1892  000904  0A69               	xorlw	105
  1893  000906  A4D8               	btfss	status,2,c
  1894  000908  EF88  F004         	goto	u1531
  1895  00090C  EF8A  F004         	goto	u1530
  1896  000910                     u1531:
  1897  000910  EFCA  F004         	goto	l1874
  1898  000914                     u1530:
  1899  000914                     l1868:
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1903  000914  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1904  000918  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1905  00091C  2ADE               	incf	postinc2,f,c
  1906  00091E  0E00               	movlw	0
  1907  000920  22DD               	addwfc	postdec2,f,c
  1908                           
  1909                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1910  000922  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1911  000926  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1912  00092A  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1913  00092E  0E02               	movlw	2
  1914  000930  26DE               	addwf	postinc2,f,c
  1915  000932  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1916  000936  0E00               	movlw	0
  1917  000938  22DD               	addwfc	postdec2,f,c
  1918  00093A  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1919  00093E  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1920  000942  CFDE F04D          	movff	postinc2,vfpfcnvrt@ll
  1921  000946  CFDD F04E          	movff	postdec2,vfpfcnvrt@ll+1
  1922  00094A  0E00               	movlw	0
  1923  00094C  BE4E               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1924  00094E  0EFF               	movlw	-1
  1925  000950  6E4F               	movwf	(vfpfcnvrt@ll+2)^0,c
  1926  000952  6E50               	movwf	(vfpfcnvrt@ll+3)^0,c
  1927  000954  6E51               	movwf	(vfpfcnvrt@ll+4)^0,c
  1928  000956  6E52               	movwf	(vfpfcnvrt@ll+5)^0,c
  1929  000958  6E53               	movwf	(vfpfcnvrt@ll+6)^0,c
  1930  00095A  6E54               	movwf	(vfpfcnvrt@ll+7)^0,c
  1931  00095C                     
  1932                           ; BSR set to: 0
  1933                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1934  00095C  C043  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1935  000960  C044  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1936  000964  C04D  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1937  000968  C04E  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1938  00096C  C04F  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1939  000970  C050  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1940  000974  C051  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1941  000978  C052  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1942  00097C  C053  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1943  000980  C054  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1944  000984  EC8E  F005         	call	_dtoa	;wreg free
  1945  000988  C01C  F043         	movff	?_dtoa,?_vfpfcnvrt
  1946  00098C  C01D  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1947  000990  EF8D  F005         	goto	l255
  1948  000994                     l1874:
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
  1952  000994  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1953  000998  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1954  00099C  CFDE FFF6          	movff	postinc2,tblptrl
  1955  0009A0  CFDD FFF7          	movff	postdec2,tblptrh
  1956  0009A4                     	if	0	;tblptru may be non-zero
  1957  0009A4                     	endif
  1958  0009A4                     	if	0	;tblptru may be non-zero
  1959  0009A4                     	endif
  1960  0009A4  0008               	tblrd		*
  1961  0009A6  50F5               	movf	tablat,w,c
  1962  0009A8  0A78               	xorlw	120
  1963  0009AA  B4D8               	btfsc	status,2,c
  1964  0009AC  EFDA  F004         	goto	u1541
  1965  0009B0  EFDC  F004         	goto	u1540
  1966  0009B4                     u1541:
  1967  0009B4  EFEE  F004         	goto	l1878
  1968  0009B8                     u1540:
  1969  0009B8                     
  1970                           ; BSR set to: 0
  1971  0009B8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1972  0009BC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1973  0009C0  CFDE FFF6          	movff	postinc2,tblptrl
  1974  0009C4  CFDD FFF7          	movff	postdec2,tblptrh
  1975  0009C8                     	if	0	;tblptru may be non-zero
  1976  0009C8                     	endif
  1977  0009C8                     	if	0	;tblptru may be non-zero
  1978  0009C8                     	endif
  1979  0009C8  0008               	tblrd		*
  1980  0009CA  50F5               	movf	tablat,w,c
  1981  0009CC  0A58               	xorlw	88
  1982  0009CE  A4D8               	btfss	status,2,c
  1983  0009D0  EFEC  F004         	goto	u1551
  1984  0009D4  EFEE  F004         	goto	u1550
  1985  0009D8                     u1551:
  1986  0009D8  EF3C  F005         	goto	l1888
  1987  0009DC                     u1550:
  1988  0009DC                     l1878:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
  1992  0009DC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1993  0009E0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1994  0009E4  CFDE FFF6          	movff	postinc2,tblptrl
  1995  0009E8  CFDD FFF7          	movff	postdec2,tblptrh
  1996  0009EC                     	if	0	;tblptru may be non-zero
  1997  0009EC                     	endif
  1998  0009EC                     	if	0	;tblptru may be non-zero
  1999  0009EC                     	endif
  2000  0009EC  0008               	tblrd		*
  2001  0009EE  CFF5 F05D          	movff	tablat,vfpfcnvrt@c
  2002  0009F2                     
  2003                           ; BSR set to: 0
  2004                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
  2005  0009F2  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2006  0009F6  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2007  0009FA  2ADE               	incf	postinc2,f,c
  2008  0009FC  0E00               	movlw	0
  2009  0009FE  22DD               	addwfc	postdec2,f,c
  2010  000A00                     
  2011                           ; BSR set to: 0
  2012                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  2013  000A00  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2014  000A04  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2015  000A08  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2016  000A0C  0E02               	movlw	2
  2017  000A0E  26DE               	addwf	postinc2,f,c
  2018  000A10  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2019  000A14  0E00               	movlw	0
  2020  000A16  22DD               	addwfc	postdec2,f,c
  2021  000A18  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2022  000A1C  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2023  000A20  CFDE F04B          	movff	postinc2,??_vfpfcnvrt+2
  2024  000A24  CFDD F04C          	movff	postdec2,??_vfpfcnvrt+3
  2025  000A28  C04B  F055         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  2026  000A2C  C04C  F056         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  2027  000A30  6A57               	clrf	(vfpfcnvrt@llu+2)^0,c
  2028  000A32  6A58               	clrf	(vfpfcnvrt@llu+3)^0,c
  2029  000A34  6A59               	clrf	(vfpfcnvrt@llu+4)^0,c
  2030  000A36  6A5A               	clrf	(vfpfcnvrt@llu+5)^0,c
  2031  000A38  6A5B               	clrf	(vfpfcnvrt@llu+6)^0,c
  2032  000A3A  6A5C               	clrf	(vfpfcnvrt@llu+7)^0,c
  2033  000A3C                     
  2034                           ; BSR set to: 0
  2035                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
  2036  000A3C  C043  F01C         	movff	vfpfcnvrt@fp,xtoa@fp
  2037  000A40  C044  F01D         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  2038  000A44  C055  F01E         	movff	vfpfcnvrt@llu,xtoa@d
  2039  000A48  C056  F01F         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  2040  000A4C  C057  F020         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  2041  000A50  C058  F021         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  2042  000A54  C059  F022         	movff	vfpfcnvrt@llu+4,xtoa@d+4
  2043  000A58  C05A  F023         	movff	vfpfcnvrt@llu+5,xtoa@d+5
  2044  000A5C  C05B  F024         	movff	vfpfcnvrt@llu+6,xtoa@d+6
  2045  000A60  C05C  F025         	movff	vfpfcnvrt@llu+7,xtoa@d+7
  2046  000A64  C05D  F026         	movff	vfpfcnvrt@c,xtoa@x
  2047  000A68  ECFF  F006         	call	_xtoa	;wreg free
  2048  000A6C  C01C  F043         	movff	?_xtoa,?_vfpfcnvrt
  2049  000A70  C01D  F044         	movff	?_xtoa+1,?_vfpfcnvrt+1
  2050  000A74  EF8D  F005         	goto	l255
  2051  000A78                     l1888:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  2055  000A78  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2056  000A7C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2057  000A80  CFDE FFF6          	movff	postinc2,tblptrl
  2058  000A84  CFDD FFF7          	movff	postdec2,tblptrh
  2059  000A88                     	if	0	;tblptru may be non-zero
  2060  000A88                     	endif
  2061  000A88                     	if	0	;tblptru may be non-zero
  2062  000A88                     	endif
  2063  000A88  0008               	tblrd		*
  2064  000A8A  50F5               	movf	tablat,w,c
  2065  000A8C  0A25               	xorlw	37
  2066  000A8E  A4D8               	btfss	status,2,c
  2067  000A90  EF4C  F005         	goto	u1561
  2068  000A94  EF4E  F005         	goto	u1560
  2069  000A98                     u1561:
  2070  000A98  EF65  F005         	goto	l1898
  2071  000A9C                     u1560:
  2072  000A9C                     
  2073                           ; BSR set to: 0
  2074                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  2075  000A9C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2076  000AA0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2077  000AA4  2ADE               	incf	postinc2,f,c
  2078  000AA6  0E00               	movlw	0
  2079  000AA8  22DD               	addwfc	postdec2,f,c
  2080  000AAA                     
  2081                           ; BSR set to: 0
  2082                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  2083  000AAA  0E00               	movlw	0
  2084  000AAC  6E02               	movwf	(fputc@c+1)^0,c
  2085  000AAE  0E25               	movlw	37
  2086  000AB0  6E01               	movwf	fputc@c^0,c
  2087  000AB2  C043  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2088  000AB6  C044  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2089  000ABA  ECE1  F009         	call	_fputc	;wreg free
  2090  000ABE                     l1894:
  2091                           
  2092                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  2093  000ABE  0E00               	movlw	0
  2094  000AC0  6E44               	movwf	(?_vfpfcnvrt+1)^0,c
  2095  000AC2  0E01               	movlw	1
  2096  000AC4  6E43               	movwf	?_vfpfcnvrt^0,c
  2097  000AC6  EF8D  F005         	goto	l255
  2098  000ACA                     l1898:
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  2102  000ACA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2103  000ACE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2104  000AD2  2ADE               	incf	postinc2,f,c
  2105  000AD4  0E00               	movlw	0
  2106  000AD6  22DD               	addwfc	postdec2,f,c
  2107  000AD8                     
  2108                           ; BSR set to: 0
  2109                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  2110  000AD8  0E00               	movlw	0
  2111  000ADA  6E44               	movwf	(?_vfpfcnvrt+1)^0,c
  2112  000ADC  0E00               	movlw	0
  2113  000ADE  6E43               	movwf	?_vfpfcnvrt^0,c
  2114  000AE0  EF8D  F005         	goto	l255
  2115  000AE4                     l1904:
  2116                           
  2117                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  2118  000AE4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2119  000AE8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2120  000AEC  CFDE FFF6          	movff	postinc2,tblptrl
  2121  000AF0  CFDD FFF7          	movff	postdec2,tblptrh
  2122  000AF4                     	if	0	;tblptru may be non-zero
  2123  000AF4                     	endif
  2124  000AF4                     	if	0	;tblptru may be non-zero
  2125  000AF4                     	endif
  2126  000AF4  0008               	tblrd		*
  2127  000AF6  50F5               	movf	tablat,w,c
  2128  000AF8  6E01               	movwf	fputc@c^0,c
  2129  000AFA  6A02               	clrf	(fputc@c+1)^0,c
  2130  000AFC  C043  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2131  000B00  C044  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2132  000B04  ECE1  F009         	call	_fputc	;wreg free
  2133  000B08                     
  2134                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  2135  000B08  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2136  000B0C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2137  000B10  2ADE               	incf	postinc2,f,c
  2138  000B12  0E00               	movlw	0
  2139  000B14  22DD               	addwfc	postdec2,f,c
  2140  000B16  EF5F  F005         	goto	l1894
  2141  000B1A                     l255:
  2142  000B1A  0012               	return		;funcret
  2143  000B1C                     __end_of_vfpfcnvrt:
  2144                           	opt callstack 0
  2145                           
  2146 ;; *************** function _xtoa *****************
  2147 ;; Defined at:
  2148 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2151 ;;		 -> sprintf@f(6), 
  2152 ;;  d               8   29[COMRAM] unsigned long long 
  2153 ;;  x               1   37[COMRAM] unsigned char 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  n               8   54[COMRAM] unsigned long long 
  2156 ;;  c               2   64[COMRAM] int 
  2157 ;;  i               2   62[COMRAM] int 
  2158 ;;  w               2   52[COMRAM] int 
  2159 ;;  p               2   50[COMRAM] int 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  2   27[COMRAM] int 
  2162 ;; Registers used:
  2163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2169 ;;      Params:        11       0       0       0       0       0       0       0       0
  2170 ;;      Locals:        20       0       0       0       0       0       0       0       0
  2171 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2172 ;;      Totals:        39       0       0       0       0       0       0       0       0
  2173 ;;Total ram usage:       39 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    4
  2176 ;; This function calls:
  2177 ;;		_isalpha
  2178 ;;		_isupper
  2179 ;;		_pad
  2180 ;;		_toupper
  2181 ;; This function is called by:
  2182 ;;		_vfpfcnvrt
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text14
  2187  000DFE                     __ptext14:
  2188                           	opt callstack 0
  2189  000DFE                     _xtoa:
  2190                           	opt callstack 22
  2191  000DFE                     
  2192                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
  2193  000DFE  0100               	movlb	0	; () banked
  2194  000E00  BF65               	btfsc	(_prec+1)& (0+255),7,b
  2195  000E02  EF05  F007         	goto	u1331
  2196  000E06  EF07  F007         	goto	u1330
  2197  000E0A                     u1331:
  2198  000E0A  EF08  F007         	goto	l1786
  2199  000E0E                     u1330:
  2200  000E0E                     
  2201                           ; BSR set to: 0
  2202                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
  2203  000E0E  9366               	bcf	_flags& (0+255),1,b
  2204  000E10                     l1786:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
  2208  000E10  BF65               	btfsc	(_prec+1)& (0+255),7,b
  2209  000E12  EF15  F007         	goto	u1340
  2210  000E16  5165               	movf	(_prec+1)& (0+255),w,b
  2211  000E18  E106               	bnz	u1341
  2212  000E1A  0564               	decf	_prec& (0+255),w,b
  2213  000E1C  B0D8               	btfsc	status,0,c
  2214  000E1E  EF13  F007         	goto	u1341
  2215  000E22  EF15  F007         	goto	u1340
  2216  000E26                     u1341:
  2217  000E26  EF1B  F007         	goto	l225
  2218  000E2A                     u1340:
  2219  000E2A                     
  2220                           ; BSR set to: 0
  2221  000E2A  0E00               	movlw	0
  2222  000E2C  6E34               	movwf	(xtoa@p+1)^0,c
  2223  000E2E  0E01               	movlw	1
  2224  000E30  6E33               	movwf	xtoa@p^0,c
  2225  000E32  EF1F  F007         	goto	l227
  2226  000E36                     l225:
  2227                           
  2228                           ; BSR set to: 0
  2229  000E36  C064  F033         	movff	_prec,xtoa@p
  2230  000E3A  C065  F034         	movff	_prec+1,xtoa@p+1
  2231  000E3E                     l227:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
  2235  000E3E  C062  F035         	movff	_width,xtoa@w
  2236  000E42  C063  F036         	movff	_width+1,xtoa@w+1
  2237                           
  2238                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
  2239  000E46  A966               	btfss	_flags& (0+255),4,b
  2240  000E48  EF28  F007         	goto	u1351
  2241  000E4C  EF2A  F007         	goto	u1350
  2242  000E50                     u1351:
  2243  000E50  EF2E  F007         	goto	l1792
  2244  000E54                     u1350:
  2245  000E54                     
  2246                           ; BSR set to: 0
  2247                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
  2248  000E54  0EFE               	movlw	254
  2249  000E56  2635               	addwf	xtoa@w^0,f,c
  2250  000E58  0EFF               	movlw	255
  2251  000E5A  2236               	addwfc	(xtoa@w+1)^0,f,c
  2252  000E5C                     l1792:
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
  2256  000E5C  C01E  F037         	movff	xtoa@d,xtoa@n
  2257  000E60  C01F  F038         	movff	xtoa@d+1,xtoa@n+1
  2258  000E64  C020  F039         	movff	xtoa@d+2,xtoa@n+2
  2259  000E68  C021  F03A         	movff	xtoa@d+3,xtoa@n+3
  2260  000E6C  C022  F03B         	movff	xtoa@d+4,xtoa@n+4
  2261  000E70  C023  F03C         	movff	xtoa@d+5,xtoa@n+5
  2262  000E74  C024  F03D         	movff	xtoa@d+6,xtoa@n+6
  2263  000E78  C025  F03E         	movff	xtoa@d+7,xtoa@n+7
  2264  000E7C                     
  2265                           ; BSR set to: 0
  2266                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
  2267  000E7C  0E00               	movlw	0
  2268  000E7E  6E40               	movwf	(xtoa@i+1)^0,c
  2269  000E80  0E1F               	movlw	31
  2270  000E82  6E3F               	movwf	xtoa@i^0,c
  2271  000E84                     
  2272                           ; BSR set to: 0
  2273                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
  2274  000E84  0E00               	movlw	0
  2275  000E86  6F89               	movwf	(_dbuf+31)& (0+255),b
  2276                           
  2277                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2278  000E88  EFF9  F007         	goto	l1828
  2279  000E8C                     l1798:
  2280                           
  2281                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
  2282  000E8C  063F               	decf	xtoa@i^0,f,c
  2283  000E8E  A0D8               	btfss	status,0,c
  2284  000E90  0640               	decf	(xtoa@i+1)^0,f,c
  2285  000E92                     
  2286                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
  2287  000E92  0E0F               	movlw	15
  2288  000E94  1437               	andwf	xtoa@n^0,w,c
  2289  000E96  6E41               	movwf	xtoa@c^0,c
  2290  000E98  6A42               	clrf	(xtoa@c+1)^0,c
  2291  000E9A                     
  2292                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
  2293  000E9A  BE42               	btfsc	(xtoa@c+1)^0,7,c
  2294  000E9C  EF59  F007         	goto	u1361
  2295  000EA0  5042               	movf	(xtoa@c+1)^0,w,c
  2296  000EA2  E109               	bnz	u1360
  2297  000EA4  0E0A               	movlw	10
  2298  000EA6  5C41               	subwf	xtoa@c^0,w,c
  2299  000EA8  A0D8               	btfss	status,0,c
  2300  000EAA  EF59  F007         	goto	u1361
  2301  000EAE  EF5B  F007         	goto	u1360
  2302  000EB2                     u1361:
  2303  000EB2  EF63  F007         	goto	l1806
  2304  000EB6                     u1360:
  2305  000EB6  0E57               	movlw	87
  2306  000EB8  2441               	addwf	xtoa@c^0,w,c
  2307  000EBA  6E41               	movwf	xtoa@c^0,c
  2308  000EBC  0E00               	movlw	0
  2309  000EBE  2042               	addwfc	(xtoa@c+1)^0,w,c
  2310  000EC0  6E42               	movwf	(xtoa@c+1)^0,c
  2311  000EC2  EF69  F007         	goto	l234
  2312  000EC6                     l1806:
  2313  000EC6  0E30               	movlw	48
  2314  000EC8  2441               	addwf	xtoa@c^0,w,c
  2315  000ECA  6E41               	movwf	xtoa@c^0,c
  2316  000ECC  0E00               	movlw	0
  2317  000ECE  2042               	addwfc	(xtoa@c+1)^0,w,c
  2318  000ED0  6E42               	movwf	(xtoa@c+1)^0,c
  2319  000ED2                     l234:
  2320  000ED2  0EBF               	movlw	191
  2321  000ED4  6E27               	movwf	??_xtoa^0,c
  2322  000ED6  0EFF               	movlw	255
  2323  000ED8  6E28               	movwf	(??_xtoa+1)^0,c
  2324  000EDA  5026               	movf	xtoa@x^0,w,c
  2325  000EDC  6E29               	movwf	(??_xtoa+2)^0,c
  2326  000EDE  6A2A               	clrf	(??_xtoa+3)^0,c
  2327  000EE0  5027               	movf	??_xtoa^0,w,c
  2328  000EE2  2629               	addwf	(??_xtoa+2)^0,f,c
  2329  000EE4  5028               	movf	(??_xtoa+1)^0,w,c
  2330  000EE6  222A               	addwfc	(??_xtoa+3)^0,f,c
  2331  000EE8  502A               	movf	(??_xtoa+3)^0,w,c
  2332  000EEA  E10A               	bnz	u1370
  2333  000EEC  0E1A               	movlw	26
  2334  000EEE  5C29               	subwf	(??_xtoa+2)^0,w,c
  2335  000EF0  A0D8               	btfss	status,0,c
  2336  000EF2  EF7D  F007         	goto	u1371
  2337  000EF6  EF80  F007         	goto	u1370
  2338  000EFA                     u1371:
  2339  000EFA  0E01               	movlw	1
  2340  000EFC  EF81  F007         	goto	u1380
  2341  000F00                     u1370:
  2342  000F00  0E00               	movlw	0
  2343  000F02                     u1380:
  2344  000F02  6E2F               	movwf	_xtoa$286^0,c
  2345  000F04  6A30               	clrf	(_xtoa$286+1)^0,c
  2346  000F06  502F               	movf	_xtoa$286^0,w,c
  2347  000F08  1030               	iorwf	(_xtoa$286+1)^0,w,c
  2348  000F0A  B4D8               	btfsc	status,2,c
  2349  000F0C  EF8A  F007         	goto	u1391
  2350  000F10  EF8C  F007         	goto	u1390
  2351  000F14                     u1391:
  2352  000F14  EFBC  F007         	goto	l1820
  2353  000F18                     u1390:
  2354  000F18  0E9F               	movlw	159
  2355  000F1A  6E27               	movwf	??_xtoa^0,c
  2356  000F1C  0EFF               	movlw	255
  2357  000F1E  6E28               	movwf	(??_xtoa+1)^0,c
  2358  000F20  0E20               	movlw	32
  2359  000F22  1041               	iorwf	xtoa@c^0,w,c
  2360  000F24  6E29               	movwf	(??_xtoa+2)^0,c
  2361  000F26  0E00               	movlw	0
  2362  000F28  1042               	iorwf	(xtoa@c+1)^0,w,c
  2363  000F2A  6E2A               	movwf	(??_xtoa+3)^0,c
  2364  000F2C  5027               	movf	??_xtoa^0,w,c
  2365  000F2E  2629               	addwf	(??_xtoa+2)^0,f,c
  2366  000F30  5028               	movf	(??_xtoa+1)^0,w,c
  2367  000F32  222A               	addwfc	(??_xtoa+3)^0,f,c
  2368  000F34  502A               	movf	(??_xtoa+3)^0,w,c
  2369  000F36  E10A               	bnz	u1400
  2370  000F38  0E1A               	movlw	26
  2371  000F3A  5C29               	subwf	(??_xtoa+2)^0,w,c
  2372  000F3C  A0D8               	btfss	status,0,c
  2373  000F3E  EFA3  F007         	goto	u1401
  2374  000F42  EFA6  F007         	goto	u1400
  2375  000F46                     u1401:
  2376  000F46  0E01               	movlw	1
  2377  000F48  EFA7  F007         	goto	u1410
  2378  000F4C                     u1400:
  2379  000F4C  0E00               	movlw	0
  2380  000F4E                     u1410:
  2381  000F4E  6E31               	movwf	_xtoa$287^0,c
  2382  000F50  6A32               	clrf	(_xtoa$287+1)^0,c
  2383  000F52  5031               	movf	_xtoa$287^0,w,c
  2384  000F54  1032               	iorwf	(_xtoa$287+1)^0,w,c
  2385  000F56  B4D8               	btfsc	status,2,c
  2386  000F58  EFB0  F007         	goto	u1421
  2387  000F5C  EFB2  F007         	goto	u1420
  2388  000F60                     u1421:
  2389  000F60  EFBC  F007         	goto	l1820
  2390  000F64                     u1420:
  2391  000F64                     
  2392                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
  2393  000F64  C041  F007         	movff	xtoa@c,toupper@c
  2394  000F68  C042  F008         	movff	xtoa@c+1,toupper@c+1
  2395  000F6C  ECE3  F00B         	call	_toupper	;wreg free
  2396  000F70  C007  F041         	movff	?_toupper,xtoa@c
  2397  000F74  C008  F042         	movff	?_toupper+1,xtoa@c+1
  2398  000F78                     l1820:
  2399                           
  2400                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
  2401  000F78  0E6A               	movlw	low _dbuf
  2402  000F7A  243F               	addwf	xtoa@i^0,w,c
  2403  000F7C  6ED9               	movwf	fsr2l,c
  2404  000F7E  0E00               	movlw	high _dbuf
  2405  000F80  2040               	addwfc	(xtoa@i+1)^0,w,c
  2406  000F82  6EDA               	movwf	fsr2h,c
  2407  000F84  C041  FFDF         	movff	xtoa@c,indf2
  2408  000F88                     
  2409                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
  2410  000F88  0633               	decf	xtoa@p^0,f,c
  2411  000F8A  A0D8               	btfss	status,0,c
  2412  000F8C  0634               	decf	(xtoa@p+1)^0,f,c
  2413  000F8E                     
  2414                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
  2415  000F8E  0635               	decf	xtoa@w^0,f,c
  2416  000F90  A0D8               	btfss	status,0,c
  2417  000F92  0636               	decf	(xtoa@w+1)^0,f,c
  2418  000F94                     
  2419                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
  2420  000F94  C037  F027         	movff	xtoa@n,??_xtoa
  2421  000F98  C038  F028         	movff	xtoa@n+1,??_xtoa+1
  2422  000F9C  C039  F029         	movff	xtoa@n+2,??_xtoa+2
  2423  000FA0  C03A  F02A         	movff	xtoa@n+3,??_xtoa+3
  2424  000FA4  C03B  F02B         	movff	xtoa@n+4,??_xtoa+4
  2425  000FA8  C03C  F02C         	movff	xtoa@n+5,??_xtoa+5
  2426  000FAC  C03D  F02D         	movff	xtoa@n+6,??_xtoa+6
  2427  000FB0  C03E  F02E         	movff	xtoa@n+7,??_xtoa+7
  2428  000FB4  0E05               	movlw	5
  2429  000FB6  EFE6  F007         	goto	u1430
  2430  000FBA                     u1435:
  2431  000FBA  90D8               	bcf	status,0,c
  2432  000FBC  322E               	rrcf	(??_xtoa+7)^0,f,c
  2433  000FBE  322D               	rrcf	(??_xtoa+6)^0,f,c
  2434  000FC0  322C               	rrcf	(??_xtoa+5)^0,f,c
  2435  000FC2  322B               	rrcf	(??_xtoa+4)^0,f,c
  2436  000FC4  322A               	rrcf	(??_xtoa+3)^0,f,c
  2437  000FC6  3229               	rrcf	(??_xtoa+2)^0,f,c
  2438  000FC8  3228               	rrcf	(??_xtoa+1)^0,f,c
  2439  000FCA  3227               	rrcf	??_xtoa^0,f,c
  2440  000FCC                     u1430:
  2441  000FCC  2EE8               	decfsz	wreg,f,c
  2442  000FCE  EFDD  F007         	goto	u1435
  2443  000FD2  C027  F037         	movff	??_xtoa,xtoa@n
  2444  000FD6  C028  F038         	movff	??_xtoa+1,xtoa@n+1
  2445  000FDA  C029  F039         	movff	??_xtoa+2,xtoa@n+2
  2446  000FDE  C02A  F03A         	movff	??_xtoa+3,xtoa@n+3
  2447  000FE2  C02B  F03B         	movff	??_xtoa+4,xtoa@n+4
  2448  000FE6  C02C  F03C         	movff	??_xtoa+5,xtoa@n+5
  2449  000FEA  C02D  F03D         	movff	??_xtoa+6,xtoa@n+6
  2450  000FEE  C02E  F03E         	movff	??_xtoa+7,xtoa@n+7
  2451  000FF2                     l1828:
  2452                           
  2453                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2454  000FF2  BE40               	btfsc	(xtoa@i+1)^0,7,c
  2455  000FF4  EF05  F008         	goto	u1441
  2456  000FF8  5040               	movf	(xtoa@i+1)^0,w,c
  2457  000FFA  E109               	bnz	u1440
  2458  000FFC  0E02               	movlw	2
  2459  000FFE  5C3F               	subwf	xtoa@i^0,w,c
  2460  001000  A0D8               	btfss	status,0,c
  2461  001002  EF05  F008         	goto	u1441
  2462  001006  EF07  F008         	goto	u1440
  2463  00100A                     u1441:
  2464  00100A  EF38  F008         	goto	l248
  2465  00100E                     u1440:
  2466  00100E  5037               	movf	xtoa@n^0,w,c
  2467  001010  1038               	iorwf	(xtoa@n+1)^0,w,c
  2468  001012  1039               	iorwf	(xtoa@n+2)^0,w,c
  2469  001014  103A               	iorwf	(xtoa@n+3)^0,w,c
  2470  001016  103B               	iorwf	(xtoa@n+4)^0,w,c
  2471  001018  103C               	iorwf	(xtoa@n+5)^0,w,c
  2472  00101A  103D               	iorwf	(xtoa@n+6)^0,w,c
  2473  00101C  103E               	iorwf	(xtoa@n+7)^0,w,c
  2474  00101E  A4D8               	btfss	status,2,c
  2475  001020  EF14  F008         	goto	u1451
  2476  001024  EF16  F008         	goto	u1450
  2477  001028                     u1451:
  2478  001028  EF46  F007         	goto	l1798
  2479  00102C                     u1450:
  2480  00102C  BE34               	btfsc	(xtoa@p+1)^0,7,c
  2481  00102E  EF23  F008         	goto	u1460
  2482  001032  5034               	movf	(xtoa@p+1)^0,w,c
  2483  001034  E106               	bnz	u1461
  2484  001036  0433               	decf	xtoa@p^0,w,c
  2485  001038  B0D8               	btfsc	status,0,c
  2486  00103A  EF21  F008         	goto	u1461
  2487  00103E  EF23  F008         	goto	u1460
  2488  001042                     u1461:
  2489  001042  EF46  F007         	goto	l1798
  2490  001046                     u1460:
  2491  001046  BE36               	btfsc	(xtoa@w+1)^0,7,c
  2492  001048  EF2E  F008         	goto	u1471
  2493  00104C  5036               	movf	(xtoa@w+1)^0,w,c
  2494  00104E  E108               	bnz	u1470
  2495  001050  0435               	decf	xtoa@w^0,w,c
  2496  001052  A0D8               	btfss	status,0,c
  2497  001054  EF2E  F008         	goto	u1471
  2498  001058  EF30  F008         	goto	u1470
  2499  00105C                     u1471:
  2500  00105C  EF38  F008         	goto	l248
  2501  001060                     u1470:
  2502  001060  0100               	movlb	0	; () banked
  2503  001062  B366               	btfsc	_flags& (0+255),1,b
  2504  001064  EF36  F008         	goto	u1481
  2505  001068  EF38  F008         	goto	u1480
  2506  00106C                     u1481:
  2507  00106C  EF46  F007         	goto	l1798
  2508  001070                     u1480:
  2509  001070                     l248:
  2510                           
  2511                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
  2512  001070  0100               	movlb	0	; () banked
  2513  001072  A966               	btfss	_flags& (0+255),4,b
  2514  001074  EF3E  F008         	goto	u1491
  2515  001078  EF40  F008         	goto	u1490
  2516  00107C                     u1491:
  2517  00107C  EF56  F008         	goto	l1844
  2518  001080                     u1490:
  2519  001080                     
  2520                           ; BSR set to: 0
  2521                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
  2522  001080  063F               	decf	xtoa@i^0,f,c
  2523  001082  A0D8               	btfss	status,0,c
  2524  001084  0640               	decf	(xtoa@i+1)^0,f,c
  2525  001086                     
  2526                           ; BSR set to: 0
  2527                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
  2528  001086  0E6A               	movlw	low _dbuf
  2529  001088  243F               	addwf	xtoa@i^0,w,c
  2530  00108A  6ED9               	movwf	fsr2l,c
  2531  00108C  0E00               	movlw	high _dbuf
  2532  00108E  2040               	addwfc	(xtoa@i+1)^0,w,c
  2533  001090  6EDA               	movwf	fsr2h,c
  2534  001092  C026  FFDF         	movff	xtoa@x,indf2
  2535  001096                     
  2536                           ; BSR set to: 0
  2537                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
  2538  001096  063F               	decf	xtoa@i^0,f,c
  2539  001098  A0D8               	btfss	status,0,c
  2540  00109A  0640               	decf	(xtoa@i+1)^0,f,c
  2541                           
  2542                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
  2543  00109C  0E6A               	movlw	low _dbuf
  2544  00109E  243F               	addwf	xtoa@i^0,w,c
  2545  0010A0  6ED9               	movwf	fsr2l,c
  2546  0010A2  0E00               	movlw	high _dbuf
  2547  0010A4  2040               	addwfc	(xtoa@i+1)^0,w,c
  2548  0010A6  6EDA               	movwf	fsr2h,c
  2549  0010A8  0E30               	movlw	48
  2550  0010AA  6EDF               	movwf	indf2,c
  2551  0010AC                     l1844:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
  2555  0010AC  C01C  F011         	movff	xtoa@fp,pad@fp
  2556  0010B0  C01D  F012         	movff	xtoa@fp+1,pad@fp+1
  2557  0010B4  0E6A               	movlw	low _dbuf
  2558  0010B6  243F               	addwf	xtoa@i^0,w,c
  2559  0010B8  6E13               	movwf	pad@buf^0,c
  2560  0010BA  0E00               	movlw	high _dbuf
  2561  0010BC  2040               	addwfc	(xtoa@i+1)^0,w,c
  2562  0010BE  6E14               	movwf	(pad@buf+1)^0,c
  2563  0010C0  C035  F015         	movff	xtoa@w,pad@p
  2564  0010C4  C036  F016         	movff	xtoa@w+1,pad@p+1
  2565  0010C8  EC46  F00A         	call	_pad	;wreg free
  2566  0010CC  C011  F01C         	movff	?_pad,?_xtoa
  2567  0010D0  C012  F01D         	movff	?_pad+1,?_xtoa+1
  2568  0010D4  0012               	return		;funcret
  2569  0010D6                     __end_of_xtoa:
  2570                           	opt callstack 0
  2571                           
  2572 ;; *************** function _toupper *****************
  2573 ;; Defined at:
  2574 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\toupper.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  c               2    6[COMRAM] int 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  2    6[COMRAM] int 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2588 ;;      Params:         2       0       0       0       0       0       0       0       0
  2589 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2590 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2591 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2592 ;;Total ram usage:        8 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    1
  2595 ;; This function calls:
  2596 ;;		_islower
  2597 ;; This function is called by:
  2598 ;;		_xtoa
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text15
  2603  0017C6                     __ptext15:
  2604                           	opt callstack 0
  2605  0017C6                     _toupper:
  2606                           	opt callstack 24
  2607  0017C6  0E9F               	movlw	159
  2608  0017C8  6E09               	movwf	??_toupper^0,c
  2609  0017CA  0EFF               	movlw	255
  2610  0017CC  6E0A               	movwf	(??_toupper+1)^0,c
  2611  0017CE  C007  F00B         	movff	toupper@c,??_toupper+2
  2612  0017D2  C008  F00C         	movff	toupper@c+1,??_toupper+3
  2613  0017D6  5009               	movf	??_toupper^0,w,c
  2614  0017D8  260B               	addwf	(??_toupper+2)^0,f,c
  2615  0017DA  500A               	movf	(??_toupper+1)^0,w,c
  2616  0017DC  220C               	addwfc	(??_toupper+3)^0,f,c
  2617  0017DE  500C               	movf	(??_toupper+3)^0,w,c
  2618  0017E0  E10A               	bnz	u1010
  2619  0017E2  0E1A               	movlw	26
  2620  0017E4  5C0B               	subwf	(??_toupper+2)^0,w,c
  2621  0017E6  A0D8               	btfss	status,0,c
  2622  0017E8  EFF8  F00B         	goto	u1011
  2623  0017EC  EFFB  F00B         	goto	u1010
  2624  0017F0                     u1011:
  2625  0017F0  0E01               	movlw	1
  2626  0017F2  EFFC  F00B         	goto	u1020
  2627  0017F6                     u1010:
  2628  0017F6  0E00               	movlw	0
  2629  0017F8                     u1020:
  2630  0017F8  6E0D               	movwf	_toupper$830^0,c
  2631  0017FA  6A0E               	clrf	(_toupper$830+1)^0,c
  2632  0017FC  500D               	movf	_toupper$830^0,w,c
  2633  0017FE  100E               	iorwf	(_toupper$830+1)^0,w,c
  2634  001800  B4D8               	btfsc	status,2,c
  2635  001802  EF05  F00C         	goto	u1031
  2636  001806  EF07  F00C         	goto	u1030
  2637  00180A                     u1031:
  2638  00180A  EF0D  F00C         	goto	l1002
  2639  00180E                     u1030:
  2640  00180E  0E5F               	movlw	95
  2641  001810  1407               	andwf	toupper@c^0,w,c
  2642  001812  6E07               	movwf	?_toupper^0,c
  2643  001814  6A08               	clrf	(?_toupper+1)^0,c
  2644  001816  EF11  F00C         	goto	l1007
  2645  00181A                     l1002:
  2646  00181A  C007  F007         	movff	toupper@c,?_toupper
  2647  00181E  C008  F008         	movff	toupper@c+1,?_toupper+1
  2648  001822                     l1007:
  2649  001822  0012               	return		;funcret
  2650  001824                     __end_of_toupper:
  2651                           	opt callstack 0
  2652                           
  2653 ;; *************** function _islower *****************
  2654 ;; Defined at:
  2655 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\islower.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  c               2    0[COMRAM] int 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  2    0[COMRAM] int 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         2       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2671 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        6 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_toupper
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text16
  2683  001AA4                     __ptext16:
  2684                           	opt callstack 0
  2685  001AA4                     _islower:
  2686                           	opt callstack 24
  2687  001AA4  0E9F               	movlw	159
  2688  001AA6  6E03               	movwf	??_islower^0,c
  2689  001AA8  0EFF               	movlw	255
  2690  001AAA  6E04               	movwf	(??_islower+1)^0,c
  2691  001AAC  C001  F005         	movff	islower@c,??_islower+2
  2692  001AB0  C002  F006         	movff	islower@c+1,??_islower+3
  2693  001AB4  5003               	movf	??_islower^0,w,c
  2694  001AB6  2605               	addwf	(??_islower+2)^0,f,c
  2695  001AB8  5004               	movf	(??_islower+1)^0,w,c
  2696  001ABA  2206               	addwfc	(??_islower+3)^0,f,c
  2697  001ABC  5006               	movf	(??_islower+3)^0,w,c
  2698  001ABE  E10A               	bnz	u900
  2699  001AC0  0E1A               	movlw	26
  2700  001AC2  5C05               	subwf	(??_islower+2)^0,w,c
  2701  001AC4  A0D8               	btfss	status,0,c
  2702  001AC6  EF67  F00D         	goto	u901
  2703  001ACA  EF6A  F00D         	goto	u900
  2704  001ACE                     u901:
  2705  001ACE  0E01               	movlw	1
  2706  001AD0  EF6B  F00D         	goto	u910
  2707  001AD4                     u900:
  2708  001AD4  0E00               	movlw	0
  2709  001AD6                     u910:
  2710  001AD6  6E01               	movwf	?_islower^0,c
  2711  001AD8  6A02               	clrf	(?_islower+1)^0,c
  2712  001ADA  0012               	return		;funcret
  2713  001ADC                     __end_of_islower:
  2714                           	opt callstack 0
  2715                           
  2716 ;; *************** function _isupper *****************
  2717 ;; Defined at:
  2718 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isupper.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  c               2    0[COMRAM] int 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  2    0[COMRAM] int 
  2725 ;; Registers used:
  2726 ;;		wreg, status,2, status,0
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2732 ;;      Params:         2       0       0       0       0       0       0       0       0
  2733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2734 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2735 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2736 ;;Total ram usage:        6 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_xtoa
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text17
  2746  001ADC                     __ptext17:
  2747                           	opt callstack 0
  2748  001ADC                     _isupper:
  2749                           	opt callstack 25
  2750  001ADC  0EBF               	movlw	191
  2751  001ADE  6E03               	movwf	??_isupper^0,c
  2752  001AE0  0EFF               	movlw	255
  2753  001AE2  6E04               	movwf	(??_isupper+1)^0,c
  2754  001AE4  C001  F005         	movff	isupper@c,??_isupper+2
  2755  001AE8  C002  F006         	movff	isupper@c+1,??_isupper+3
  2756  001AEC  5003               	movf	??_isupper^0,w,c
  2757  001AEE  2605               	addwf	(??_isupper+2)^0,f,c
  2758  001AF0  5004               	movf	(??_isupper+1)^0,w,c
  2759  001AF2  2206               	addwfc	(??_isupper+3)^0,f,c
  2760  001AF4  5006               	movf	(??_isupper+3)^0,w,c
  2761  001AF6  E10A               	bnz	u970
  2762  001AF8  0E1A               	movlw	26
  2763  001AFA  5C05               	subwf	(??_isupper+2)^0,w,c
  2764  001AFC  A0D8               	btfss	status,0,c
  2765  001AFE  EF83  F00D         	goto	u971
  2766  001B02  EF86  F00D         	goto	u970
  2767  001B06                     u971:
  2768  001B06  0E01               	movlw	1
  2769  001B08  EF87  F00D         	goto	u980
  2770  001B0C                     u970:
  2771  001B0C  0E00               	movlw	0
  2772  001B0E                     u980:
  2773  001B0E  6E01               	movwf	?_isupper^0,c
  2774  001B10  6A02               	clrf	(?_isupper+1)^0,c
  2775  001B12  0012               	return		;funcret
  2776  001B14                     __end_of_isupper:
  2777                           	opt callstack 0
  2778                           
  2779 ;; *************** function _isalpha *****************
  2780 ;; Defined at:
  2781 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isalpha.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  c               2    0[COMRAM] int 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  2    0[COMRAM] int 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2795 ;;      Params:         2       0       0       0       0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2797 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2798 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2799 ;;Total ram usage:        6 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_xtoa
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text18
  2809  0019F2                     __ptext18:
  2810                           	opt callstack 0
  2811  0019F2                     _isalpha:
  2812                           	opt callstack 25
  2813  0019F2  0E9F               	movlw	159
  2814  0019F4  6E03               	movwf	??_isalpha^0,c
  2815  0019F6  0EFF               	movlw	255
  2816  0019F8  6E04               	movwf	(??_isalpha+1)^0,c
  2817  0019FA  0E20               	movlw	32
  2818  0019FC  1001               	iorwf	isalpha@c^0,w,c
  2819  0019FE  6E05               	movwf	(??_isalpha+2)^0,c
  2820  001A00  0E00               	movlw	0
  2821  001A02  1002               	iorwf	(isalpha@c+1)^0,w,c
  2822  001A04  6E06               	movwf	(??_isalpha+3)^0,c
  2823  001A06  5003               	movf	??_isalpha^0,w,c
  2824  001A08  2605               	addwf	(??_isalpha+2)^0,f,c
  2825  001A0A  5004               	movf	(??_isalpha+1)^0,w,c
  2826  001A0C  2206               	addwfc	(??_isalpha+3)^0,f,c
  2827  001A0E  5006               	movf	(??_isalpha+3)^0,w,c
  2828  001A10  E10A               	bnz	u990
  2829  001A12  0E1A               	movlw	26
  2830  001A14  5C05               	subwf	(??_isalpha+2)^0,w,c
  2831  001A16  A0D8               	btfss	status,0,c
  2832  001A18  EF10  F00D         	goto	u991
  2833  001A1C  EF13  F00D         	goto	u990
  2834  001A20                     u991:
  2835  001A20  0E01               	movlw	1
  2836  001A22  EF14  F00D         	goto	u1000
  2837  001A26                     u990:
  2838  001A26  0E00               	movlw	0
  2839  001A28                     u1000:
  2840  001A28  6E01               	movwf	?_isalpha^0,c
  2841  001A2A  6A02               	clrf	(?_isalpha+1)^0,c
  2842  001A2C  0012               	return		;funcret
  2843  001A2E                     __end_of_isalpha:
  2844                           	opt callstack 0
  2845                           
  2846 ;; *************** function _dtoa *****************
  2847 ;; Defined at:
  2848 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2851 ;;		 -> sprintf@f(6), 
  2852 ;;  d               8   29[COMRAM] long long 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  n               8   53[COMRAM] long long 
  2855 ;;  i               2   61[COMRAM] int 
  2856 ;;  s               2   51[COMRAM] int 
  2857 ;;  w               2   49[COMRAM] int 
  2858 ;;  p               2   47[COMRAM] int 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  2   27[COMRAM] int 
  2861 ;; Registers used:
  2862 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2868 ;;      Params:        10       0       0       0       0       0       0       0       0
  2869 ;;      Locals:        18       0       0       0       0       0       0       0       0
  2870 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2871 ;;      Totals:        36       0       0       0       0       0       0       0       0
  2872 ;;Total ram usage:       36 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    4
  2875 ;; This function calls:
  2876 ;;		___aodiv
  2877 ;;		___aomod
  2878 ;;		_abs
  2879 ;;		_pad
  2880 ;; This function is called by:
  2881 ;;		_vfpfcnvrt
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text19
  2886  000B1C                     __ptext19:
  2887                           	opt callstack 0
  2888  000B1C                     _dtoa:
  2889                           	opt callstack 22
  2890  000B1C                     
  2891                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  2892  000B1C  C01E  F036         	movff	dtoa@d,dtoa@n
  2893  000B20  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  2894  000B24  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  2895  000B28  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  2896  000B2C  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  2897  000B30  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  2898  000B34  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  2899  000B38  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  2900  000B3C                     
  2901                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  2902  000B3C  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  2903  000B3E  EFA3  F005         	goto	u1181
  2904  000B42  EFA6  F005         	goto	u1180
  2905  000B46                     u1181:
  2906  000B46  0E01               	movlw	1
  2907  000B48  EFA7  F005         	goto	u1190
  2908  000B4C                     u1180:
  2909  000B4C  0E00               	movlw	0
  2910  000B4E                     u1190:
  2911  000B4E  6E34               	movwf	dtoa@s^0,c
  2912  000B50  6A35               	clrf	(dtoa@s+1)^0,c
  2913                           
  2914                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  2915  000B52  5034               	movf	dtoa@s^0,w,c
  2916  000B54  1035               	iorwf	(dtoa@s+1)^0,w,c
  2917  000B56  B4D8               	btfsc	status,2,c
  2918  000B58  EFB0  F005         	goto	u1201
  2919  000B5C  EFB2  F005         	goto	u1200
  2920  000B60                     u1201:
  2921  000B60  EFC2  F005         	goto	l1726
  2922  000B64                     u1200:
  2923  000B64                     
  2924                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  2925  000B64  1E3D               	comf	(dtoa@n+7)^0,f,c
  2926  000B66  1E3C               	comf	(dtoa@n+6)^0,f,c
  2927  000B68  1E3B               	comf	(dtoa@n+5)^0,f,c
  2928  000B6A  1E3A               	comf	(dtoa@n+4)^0,f,c
  2929  000B6C  1E39               	comf	(dtoa@n+3)^0,f,c
  2930  000B6E  1E38               	comf	(dtoa@n+2)^0,f,c
  2931  000B70  1E37               	comf	(dtoa@n+1)^0,f,c
  2932  000B72  6C36               	negf	dtoa@n^0,c
  2933  000B74  0E00               	movlw	0
  2934  000B76  2237               	addwfc	(dtoa@n+1)^0,f,c
  2935  000B78  2238               	addwfc	(dtoa@n+2)^0,f,c
  2936  000B7A  2239               	addwfc	(dtoa@n+3)^0,f,c
  2937  000B7C  223A               	addwfc	(dtoa@n+4)^0,f,c
  2938  000B7E  223B               	addwfc	(dtoa@n+5)^0,f,c
  2939  000B80  223C               	addwfc	(dtoa@n+6)^0,f,c
  2940  000B82  223D               	addwfc	(dtoa@n+7)^0,f,c
  2941  000B84                     l1726:
  2942                           
  2943                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  2944  000B84  0100               	movlb	0	; () banked
  2945  000B86  BF65               	btfsc	(_prec+1)& (0+255),7,b
  2946  000B88  EFC8  F005         	goto	u1211
  2947  000B8C  EFCA  F005         	goto	u1210
  2948  000B90                     u1211:
  2949  000B90  EFCB  F005         	goto	l1730
  2950  000B94                     u1210:
  2951  000B94                     
  2952                           ; BSR set to: 0
  2953                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  2954  000B94  9366               	bcf	_flags& (0+255),1,b
  2955  000B96                     l1730:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  2959  000B96  BF65               	btfsc	(_prec+1)& (0+255),7,b
  2960  000B98  EFD8  F005         	goto	u1220
  2961  000B9C  5165               	movf	(_prec+1)& (0+255),w,b
  2962  000B9E  E106               	bnz	u1221
  2963  000BA0  0564               	decf	_prec& (0+255),w,b
  2964  000BA2  B0D8               	btfsc	status,0,c
  2965  000BA4  EFD6  F005         	goto	u1221
  2966  000BA8  EFD8  F005         	goto	u1220
  2967  000BAC                     u1221:
  2968  000BAC  EFDE  F005         	goto	l200
  2969  000BB0                     u1220:
  2970  000BB0                     
  2971                           ; BSR set to: 0
  2972  000BB0  0E00               	movlw	0
  2973  000BB2  6E31               	movwf	(dtoa@p+1)^0,c
  2974  000BB4  0E01               	movlw	1
  2975  000BB6  6E30               	movwf	dtoa@p^0,c
  2976  000BB8  EFE2  F005         	goto	l202
  2977  000BBC                     l200:
  2978                           
  2979                           ; BSR set to: 0
  2980  000BBC  C064  F030         	movff	_prec,dtoa@p
  2981  000BC0  C065  F031         	movff	_prec+1,dtoa@p+1
  2982  000BC4                     l202:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  2986  000BC4  C062  F032         	movff	_width,dtoa@w
  2987  000BC8  C063  F033         	movff	_width+1,dtoa@w+1
  2988  000BCC                     
  2989                           ; BSR set to: 0
  2990                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  2991  000BCC  5034               	movf	dtoa@s^0,w,c
  2992  000BCE  1035               	iorwf	(dtoa@s+1)^0,w,c
  2993  000BD0  A4D8               	btfss	status,2,c
  2994  000BD2  EFED  F005         	goto	u1231
  2995  000BD6  EFEF  F005         	goto	u1230
  2996  000BDA                     u1231:
  2997  000BDA  EFF6  F005         	goto	l1738
  2998  000BDE                     u1230:
  2999  000BDE                     
  3000                           ; BSR set to: 0
  3001  000BDE  A566               	btfss	_flags& (0+255),2,b
  3002  000BE0  EFF4  F005         	goto	u1241
  3003  000BE4  EFF6  F005         	goto	u1240
  3004  000BE8                     u1241:
  3005  000BE8  EFF9  F005         	goto	l1740
  3006  000BEC                     u1240:
  3007  000BEC                     l1738:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  3011  000BEC  0632               	decf	dtoa@w^0,f,c
  3012  000BEE  A0D8               	btfss	status,0,c
  3013  000BF0  0633               	decf	(dtoa@w+1)^0,f,c
  3014  000BF2                     l1740:
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  3018  000BF2  0E00               	movlw	0
  3019  000BF4  6E3F               	movwf	(dtoa@i+1)^0,c
  3020  000BF6  0E1F               	movlw	31
  3021  000BF8  6E3E               	movwf	dtoa@i^0,c
  3022  000BFA                     
  3023                           ; BSR set to: 0
  3024                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  3025  000BFA  0E00               	movlw	0
  3026  000BFC  6F89               	movwf	(_dbuf+31)& (0+255),b
  3027                           
  3028                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3029  000BFE  EF7D  F006         	goto	l1754
  3030  000C02                     l1744:
  3031                           
  3032                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  3033  000C02  063E               	decf	dtoa@i^0,f,c
  3034  000C04  A0D8               	btfss	status,0,c
  3035  000C06  063F               	decf	(dtoa@i+1)^0,f,c
  3036  000C08                     
  3037                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  3038  000C08  0E6A               	movlw	low _dbuf
  3039  000C0A  243E               	addwf	dtoa@i^0,w,c
  3040  000C0C  6ED9               	movwf	fsr2l,c
  3041  000C0E  0E00               	movlw	high _dbuf
  3042  000C10  203F               	addwfc	(dtoa@i+1)^0,w,c
  3043  000C12  6EDA               	movwf	fsr2h,c
  3044  000C14  C036  F001         	movff	dtoa@n,___aomod@dividend
  3045  000C18  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  3046  000C1C  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  3047  000C20  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  3048  000C24  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  3049  000C28  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  3050  000C2C  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  3051  000C30  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  3052  000C34  0E0A               	movlw	10
  3053  000C36  6E09               	movwf	___aomod@divisor^0,c
  3054  000C38  0E00               	movlw	0
  3055  000C3A  6E0A               	movwf	(___aomod@divisor+1)^0,c
  3056  000C3C  0E00               	movlw	0
  3057  000C3E  6E0B               	movwf	(___aomod@divisor+2)^0,c
  3058  000C40  0E00               	movlw	0
  3059  000C42  6E0C               	movwf	(___aomod@divisor+3)^0,c
  3060  000C44  0E00               	movlw	0
  3061  000C46  6E0D               	movwf	(___aomod@divisor+4)^0,c
  3062  000C48  0E00               	movlw	0
  3063  000C4A  6E0E               	movwf	(___aomod@divisor+5)^0,c
  3064  000C4C  0E00               	movlw	0
  3065  000C4E  6E0F               	movwf	(___aomod@divisor+6)^0,c
  3066  000C50  0E00               	movlw	0
  3067  000C52  6E10               	movwf	(___aomod@divisor+7)^0,c
  3068  000C54  EC2F  F009         	call	___aomod	;wreg free
  3069  000C58  C001  F026         	movff	?___aomod,??_dtoa
  3070  000C5C  C002  F027         	movff	?___aomod+1,??_dtoa+1
  3071  000C60  C003  F028         	movff	?___aomod+2,??_dtoa+2
  3072  000C64  C004  F029         	movff	?___aomod+3,??_dtoa+3
  3073  000C68  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  3074  000C6C  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  3075  000C70  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  3076  000C74  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  3077  000C78  C026  F013         	movff	??_dtoa,abs@a
  3078  000C7C  C028  F014         	movff	??_dtoa+2,abs@a+1
  3079  000C80  ECD9  F00C         	call	_abs	;wreg free
  3080  000C84  5013               	movf	?_abs^0,w,c
  3081  000C86  0F30               	addlw	48
  3082  000C88  6EDF               	movwf	indf2,c
  3083  000C8A                     
  3084                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  3085  000C8A  0630               	decf	dtoa@p^0,f,c
  3086  000C8C  A0D8               	btfss	status,0,c
  3087  000C8E  0631               	decf	(dtoa@p+1)^0,f,c
  3088  000C90                     
  3089                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  3090  000C90  0632               	decf	dtoa@w^0,f,c
  3091  000C92  A0D8               	btfss	status,0,c
  3092  000C94  0633               	decf	(dtoa@w+1)^0,f,c
  3093  000C96                     
  3094                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  3095  000C96  C036  F001         	movff	dtoa@n,___aodiv@dividend
  3096  000C9A  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  3097  000C9E  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  3098  000CA2  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  3099  000CA6  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  3100  000CAA  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  3101  000CAE  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  3102  000CB2  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  3103  000CB6  0E0A               	movlw	10
  3104  000CB8  6E09               	movwf	___aodiv@divisor^0,c
  3105  000CBA  0E00               	movlw	0
  3106  000CBC  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  3107  000CBE  0E00               	movlw	0
  3108  000CC0  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  3109  000CC2  0E00               	movlw	0
  3110  000CC4  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  3111  000CC6  0E00               	movlw	0
  3112  000CC8  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  3113  000CCA  0E00               	movlw	0
  3114  000CCC  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  3115  000CCE  0E00               	movlw	0
  3116  000CD0  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  3117  000CD2  0E00               	movlw	0
  3118  000CD4  6E10               	movwf	(___aodiv@divisor+7)^0,c
  3119  000CD6  EC6B  F008         	call	___aodiv	;wreg free
  3120  000CDA  C001  F036         	movff	?___aodiv,dtoa@n
  3121  000CDE  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  3122  000CE2  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  3123  000CE6  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  3124  000CEA  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  3125  000CEE  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  3126  000CF2  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  3127  000CF6  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  3128  000CFA                     l1754:
  3129                           
  3130                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3131  000CFA  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  3132  000CFC  EF88  F006         	goto	u1251
  3133  000D00  503F               	movf	(dtoa@i+1)^0,w,c
  3134  000D02  E108               	bnz	u1250
  3135  000D04  043E               	decf	dtoa@i^0,w,c
  3136  000D06  A0D8               	btfss	status,0,c
  3137  000D08  EF88  F006         	goto	u1251
  3138  000D0C  EF8A  F006         	goto	u1250
  3139  000D10                     u1251:
  3140  000D10  EFBB  F006         	goto	l1764
  3141  000D14                     u1250:
  3142  000D14  5036               	movf	dtoa@n^0,w,c
  3143  000D16  1037               	iorwf	(dtoa@n+1)^0,w,c
  3144  000D18  1038               	iorwf	(dtoa@n+2)^0,w,c
  3145  000D1A  1039               	iorwf	(dtoa@n+3)^0,w,c
  3146  000D1C  103A               	iorwf	(dtoa@n+4)^0,w,c
  3147  000D1E  103B               	iorwf	(dtoa@n+5)^0,w,c
  3148  000D20  103C               	iorwf	(dtoa@n+6)^0,w,c
  3149  000D22  103D               	iorwf	(dtoa@n+7)^0,w,c
  3150  000D24  A4D8               	btfss	status,2,c
  3151  000D26  EF97  F006         	goto	u1261
  3152  000D2A  EF99  F006         	goto	u1260
  3153  000D2E                     u1261:
  3154  000D2E  EF01  F006         	goto	l1744
  3155  000D32                     u1260:
  3156  000D32  BE31               	btfsc	(dtoa@p+1)^0,7,c
  3157  000D34  EFA6  F006         	goto	u1270
  3158  000D38  5031               	movf	(dtoa@p+1)^0,w,c
  3159  000D3A  E106               	bnz	u1271
  3160  000D3C  0430               	decf	dtoa@p^0,w,c
  3161  000D3E  B0D8               	btfsc	status,0,c
  3162  000D40  EFA4  F006         	goto	u1271
  3163  000D44  EFA6  F006         	goto	u1270
  3164  000D48                     u1271:
  3165  000D48  EF01  F006         	goto	l1744
  3166  000D4C                     u1270:
  3167  000D4C  BE33               	btfsc	(dtoa@w+1)^0,7,c
  3168  000D4E  EFB1  F006         	goto	u1281
  3169  000D52  5033               	movf	(dtoa@w+1)^0,w,c
  3170  000D54  E108               	bnz	u1280
  3171  000D56  0432               	decf	dtoa@w^0,w,c
  3172  000D58  A0D8               	btfss	status,0,c
  3173  000D5A  EFB1  F006         	goto	u1281
  3174  000D5E  EFB3  F006         	goto	u1280
  3175  000D62                     u1281:
  3176  000D62  EFBB  F006         	goto	l1764
  3177  000D66                     u1280:
  3178  000D66  0100               	movlb	0	; () banked
  3179  000D68  B366               	btfsc	_flags& (0+255),1,b
  3180  000D6A  EFB9  F006         	goto	u1291
  3181  000D6E  EFBB  F006         	goto	u1290
  3182  000D72                     u1291:
  3183  000D72  EF01  F006         	goto	l1744
  3184  000D76                     u1290:
  3185  000D76                     l1764:
  3186                           
  3187                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  3188  000D76  5034               	movf	dtoa@s^0,w,c
  3189  000D78  1035               	iorwf	(dtoa@s+1)^0,w,c
  3190  000D7A  A4D8               	btfss	status,2,c
  3191  000D7C  EFC2  F006         	goto	u1301
  3192  000D80  EFC4  F006         	goto	u1300
  3193  000D84                     u1301:
  3194  000D84  EFCC  F006         	goto	l1768
  3195  000D88                     u1300:
  3196  000D88  0100               	movlb	0	; () banked
  3197  000D8A  A566               	btfss	_flags& (0+255),2,b
  3198  000D8C  EFCA  F006         	goto	u1311
  3199  000D90  EFCC  F006         	goto	u1310
  3200  000D94                     u1311:
  3201  000D94  EFEA  F006         	goto	l1778
  3202  000D98                     u1310:
  3203  000D98                     l1768:
  3204                           
  3205                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  3206  000D98  063E               	decf	dtoa@i^0,f,c
  3207  000D9A  A0D8               	btfss	status,0,c
  3208  000D9C  063F               	decf	(dtoa@i+1)^0,f,c
  3209  000D9E                     
  3210                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  3211  000D9E  5034               	movf	dtoa@s^0,w,c
  3212  000DA0  1035               	iorwf	(dtoa@s+1)^0,w,c
  3213  000DA2  A4D8               	btfss	status,2,c
  3214  000DA4  EFD6  F006         	goto	u1321
  3215  000DA8  EFD8  F006         	goto	u1320
  3216  000DAC                     u1321:
  3217  000DAC  EFDE  F006         	goto	l1774
  3218  000DB0                     u1320:
  3219  000DB0  0E00               	movlw	0
  3220  000DB2  6E2F               	movwf	(_dtoa$276+1)^0,c
  3221  000DB4  0E2B               	movlw	43
  3222  000DB6  6E2E               	movwf	_dtoa$276^0,c
  3223  000DB8  EFE2  F006         	goto	l1776
  3224  000DBC                     l1774:
  3225  000DBC  0E00               	movlw	0
  3226  000DBE  6E2F               	movwf	(_dtoa$276+1)^0,c
  3227  000DC0  0E2D               	movlw	45
  3228  000DC2  6E2E               	movwf	_dtoa$276^0,c
  3229  000DC4                     l1776:
  3230  000DC4  0E6A               	movlw	low _dbuf
  3231  000DC6  243E               	addwf	dtoa@i^0,w,c
  3232  000DC8  6ED9               	movwf	fsr2l,c
  3233  000DCA  0E00               	movlw	high _dbuf
  3234  000DCC  203F               	addwfc	(dtoa@i+1)^0,w,c
  3235  000DCE  6EDA               	movwf	fsr2h,c
  3236  000DD0  C02E  FFDF         	movff	_dtoa$276,indf2
  3237  000DD4                     l1778:
  3238                           
  3239                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  3240  000DD4  C01C  F011         	movff	dtoa@fp,pad@fp
  3241  000DD8  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  3242  000DDC  0E6A               	movlw	low _dbuf
  3243  000DDE  243E               	addwf	dtoa@i^0,w,c
  3244  000DE0  6E13               	movwf	pad@buf^0,c
  3245  000DE2  0E00               	movlw	high _dbuf
  3246  000DE4  203F               	addwfc	(dtoa@i+1)^0,w,c
  3247  000DE6  6E14               	movwf	(pad@buf+1)^0,c
  3248  000DE8  C032  F015         	movff	dtoa@w,pad@p
  3249  000DEC  C033  F016         	movff	dtoa@w+1,pad@p+1
  3250  000DF0  EC46  F00A         	call	_pad	;wreg free
  3251  000DF4  C011  F01C         	movff	?_pad,?_dtoa
  3252  000DF8  C012  F01D         	movff	?_pad+1,?_dtoa+1
  3253  000DFC  0012               	return		;funcret
  3254  000DFE                     __end_of_dtoa:
  3255                           	opt callstack 0
  3256                           
  3257 ;; *************** function _abs *****************
  3258 ;; Defined at:
  3259 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  a               2   18[COMRAM] int 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;		None
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  2   18[COMRAM] int 
  3266 ;; Registers used:
  3267 ;;		wreg, status,2, status,0
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3273 ;;      Params:         2       0       0       0       0       0       0       0       0
  3274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3275 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3276 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3277 ;;Total ram usage:        4 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; This function calls:
  3280 ;;		Nothing
  3281 ;; This function is called by:
  3282 ;;		_dtoa
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text20
  3287  0019B2                     __ptext20:
  3288                           	opt callstack 0
  3289  0019B2                     _abs:
  3290                           	opt callstack 25
  3291  0019B2  BE14               	btfsc	(abs@a+1)^0,7,c
  3292  0019B4  EFE6  F00C         	goto	u960
  3293  0019B8  5014               	movf	(abs@a+1)^0,w,c
  3294  0019BA  E106               	bnz	u961
  3295  0019BC  0413               	decf	abs@a^0,w,c
  3296  0019BE  B0D8               	btfsc	status,0,c
  3297  0019C0  EFE4  F00C         	goto	u961
  3298  0019C4  EFE6  F00C         	goto	u960
  3299  0019C8                     u961:
  3300  0019C8  EFF4  F00C         	goto	l946
  3301  0019CC                     u960:
  3302  0019CC  C013  F015         	movff	abs@a,??_abs
  3303  0019D0  C014  F016         	movff	abs@a+1,??_abs+1
  3304  0019D4  1E15               	comf	??_abs^0,f,c
  3305  0019D6  1E16               	comf	(??_abs+1)^0,f,c
  3306  0019D8  4A15               	infsnz	??_abs^0,f,c
  3307  0019DA  2A16               	incf	(??_abs+1)^0,f,c
  3308  0019DC  C015  F013         	movff	??_abs,?_abs
  3309  0019E0  C016  F014         	movff	??_abs+1,?_abs+1
  3310  0019E4  EFF8  F00C         	goto	l949
  3311  0019E8                     l946:
  3312  0019E8  C013  F013         	movff	abs@a,?_abs
  3313  0019EC  C014  F014         	movff	abs@a+1,?_abs+1
  3314  0019F0                     l949:
  3315  0019F0  0012               	return		;funcret
  3316  0019F2                     __end_of_abs:
  3317                           	opt callstack 0
  3318                           
  3319 ;; *************** function ___aomod *****************
  3320 ;; Defined at:
  3321 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  dividend        8    0[COMRAM] long long 
  3324 ;;  divisor         8    8[COMRAM] long long 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  sign            1   17[COMRAM] unsigned char 
  3327 ;;  counter         1   16[COMRAM] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  8    0[COMRAM] long long 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3337 ;;      Params:        16       0       0       0       0       0       0       0       0
  3338 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3340 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3341 ;;Total ram usage:       18 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_dtoa
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text21
  3351  00125E                     __ptext21:
  3352                           	opt callstack 0
  3353  00125E                     ___aomod:
  3354                           	opt callstack 25
  3355  00125E  0E00               	movlw	0
  3356  001260  6E12               	movwf	___aomod@sign^0,c
  3357  001262  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  3358  001264  EF38  F009         	goto	u1110
  3359  001268  EF36  F009         	goto	u1111
  3360  00126C                     u1111:
  3361  00126C  EF4A  F009         	goto	l1678
  3362  001270                     u1110:
  3363  001270  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3364  001272  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3365  001274  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3366  001276  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3367  001278  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3368  00127A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3369  00127C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3370  00127E  6C01               	negf	___aomod@dividend^0,c
  3371  001280  0E00               	movlw	0
  3372  001282  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3373  001284  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3374  001286  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3375  001288  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3376  00128A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3377  00128C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3378  00128E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3379  001290  0E01               	movlw	1
  3380  001292  6E12               	movwf	___aomod@sign^0,c
  3381  001294                     l1678:
  3382  001294  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  3383  001296  EF51  F009         	goto	u1120
  3384  00129A  EF4F  F009         	goto	u1121
  3385  00129E                     u1121:
  3386  00129E  EF61  F009         	goto	l1682
  3387  0012A2                     u1120:
  3388  0012A2  1E10               	comf	(___aomod@divisor+7)^0,f,c
  3389  0012A4  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  3390  0012A6  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  3391  0012A8  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  3392  0012AA  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  3393  0012AC  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  3394  0012AE  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  3395  0012B0  6C09               	negf	___aomod@divisor^0,c
  3396  0012B2  0E00               	movlw	0
  3397  0012B4  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  3398  0012B6  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  3399  0012B8  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  3400  0012BA  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  3401  0012BC  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  3402  0012BE  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  3403  0012C0  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  3404  0012C2                     l1682:
  3405  0012C2  5009               	movf	___aomod@divisor^0,w,c
  3406  0012C4  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  3407  0012C6  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  3408  0012C8  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  3409  0012CA  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  3410  0012CC  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  3411  0012CE  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  3412  0012D0  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  3413  0012D2  B4D8               	btfsc	status,2,c
  3414  0012D4  EF6E  F009         	goto	u1131
  3415  0012D8  EF70  F009         	goto	u1130
  3416  0012DC                     u1131:
  3417  0012DC  EFB8  F009         	goto	l1698
  3418  0012E0                     u1130:
  3419  0012E0  0E01               	movlw	1
  3420  0012E2  6E11               	movwf	___aomod@counter^0,c
  3421  0012E4  EF7E  F009         	goto	l1688
  3422  0012E8                     l1686:
  3423  0012E8  90D8               	bcf	status,0,c
  3424  0012EA  3609               	rlcf	___aomod@divisor^0,f,c
  3425  0012EC  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  3426  0012EE  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  3427  0012F0  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  3428  0012F2  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  3429  0012F4  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  3430  0012F6  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  3431  0012F8  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  3432  0012FA  2A11               	incf	___aomod@counter^0,f,c
  3433  0012FC                     l1688:
  3434  0012FC  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  3435  0012FE  EF83  F009         	goto	u1141
  3436  001302  EF85  F009         	goto	u1140
  3437  001306                     u1141:
  3438  001306  EF74  F009         	goto	l1686
  3439  00130A                     u1140:
  3440  00130A                     l1690:
  3441  00130A  5009               	movf	___aomod@divisor^0,w,c
  3442  00130C  5C01               	subwf	___aomod@dividend^0,w,c
  3443  00130E  500A               	movf	(___aomod@divisor+1)^0,w,c
  3444  001310  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  3445  001312  500B               	movf	(___aomod@divisor+2)^0,w,c
  3446  001314  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  3447  001316  500C               	movf	(___aomod@divisor+3)^0,w,c
  3448  001318  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  3449  00131A  500D               	movf	(___aomod@divisor+4)^0,w,c
  3450  00131C  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  3451  00131E  500E               	movf	(___aomod@divisor+5)^0,w,c
  3452  001320  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  3453  001322  500F               	movf	(___aomod@divisor+6)^0,w,c
  3454  001324  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  3455  001326  5010               	movf	(___aomod@divisor+7)^0,w,c
  3456  001328  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  3457  00132A  A0D8               	btfss	status,0,c
  3458  00132C  EF9A  F009         	goto	u1151
  3459  001330  EF9C  F009         	goto	u1150
  3460  001334                     u1151:
  3461  001334  EFAC  F009         	goto	l1694
  3462  001338                     u1150:
  3463  001338  5009               	movf	___aomod@divisor^0,w,c
  3464  00133A  5E01               	subwf	___aomod@dividend^0,f,c
  3465  00133C  500A               	movf	(___aomod@divisor+1)^0,w,c
  3466  00133E  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  3467  001340  500B               	movf	(___aomod@divisor+2)^0,w,c
  3468  001342  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  3469  001344  500C               	movf	(___aomod@divisor+3)^0,w,c
  3470  001346  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  3471  001348  500D               	movf	(___aomod@divisor+4)^0,w,c
  3472  00134A  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  3473  00134C  500E               	movf	(___aomod@divisor+5)^0,w,c
  3474  00134E  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  3475  001350  500F               	movf	(___aomod@divisor+6)^0,w,c
  3476  001352  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  3477  001354  5010               	movf	(___aomod@divisor+7)^0,w,c
  3478  001356  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  3479  001358                     l1694:
  3480  001358  90D8               	bcf	status,0,c
  3481  00135A  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  3482  00135C  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  3483  00135E  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  3484  001360  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  3485  001362  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  3486  001364  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  3487  001366  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  3488  001368  3209               	rrcf	___aomod@divisor^0,f,c
  3489  00136A  2E11               	decfsz	___aomod@counter^0,f,c
  3490  00136C  EF85  F009         	goto	l1690
  3491  001370                     l1698:
  3492  001370  5012               	movf	___aomod@sign^0,w,c
  3493  001372  B4D8               	btfsc	status,2,c
  3494  001374  EFBE  F009         	goto	u1161
  3495  001378  EFC0  F009         	goto	u1160
  3496  00137C                     u1161:
  3497  00137C  EFD0  F009         	goto	l1702
  3498  001380                     u1160:
  3499  001380  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3500  001382  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3501  001384  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3502  001386  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3503  001388  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3504  00138A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3505  00138C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3506  00138E  6C01               	negf	___aomod@dividend^0,c
  3507  001390  0E00               	movlw	0
  3508  001392  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3509  001394  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3510  001396  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3511  001398  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3512  00139A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3513  00139C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3514  00139E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3515  0013A0                     l1702:
  3516  0013A0  C001  F001         	movff	___aomod@dividend,?___aomod
  3517  0013A4  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3518  0013A8  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3519  0013AC  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3520  0013B0  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3521  0013B4  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3522  0013B8  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3523  0013BC  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3524  0013C0  0012               	return		;funcret
  3525  0013C2                     __end_of___aomod:
  3526                           	opt callstack 0
  3527                           
  3528 ;; *************** function ___aodiv *****************
  3529 ;; Defined at:
  3530 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  dividend        8    0[COMRAM] long long 
  3533 ;;  divisor         8    8[COMRAM] long long 
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;  quotient        8   18[COMRAM] long long 
  3536 ;;  sign            1   17[COMRAM] unsigned char 
  3537 ;;  counter         1   16[COMRAM] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  8    0[COMRAM] long long 
  3540 ;; Registers used:
  3541 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3547 ;;      Params:        16       0       0       0       0       0       0       0       0
  3548 ;;      Locals:        10       0       0       0       0       0       0       0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3550 ;;      Totals:        26       0       0       0       0       0       0       0       0
  3551 ;;Total ram usage:       26 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_dtoa
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text22
  3561  0010D6                     __ptext22:
  3562                           	opt callstack 0
  3563  0010D6                     ___aodiv:
  3564                           	opt callstack 25
  3565  0010D6  0E00               	movlw	0
  3566  0010D8  6E12               	movwf	___aodiv@sign^0,c
  3567  0010DA  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3568  0010DC  EF74  F008         	goto	u1040
  3569  0010E0  EF72  F008         	goto	u1041
  3570  0010E4                     u1041:
  3571  0010E4  EF86  F008         	goto	l1634
  3572  0010E8                     u1040:
  3573  0010E8  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3574  0010EA  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3575  0010EC  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3576  0010EE  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3577  0010F0  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3578  0010F2  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3579  0010F4  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3580  0010F6  6C09               	negf	___aodiv@divisor^0,c
  3581  0010F8  0E00               	movlw	0
  3582  0010FA  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3583  0010FC  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3584  0010FE  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3585  001100  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3586  001102  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3587  001104  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3588  001106  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3589  001108  0E01               	movlw	1
  3590  00110A  6E12               	movwf	___aodiv@sign^0,c
  3591  00110C                     l1634:
  3592  00110C  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3593  00110E  EF8D  F008         	goto	u1050
  3594  001112  EF8B  F008         	goto	u1051
  3595  001116                     u1051:
  3596  001116  EF9F  F008         	goto	l1640
  3597  00111A                     u1050:
  3598  00111A  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3599  00111C  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3600  00111E  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3601  001120  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3602  001122  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3603  001124  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3604  001126  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3605  001128  6C01               	negf	___aodiv@dividend^0,c
  3606  00112A  0E00               	movlw	0
  3607  00112C  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3608  00112E  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3609  001130  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3610  001132  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3611  001134  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3612  001136  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3613  001138  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3614  00113A  0E01               	movlw	1
  3615  00113C  1A12               	xorwf	___aodiv@sign^0,f,c
  3616  00113E                     l1640:
  3617  00113E  EE20  F013         	lfsr	2,___aodiv@quotient
  3618  001142  0E07               	movlw	7
  3619  001144                     u1061:
  3620  001144  6ADE               	clrf	postinc2,c
  3621  001146  06E8               	decf	wreg,f,c
  3622  001148  E2FD               	bc	u1061
  3623  00114A  5009               	movf	___aodiv@divisor^0,w,c
  3624  00114C  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3625  00114E  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3626  001150  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3627  001152  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3628  001154  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3629  001156  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3630  001158  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3631  00115A  B4D8               	btfsc	status,2,c
  3632  00115C  EFB2  F008         	goto	u1071
  3633  001160  EFB4  F008         	goto	u1070
  3634  001164                     u1071:
  3635  001164  EF06  F009         	goto	l1662
  3636  001168                     u1070:
  3637  001168  0E01               	movlw	1
  3638  00116A  6E11               	movwf	___aodiv@counter^0,c
  3639  00116C  EFC2  F008         	goto	l1648
  3640  001170                     l1646:
  3641  001170  90D8               	bcf	status,0,c
  3642  001172  3609               	rlcf	___aodiv@divisor^0,f,c
  3643  001174  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3644  001176  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3645  001178  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3646  00117A  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3647  00117C  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3648  00117E  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3649  001180  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3650  001182  2A11               	incf	___aodiv@counter^0,f,c
  3651  001184                     l1648:
  3652  001184  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3653  001186  EFC7  F008         	goto	u1081
  3654  00118A  EFC9  F008         	goto	u1080
  3655  00118E                     u1081:
  3656  00118E  EFB8  F008         	goto	l1646
  3657  001192                     u1080:
  3658  001192                     l1650:
  3659  001192  90D8               	bcf	status,0,c
  3660  001194  3613               	rlcf	___aodiv@quotient^0,f,c
  3661  001196  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3662  001198  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3663  00119A  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3664  00119C  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3665  00119E  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3666  0011A0  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3667  0011A2  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3668  0011A4  5009               	movf	___aodiv@divisor^0,w,c
  3669  0011A6  5C01               	subwf	___aodiv@dividend^0,w,c
  3670  0011A8  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3671  0011AA  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3672  0011AC  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3673  0011AE  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3674  0011B0  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3675  0011B2  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3676  0011B4  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3677  0011B6  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3678  0011B8  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3679  0011BA  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3680  0011BC  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3681  0011BE  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3682  0011C0  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3683  0011C2  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3684  0011C4  A0D8               	btfss	status,0,c
  3685  0011C6  EFE7  F008         	goto	u1091
  3686  0011CA  EFE9  F008         	goto	u1090
  3687  0011CE                     u1091:
  3688  0011CE  EFFA  F008         	goto	l1658
  3689  0011D2                     u1090:
  3690  0011D2  5009               	movf	___aodiv@divisor^0,w,c
  3691  0011D4  5E01               	subwf	___aodiv@dividend^0,f,c
  3692  0011D6  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3693  0011D8  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3694  0011DA  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3695  0011DC  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3696  0011DE  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3697  0011E0  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3698  0011E2  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3699  0011E4  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3700  0011E6  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3701  0011E8  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3702  0011EA  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3703  0011EC  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3704  0011EE  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3705  0011F0  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3706  0011F2  8013               	bsf	___aodiv@quotient^0,0,c
  3707  0011F4                     l1658:
  3708  0011F4  90D8               	bcf	status,0,c
  3709  0011F6  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3710  0011F8  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3711  0011FA  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3712  0011FC  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3713  0011FE  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3714  001200  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3715  001202  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3716  001204  3209               	rrcf	___aodiv@divisor^0,f,c
  3717  001206  2E11               	decfsz	___aodiv@counter^0,f,c
  3718  001208  EFC9  F008         	goto	l1650
  3719  00120C                     l1662:
  3720  00120C  5012               	movf	___aodiv@sign^0,w,c
  3721  00120E  B4D8               	btfsc	status,2,c
  3722  001210  EF0C  F009         	goto	u1101
  3723  001214  EF0E  F009         	goto	u1100
  3724  001218                     u1101:
  3725  001218  EF1E  F009         	goto	l1666
  3726  00121C                     u1100:
  3727  00121C  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3728  00121E  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3729  001220  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3730  001222  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3731  001224  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3732  001226  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3733  001228  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3734  00122A  6C13               	negf	___aodiv@quotient^0,c
  3735  00122C  0E00               	movlw	0
  3736  00122E  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3737  001230  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3738  001232  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3739  001234  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3740  001236  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3741  001238  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3742  00123A  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3743  00123C                     l1666:
  3744  00123C  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3745  001240  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3746  001244  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3747  001248  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3748  00124C  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3749  001250  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3750  001254  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3751  001258  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3752  00125C  0012               	return		;funcret
  3753  00125E                     __end_of___aodiv:
  3754                           	opt callstack 0
  3755                           
  3756 ;; *************** function _ctoa *****************
  3757 ;; Defined at:
  3758 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  3761 ;;		 -> sprintf@f(6), 
  3762 ;;  c               1   29[COMRAM] unsigned char 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  w               2   30[COMRAM] int 
  3765 ;;  l               2    0        int 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  2   27[COMRAM] int 
  3768 ;; Registers used:
  3769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3775 ;;      Params:         3       0       0       0       0       0       0       0       0
  3776 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3777 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3778 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3779 ;;Total ram usage:        5 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    4
  3782 ;; This function calls:
  3783 ;;		_pad
  3784 ;; This function is called by:
  3785 ;;		_vfpfcnvrt
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text23
  3790  001824                     __ptext23:
  3791                           	opt callstack 0
  3792  001824                     _ctoa:
  3793                           	opt callstack 22
  3794  001824                     
  3795                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  3796  001824  0100               	movlb	0	; () banked
  3797  001826  5162               	movf	_width& (0+255),w,b
  3798  001828  1163               	iorwf	(_width+1)& (0+255),w,b
  3799  00182A  A4D8               	btfss	status,2,c
  3800  00182C  EF1A  F00C         	goto	u1171
  3801  001830  EF1C  F00C         	goto	u1170
  3802  001834                     u1171:
  3803  001834  EF22  F00C         	goto	l1710
  3804  001838                     u1170:
  3805  001838                     
  3806                           ; BSR set to: 0
  3807  001838  C062  F01F         	movff	_width,ctoa@w
  3808  00183C  C063  F020         	movff	_width+1,ctoa@w+1
  3809  001840  EF28  F00C         	goto	l1712
  3810  001844                     l1710:
  3811                           
  3812                           ; BSR set to: 0
  3813  001844  0EFF               	movlw	255
  3814  001846  2562               	addwf	_width& (0+255),w,b
  3815  001848  6E1F               	movwf	ctoa@w^0,c
  3816  00184A  0EFF               	movlw	255
  3817  00184C  2163               	addwfc	(_width+1)& (0+255),w,b
  3818  00184E  6E20               	movwf	(ctoa@w+1)^0,c
  3819  001850                     l1712:
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  3823  001850  C01E  F06A         	movff	ctoa@c,_dbuf
  3824  001854                     
  3825                           ; BSR set to: 0
  3826                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  3827  001854  0E00               	movlw	0
  3828  001856  6F6B               	movwf	(_dbuf+1)& (0+255),b
  3829  001858                     
  3830                           ; BSR set to: 0
  3831                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  3832  001858  C01C  F011         	movff	ctoa@fp,pad@fp
  3833  00185C  C01D  F012         	movff	ctoa@fp+1,pad@fp+1
  3834  001860  0E6A               	movlw	low _dbuf
  3835  001862  6E13               	movwf	pad@buf^0,c
  3836  001864  0E00               	movlw	high _dbuf
  3837  001866  6E14               	movwf	(pad@buf+1)^0,c
  3838  001868  C01F  F015         	movff	ctoa@w,pad@p
  3839  00186C  C020  F016         	movff	ctoa@w+1,pad@p+1
  3840  001870  EC46  F00A         	call	_pad	;wreg free
  3841  001874  C011  F01C         	movff	?_pad,?_ctoa
  3842  001878  C012  F01D         	movff	?_pad+1,?_ctoa+1
  3843  00187C  0012               	return		;funcret
  3844  00187E                     __end_of_ctoa:
  3845                           	opt callstack 0
  3846                           
  3847 ;; *************** function _pad *****************
  3848 ;; Defined at:
  3849 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3852 ;;		 -> sprintf@f(6), 
  3853 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3854 ;;		 -> dbuf(32), 
  3855 ;;  p               2   20[COMRAM] int 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  w               2   25[COMRAM] int 
  3858 ;;  i               2   23[COMRAM] int 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  2   16[COMRAM] int 
  3861 ;; Registers used:
  3862 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3868 ;;      Params:         6       0       0       0       0       0       0       0       0
  3869 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3870 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3871 ;;      Totals:        11       0       0       0       0       0       0       0       0
  3872 ;;Total ram usage:       11 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    3
  3875 ;; This function calls:
  3876 ;;		_fputc
  3877 ;;		_fputs
  3878 ;;		_strlen
  3879 ;; This function is called by:
  3880 ;;		_ctoa
  3881 ;;		_dtoa
  3882 ;;		_xtoa
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           	psect	text24
  3887  00148C                     __ptext24:
  3888                           	opt callstack 0
  3889  00148C                     _pad:
  3890                           	opt callstack 22
  3891  00148C                     
  3892                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  3893  00148C  0100               	movlb	0	; () banked
  3894  00148E  A166               	btfss	_flags& (0+255),0,b
  3895  001490  EF4C  F00A         	goto	u921
  3896  001494  EF4E  F00A         	goto	u920
  3897  001498                     u921:
  3898  001498  EF58  F00A         	goto	l1586
  3899  00149C                     u920:
  3900  00149C                     
  3901                           ; BSR set to: 0
  3902                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  3903  00149C  C013  F00A         	movff	pad@buf,fputs@s
  3904  0014A0  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3905  0014A4  C011  F00C         	movff	pad@fp,fputs@fp
  3906  0014A8  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3907  0014AC  ECB7  F00C         	call	_fputs	;wreg free
  3908  0014B0                     l1586:
  3909                           
  3910                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  3911  0014B0  BE16               	btfsc	(pad@p+1)^0,7,c
  3912  0014B2  EF5D  F00A         	goto	u931
  3913  0014B6  EF5F  F00A         	goto	u930
  3914  0014BA                     u931:
  3915  0014BA  EF65  F00A         	goto	l1590
  3916  0014BE                     u930:
  3917  0014BE  C015  F01A         	movff	pad@p,pad@w
  3918  0014C2  C016  F01B         	movff	pad@p+1,pad@w+1
  3919  0014C6  EF69  F00A         	goto	l182
  3920  0014CA                     l1590:
  3921  0014CA  0E00               	movlw	0
  3922  0014CC  6E1B               	movwf	(pad@w+1)^0,c
  3923  0014CE  0E00               	movlw	0
  3924  0014D0  6E1A               	movwf	pad@w^0,c
  3925  0014D2                     l182:
  3926                           
  3927                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  3928  0014D2  0E00               	movlw	0
  3929  0014D4  6E19               	movwf	(pad@i+1)^0,c
  3930  0014D6  0E00               	movlw	0
  3931  0014D8  6E18               	movwf	pad@i^0,c
  3932                           
  3933                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  3934  0014DA  EF7B  F00A         	goto	l1596
  3935  0014DE                     l1592:
  3936                           
  3937                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  3938  0014DE  0E00               	movlw	0
  3939  0014E0  6E02               	movwf	(fputc@c+1)^0,c
  3940  0014E2  0E20               	movlw	32
  3941  0014E4  6E01               	movwf	fputc@c^0,c
  3942  0014E6  C011  F003         	movff	pad@fp,fputc@fp
  3943  0014EA  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3944  0014EE  ECE1  F009         	call	_fputc	;wreg free
  3945  0014F2                     
  3946                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  3947  0014F2  4A18               	infsnz	pad@i^0,f,c
  3948  0014F4  2A19               	incf	(pad@i+1)^0,f,c
  3949  0014F6                     l1596:
  3950                           
  3951                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  3952  0014F6  501A               	movf	pad@w^0,w,c
  3953  0014F8  5C18               	subwf	pad@i^0,w,c
  3954  0014FA  5019               	movf	(pad@i+1)^0,w,c
  3955  0014FC  0A80               	xorlw	128
  3956  0014FE  6E17               	movwf	??_pad^0,c
  3957  001500  501B               	movf	(pad@w+1)^0,w,c
  3958  001502  0A80               	xorlw	128
  3959  001504  5817               	subwfb	??_pad^0,w,c
  3960  001506  A0D8               	btfss	status,0,c
  3961  001508  EF88  F00A         	goto	u941
  3962  00150C  EF8A  F00A         	goto	u940
  3963  001510                     u941:
  3964  001510  EF6F  F00A         	goto	l1592
  3965  001514                     u940:
  3966  001514                     
  3967                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  3968  001514  0100               	movlb	0	; () banked
  3969  001516  B166               	btfsc	_flags& (0+255),0,b
  3970  001518  EF90  F00A         	goto	u951
  3971  00151C  EF92  F00A         	goto	u950
  3972  001520                     u951:
  3973  001520  EF9C  F00A         	goto	l1600
  3974  001524                     u950:
  3975  001524                     
  3976                           ; BSR set to: 0
  3977                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  3978  001524  C013  F00A         	movff	pad@buf,fputs@s
  3979  001528  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3980  00152C  C011  F00C         	movff	pad@fp,fputs@fp
  3981  001530  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3982  001534  ECB7  F00C         	call	_fputs	;wreg free
  3983  001538                     l1600:
  3984                           
  3985                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  3986  001538  C013  F001         	movff	pad@buf,strlen@s
  3987  00153C  C014  F002         	movff	pad@buf+1,strlen@s+1
  3988  001540  EC8A  F00D         	call	_strlen	;wreg free
  3989  001544  501A               	movf	pad@w^0,w,c
  3990  001546  2401               	addwf	?_strlen^0,w,c
  3991  001548  6E11               	movwf	?_pad^0,c
  3992  00154A  501B               	movf	(pad@w+1)^0,w,c
  3993  00154C  2002               	addwfc	(?_strlen+1)^0,w,c
  3994  00154E  6E12               	movwf	(?_pad+1)^0,c
  3995  001550  0012               	return		;funcret
  3996  001552                     __end_of_pad:
  3997                           	opt callstack 0
  3998                           
  3999 ;; *************** function _fputs *****************
  4000 ;; Defined at:
  4001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  s               2    9[COMRAM] PTR const unsigned char 
  4004 ;;		 -> dbuf(32), 
  4005 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  4006 ;;		 -> sprintf@f(6), 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  i               2   14[COMRAM] int 
  4009 ;;  c               1   13[COMRAM] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  2    9[COMRAM] int 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4019 ;;      Params:         4       0       0       0       0       0       0       0       0
  4020 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4021 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4022 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4023 ;;Total ram usage:        7 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    2
  4026 ;; This function calls:
  4027 ;;		_fputc
  4028 ;; This function is called by:
  4029 ;;		_pad
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text25
  4034  00196E                     __ptext25:
  4035                           	opt callstack 0
  4036  00196E                     _fputs:
  4037                           	opt callstack 22
  4038  00196E  0E00               	movlw	0
  4039  001970  6E10               	movwf	(fputs@i+1)^0,c
  4040  001972  0E00               	movlw	0
  4041  001974  6E0F               	movwf	fputs@i^0,c
  4042  001976  EFC8  F00C         	goto	l1576
  4043  00197A                     l1572:
  4044  00197A  C00E  F001         	movff	fputs@c,fputc@c
  4045  00197E  6A02               	clrf	(fputc@c+1)^0,c
  4046  001980  C00C  F003         	movff	fputs@fp,fputc@fp
  4047  001984  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  4048  001988  ECE1  F009         	call	_fputc	;wreg free
  4049  00198C  4A0F               	infsnz	fputs@i^0,f,c
  4050  00198E  2A10               	incf	(fputs@i+1)^0,f,c
  4051  001990                     l1576:
  4052  001990  500F               	movf	fputs@i^0,w,c
  4053  001992  240A               	addwf	fputs@s^0,w,c
  4054  001994  6ED9               	movwf	fsr2l,c
  4055  001996  5010               	movf	(fputs@i+1)^0,w,c
  4056  001998  200B               	addwfc	(fputs@s+1)^0,w,c
  4057  00199A  6EDA               	movwf	fsr2h,c
  4058  00199C  50DF               	movf	indf2,w,c
  4059  00199E  6E0E               	movwf	fputs@c^0,c
  4060  0019A0  500E               	movf	fputs@c^0,w,c
  4061  0019A2  A4D8               	btfss	status,2,c
  4062  0019A4  EFD6  F00C         	goto	u891
  4063  0019A8  EFD8  F00C         	goto	u890
  4064  0019AC                     u891:
  4065  0019AC  EFBD  F00C         	goto	l1572
  4066  0019B0                     u890:
  4067  0019B0  0012               	return		;funcret
  4068  0019B2                     __end_of_fputs:
  4069                           	opt callstack 0
  4070                           
  4071 ;; *************** function _fputc *****************
  4072 ;; Defined at:
  4073 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  c               2    0[COMRAM] int 
  4076 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  4077 ;;		 -> sprintf@f(6), 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  2    0[COMRAM] int 
  4082 ;; Registers used:
  4083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4089 ;;      Params:         4       0       0       0       0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4091 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4092 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4093 ;;Total ram usage:        9 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    1
  4096 ;; This function calls:
  4097 ;;		_putch
  4098 ;; This function is called by:
  4099 ;;		_pad
  4100 ;;		_vfpfcnvrt
  4101 ;;		_fputs
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text26
  4106  0013C2                     __ptext26:
  4107                           	opt callstack 0
  4108  0013C2                     _fputc:
  4109                           	opt callstack 22
  4110  0013C2  5003               	movf	fputc@fp^0,w,c
  4111  0013C4  1004               	iorwf	(fputc@fp+1)^0,w,c
  4112  0013C6  B4D8               	btfsc	status,2,c
  4113  0013C8  EFE8  F009         	goto	u841
  4114  0013CC  EFEA  F009         	goto	u840
  4115  0013D0                     u841:
  4116  0013D0  EFF3  F009         	goto	l1550
  4117  0013D4                     u840:
  4118  0013D4  5003               	movf	fputc@fp^0,w,c
  4119  0013D6  1004               	iorwf	(fputc@fp+1)^0,w,c
  4120  0013D8  A4D8               	btfss	status,2,c
  4121  0013DA  EFF1  F009         	goto	u851
  4122  0013DE  EFF3  F009         	goto	u850
  4123  0013E2                     u851:
  4124  0013E2  EFF8  F009         	goto	l1552
  4125  0013E6                     u850:
  4126  0013E6                     l1550:
  4127  0013E6  5001               	movf	fputc@c^0,w,c
  4128  0013E8  ECFE  F00D         	call	_putch
  4129  0013EC  EF45  F00A         	goto	l973
  4130  0013F0                     l1552:
  4131  0013F0  EE20 F004          	lfsr	2,4
  4132  0013F4  5003               	movf	fputc@fp^0,w,c
  4133  0013F6  26D9               	addwf	fsr2l,f,c
  4134  0013F8  5004               	movf	(fputc@fp+1)^0,w,c
  4135  0013FA  22DA               	addwfc	fsr2h,f,c
  4136  0013FC  50DE               	movf	postinc2,w,c
  4137  0013FE  10DE               	iorwf	postinc2,w,c
  4138  001400  B4D8               	btfsc	status,2,c
  4139  001402  EF05  F00A         	goto	u861
  4140  001406  EF07  F00A         	goto	u860
  4141  00140A                     u861:
  4142  00140A  EF22  F00A         	goto	l1556
  4143  00140E                     u860:
  4144  00140E  EE20 F004          	lfsr	2,4
  4145  001412  5003               	movf	fputc@fp^0,w,c
  4146  001414  26D9               	addwf	fsr2l,f,c
  4147  001416  5004               	movf	(fputc@fp+1)^0,w,c
  4148  001418  22DA               	addwfc	fsr2h,f,c
  4149  00141A  EE10 F002          	lfsr	1,2
  4150  00141E  5003               	movf	fputc@fp^0,w,c
  4151  001420  26E1               	addwf	fsr1l,f,c
  4152  001422  5004               	movf	(fputc@fp+1)^0,w,c
  4153  001424  22E2               	addwfc	fsr1h,f,c
  4154  001426  50DE               	movf	postinc2,w,c
  4155  001428  5CE6               	subwf	postinc1,w,c
  4156  00142A  50E6               	movf	postinc1,w,c
  4157  00142C  0A80               	xorlw	128
  4158  00142E  6E09               	movwf	(??_fputc+4)^0,c
  4159  001430  50DE               	movf	postinc2,w,c
  4160  001432  0A80               	xorlw	128
  4161  001434  5809               	subwfb	(??_fputc+4)^0,w,c
  4162  001436  B0D8               	btfsc	status,0,c
  4163  001438  EF20  F00A         	goto	u871
  4164  00143C  EF22  F00A         	goto	u870
  4165  001440                     u871:
  4166  001440  EF45  F00A         	goto	l973
  4167  001444                     u870:
  4168  001444                     l1556:
  4169  001444  EE20 F002          	lfsr	2,2
  4170  001448  5003               	movf	fputc@fp^0,w,c
  4171  00144A  26D9               	addwf	fsr2l,f,c
  4172  00144C  5004               	movf	(fputc@fp+1)^0,w,c
  4173  00144E  22DA               	addwfc	fsr2h,f,c
  4174  001450  CFDE F005          	movff	postinc2,??_fputc
  4175  001454  CFDD F006          	movff	postdec2,??_fputc+1
  4176  001458  C003  FFD9         	movff	fputc@fp,fsr2l
  4177  00145C  C004  FFDA         	movff	fputc@fp+1,fsr2h
  4178  001460  CFDE F007          	movff	postinc2,??_fputc+2
  4179  001464  CFDD F008          	movff	postdec2,??_fputc+3
  4180  001468  5005               	movf	??_fputc^0,w,c
  4181  00146A  2407               	addwf	(??_fputc+2)^0,w,c
  4182  00146C  6ED9               	movwf	fsr2l,c
  4183  00146E  5006               	movf	(??_fputc+1)^0,w,c
  4184  001470  2008               	addwfc	(??_fputc+3)^0,w,c
  4185  001472  6EDA               	movwf	fsr2h,c
  4186  001474  C001  FFDF         	movff	fputc@c,indf2
  4187  001478  EE20 F002          	lfsr	2,2
  4188  00147C  5003               	movf	fputc@fp^0,w,c
  4189  00147E  26D9               	addwf	fsr2l,f,c
  4190  001480  5004               	movf	(fputc@fp+1)^0,w,c
  4191  001482  22DA               	addwfc	fsr2h,f,c
  4192  001484  2ADE               	incf	postinc2,f,c
  4193  001486  0E00               	movlw	0
  4194  001488  22DD               	addwfc	postdec2,f,c
  4195  00148A                     l973:
  4196  00148A  0012               	return		;funcret
  4197  00148C                     __end_of_fputc:
  4198                           	opt callstack 0
  4199                           
  4200 ;; *************** function _putch *****************
  4201 ;; Defined at:
  4202 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  c               1    wreg     unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  c               1    0[COMRAM] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_fputc
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text27
  4230  001BFC                     __ptext27:
  4231                           	opt callstack 0
  4232  001BFC                     _putch:
  4233                           	opt callstack 22
  4234  001BFC  0012               	return		;funcret
  4235  001BFE                     __end_of_putch:
  4236                           	opt callstack 0
  4237                           
  4238 ;; *************** function _Data1LCD *****************
  4239 ;; Defined at:
  4240 ;;		line 173 in file "main.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4254 ;;      Params:         0       0       0       0       0       0       0       0       0
  4255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4257 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4258 ;;Total ram usage:        0 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    2
  4261 ;; This function calls:
  4262 ;;		_SettingsLCD
  4263 ;;		_WriteLCD
  4264 ;;		_strlen
  4265 ;; This function is called by:
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text28
  4271  0018D0                     __ptext28:
  4272                           	opt callstack 0
  4273  0018D0                     _Data1LCD:
  4274                           	opt callstack 28
  4275  0018D0                     
  4276                           ;main.c: 174:     SettingsLCD(0x80);
  4277  0018D0  0E80               	movlw	128
  4278  0018D2  ECDA  F00D         	call	_SettingsLCD
  4279  0018D6                     
  4280                           ;main.c: 175:     for(i=0; i<strlen(texto1); i++){
  4281  0018D6  0E00               	movlw	0
  4282  0018D8  0100               	movlb	0	; () banked
  4283  0018DA  6F69               	movwf	(_i+1)& (0+255),b
  4284  0018DC  0E00               	movlw	0
  4285  0018DE  6F68               	movwf	_i& (0+255),b
  4286  0018E0  EF7E  F00C         	goto	l2012
  4287  0018E4                     l2008:
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;main.c: 176:         WriteLCD(texto1[i]);
  4291  0018E4  0EC5               	movlw	low _texto1
  4292  0018E6  2568               	addwf	_i& (0+255),w,b
  4293  0018E8  6ED9               	movwf	fsr2l,c
  4294  0018EA  0E00               	movlw	high _texto1
  4295  0018EC  2169               	addwfc	(_i+1)& (0+255),w,b
  4296  0018EE  6EDA               	movwf	fsr2h,c
  4297  0018F0  50DF               	movf	indf2,w,c
  4298  0018F2  ECCF  F00D         	call	_WriteLCD
  4299  0018F6                     
  4300                           ;main.c: 177:     }
  4301  0018F6  0100               	movlb	0	; () banked
  4302  0018F8  4B68               	infsnz	_i& (0+255),f,b
  4303  0018FA  2B69               	incf	(_i+1)& (0+255),f,b
  4304  0018FC                     l2012:
  4305                           
  4306                           ; BSR set to: 0
  4307  0018FC  0EC5               	movlw	low _texto1
  4308  0018FE  6E01               	movwf	strlen@s^0,c
  4309  001900  0E00               	movlw	high _texto1
  4310  001902  6E02               	movwf	(strlen@s+1)^0,c
  4311  001904  EC8A  F00D         	call	_strlen	;wreg free
  4312  001908  5001               	movf	?_strlen^0,w,c
  4313  00190A  0100               	movlb	0	; () banked
  4314  00190C  5D68               	subwf	_i& (0+255),w,b
  4315  00190E  5002               	movf	(?_strlen+1)^0,w,c
  4316  001910  5969               	subwfb	(_i+1)& (0+255),w,b
  4317  001912  A0D8               	btfss	status,0,c
  4318  001914  EF8E  F00C         	goto	u1621
  4319  001918  EF90  F00C         	goto	u1620
  4320  00191C                     u1621:
  4321  00191C  EF72  F00C         	goto	l2008
  4322  001920                     u1620:
  4323  001920                     
  4324                           ; BSR set to: 0
  4325  001920  0012               	return		;funcret
  4326  001922                     __end_of_Data1LCD:
  4327                           	opt callstack 0
  4328                           
  4329 ;; *************** function _strlen *****************
  4330 ;; Defined at:
  4331 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  s               2    0[COMRAM] PTR const unsigned char 
  4334 ;;		 -> dbuf(32), texto2(20), texto1(8), 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  a               2    2[COMRAM] PTR const unsigned char 
  4337 ;;		 -> dbuf(32), texto2(20), texto1(8), 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  2    0[COMRAM] unsigned int 
  4340 ;; Registers used:
  4341 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4347 ;;      Params:         2       0       0       0       0       0       0       0       0
  4348 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4350 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4351 ;;Total ram usage:        4 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; This function calls:
  4354 ;;		Nothing
  4355 ;; This function is called by:
  4356 ;;		_Data1LCD
  4357 ;;		_Data2LCD
  4358 ;;		_pad
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text29
  4363  001B14                     __ptext29:
  4364                           	opt callstack 0
  4365  001B14                     _strlen:
  4366                           	opt callstack 29
  4367  001B14  C001  F003         	movff	strlen@s,strlen@a
  4368  001B18  C002  F004         	movff	strlen@s+1,strlen@a+1
  4369  001B1C  EF92  F00D         	goto	l1564
  4370  001B20                     l1562:
  4371  001B20  4A01               	infsnz	strlen@s^0,f,c
  4372  001B22  2A02               	incf	(strlen@s+1)^0,f,c
  4373  001B24                     l1564:
  4374  001B24  C001  FFD9         	movff	strlen@s,fsr2l
  4375  001B28  C002  FFDA         	movff	strlen@s+1,fsr2h
  4376  001B2C  50DF               	movf	indf2,w,c
  4377  001B2E  A4D8               	btfss	status,2,c
  4378  001B30  EF9C  F00D         	goto	u881
  4379  001B34  EF9E  F00D         	goto	u880
  4380  001B38                     u881:
  4381  001B38  EF90  F00D         	goto	l1562
  4382  001B3C                     u880:
  4383  001B3C  5003               	movf	strlen@a^0,w,c
  4384  001B3E  5C01               	subwf	strlen@s^0,w,c
  4385  001B40  6E01               	movwf	?_strlen^0,c
  4386  001B42  5004               	movf	(strlen@a+1)^0,w,c
  4387  001B44  5802               	subwfb	(strlen@s+1)^0,w,c
  4388  001B46  6E02               	movwf	(?_strlen+1)^0,c
  4389  001B48  0012               	return		;funcret
  4390  001B4A                     __end_of_strlen:
  4391                           	opt callstack 0
  4392                           
  4393 ;; *************** function _WriteLCD *****************
  4394 ;; Defined at:
  4395 ;;		line 158 in file "main.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  word            1    wreg     unsigned char 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  word            1    2[COMRAM] unsigned char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      void 
  4402 ;; Registers used:
  4403 ;;		wreg, status,2, status,0, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0
  4410 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4412 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4413 ;;Total ram usage:        1 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    1
  4416 ;; This function calls:
  4417 ;;		_LCD
  4418 ;; This function is called by:
  4419 ;;		_Data1LCD
  4420 ;;		_Data2LCD
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           	psect	text30
  4425  001B9E                     __ptext30:
  4426                           	opt callstack 0
  4427  001B9E                     _WriteLCD:
  4428                           	opt callstack 28
  4429                           
  4430                           ;incstack = 0
  4431                           ;WriteLCD@word stored from wreg
  4432  001B9E  6E03               	movwf	WriteLCD@word^0,c
  4433  001BA0                     
  4434                           ;main.c: 159:     LATE1 = 1;
  4435  001BA0  828D               	bsf	3981,1,c	;volatile
  4436  001BA2                     
  4437                           ;main.c: 160:     LCD(word >> 4);
  4438  001BA2  3803               	swapf	WriteLCD@word^0,w,c
  4439  001BA4  0B0F               	andlw	15
  4440  001BA6  EC17  F00D         	call	_LCD
  4441                           
  4442                           ;main.c: 161:     LCD(word & 0x0F);
  4443  001BAA  5003               	movf	WriteLCD@word^0,w,c
  4444  001BAC  0B0F               	andlw	15
  4445  001BAE  EC17  F00D         	call	_LCD
  4446  001BB2  0012               	return		;funcret
  4447  001BB4                     __end_of_WriteLCD:
  4448                           	opt callstack 0
  4449                           
  4450 ;; *************** function _SettingsLCD *****************
  4451 ;; Defined at:
  4452 ;;		line 152 in file "main.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  word            1    wreg     unsigned char 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  word            1    2[COMRAM] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      void 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4466 ;;      Params:         0       0       0       0       0       0       0       0       0
  4467 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4469 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4470 ;;Total ram usage:        1 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    1
  4473 ;; This function calls:
  4474 ;;		_LCD
  4475 ;; This function is called by:
  4476 ;;		_settings
  4477 ;;		_Data1LCD
  4478 ;;		_Data2LCD
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           	psect	text31
  4483  001BB4                     __ptext31:
  4484                           	opt callstack 0
  4485  001BB4                     _SettingsLCD:
  4486                           	opt callstack 28
  4487                           
  4488                           ;incstack = 0
  4489                           ;SettingsLCD@word stored from wreg
  4490  001BB4  6E03               	movwf	SettingsLCD@word^0,c
  4491  001BB6                     
  4492                           ;main.c: 153:     LATE1 = 0;
  4493  001BB6  928D               	bcf	3981,1,c	;volatile
  4494  001BB8                     
  4495                           ;main.c: 154:     LCD(word >> 4);
  4496  001BB8  3803               	swapf	SettingsLCD@word^0,w,c
  4497  001BBA  0B0F               	andlw	15
  4498  001BBC  EC17  F00D         	call	_LCD
  4499                           
  4500                           ;main.c: 155:     LCD(word & 0x0F);
  4501  001BC0  5003               	movf	SettingsLCD@word^0,w,c
  4502  001BC2  0B0F               	andlw	15
  4503  001BC4  EC17  F00D         	call	_LCD
  4504  001BC8  0012               	return		;funcret
  4505  001BCA                     __end_of_SettingsLCD:
  4506                           	opt callstack 0
  4507                           
  4508 ;; *************** function _LCD *****************
  4509 ;; Defined at:
  4510 ;;		line 164 in file "main.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  data            1    wreg     unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  data            1    1[COMRAM] unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4524 ;;      Params:         0       0       0       0       0       0       0       0       0
  4525 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4526 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4527 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4528 ;;Total ram usage:        2 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_SettingsLCD
  4534 ;;		_WriteLCD
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text32
  4539  001A2E                     __ptext32:
  4540                           	opt callstack 0
  4541  001A2E                     _LCD:
  4542                           	opt callstack 28
  4543                           
  4544                           ;incstack = 0
  4545                           ;LCD@data stored from wreg
  4546  001A2E  6E02               	movwf	LCD@data^0,c
  4547  001A30                     
  4548                           ;main.c: 165:     LATE0 = 1;
  4549  001A30  808D               	bsf	3981,0,c	;volatile
  4550  001A32                     
  4551                           ;main.c: 166:     _delay((unsigned long)((10)*(8000000/4000.0)));
  4552  001A32  0E1A               	movlw	26
  4553  001A34  6E01               	movwf	??_LCD^0,c
  4554  001A36  0EF8               	movlw	248
  4555  001A38                     u1697:
  4556  001A38  2EE8               	decfsz	wreg,f,c
  4557  001A3A  D7FE               	bra	u1697
  4558  001A3C  2E01               	decfsz	??_LCD^0,f,c
  4559  001A3E  D7FC               	bra	u1697
  4560  001A40  D000               	nop2	
  4561  001A42                     
  4562                           ;main.c: 167:     LATD = data;
  4563  001A42  C002  FF8C         	movff	LCD@data,3980	;volatile
  4564  001A46                     
  4565                           ;main.c: 168:     _delay((unsigned long)((10)*(8000000/4000.0)));
  4566  001A46  0E1A               	movlw	26
  4567  001A48  6E01               	movwf	??_LCD^0,c
  4568  001A4A  0EF8               	movlw	248
  4569  001A4C                     u1707:
  4570  001A4C  2EE8               	decfsz	wreg,f,c
  4571  001A4E  D7FE               	bra	u1707
  4572  001A50  2E01               	decfsz	??_LCD^0,f,c
  4573  001A52  D7FC               	bra	u1707
  4574  001A54  D000               	nop2	
  4575  001A56                     
  4576                           ;main.c: 169:     LATE0 = 0;
  4577  001A56  908D               	bcf	3981,0,c	;volatile
  4578  001A58                     
  4579                           ;main.c: 170:     _delay((unsigned long)((10)*(8000000/4000.0)));
  4580  001A58  0E1A               	movlw	26
  4581  001A5A  6E01               	movwf	??_LCD^0,c
  4582  001A5C  0EF8               	movlw	248
  4583  001A5E                     u1717:
  4584  001A5E  2EE8               	decfsz	wreg,f,c
  4585  001A60  D7FE               	bra	u1717
  4586  001A62  2E01               	decfsz	??_LCD^0,f,c
  4587  001A64  D7FC               	bra	u1717
  4588  001A66  D000               	nop2	
  4589  001A68  0012               	return		;funcret
  4590  001A6A                     __end_of_LCD:
  4591                           	opt callstack 0
  4592                           
  4593                           	psect	rparam
  4594  0000                     tosu	equ	0xFFF
  4595                           tosh	equ	0xFFE
  4596                           tosl	equ	0xFFD
  4597                           stkptr	equ	0xFFC
  4598                           pclatu	equ	0xFFB
  4599                           pclath	equ	0xFFA
  4600                           pcl	equ	0xFF9
  4601                           tblptru	equ	0xFF8
  4602                           tblptrh	equ	0xFF7
  4603                           tblptrl	equ	0xFF6
  4604                           tablat	equ	0xFF5
  4605                           prodh	equ	0xFF4
  4606                           prodl	equ	0xFF3
  4607                           indf0	equ	0xFEF
  4608                           postinc0	equ	0xFEE
  4609                           postdec0	equ	0xFED
  4610                           preinc0	equ	0xFEC
  4611                           plusw0	equ	0xFEB
  4612                           fsr0h	equ	0xFEA
  4613                           fsr0l	equ	0xFE9
  4614                           wreg	equ	0xFE8
  4615                           indf1	equ	0xFE7
  4616                           postinc1	equ	0xFE6
  4617                           postdec1	equ	0xFE5
  4618                           preinc1	equ	0xFE4
  4619                           plusw1	equ	0xFE3
  4620                           fsr1h	equ	0xFE2
  4621                           fsr1l	equ	0xFE1
  4622                           bsr	equ	0xFE0
  4623                           indf2	equ	0xFDF
  4624                           postinc2	equ	0xFDE
  4625                           postdec2	equ	0xFDD
  4626                           preinc2	equ	0xFDC
  4627                           plusw2	equ	0xFDB
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        14
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     30     115
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), texto2(BANK0[20]), texto1(BANK0[8]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), texto2(BANK0[20]), texto1(BANK0[8]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> texto2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> texto2(BANK0[20]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S767_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> texto2(BANK0[20]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> texto2(BANK0[20]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    ReadI2C@Data	PTR unsigned char  size(2) Largest target is 9
		 -> dataSaved(BANK0[9]), 

    WriteI2C@Data	PTR unsigned char  size(2) Largest target is 6
		 -> name(BANK0[6]), 


Critical Paths under _main in COMRAM

    _settings->_SettingsLCD
    _WriteI2C->_SendI2C
    _ReadI2C->_ReceiveI2C
    _StopI2C->_ReadyI2C
    _StartI2C->_ReadyI2C
    _SendI2C->_ReadyI2C
    _RepeatedStartI2C->_ReadyI2C
    _ReceiveI2C->_ReadyI2C
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _Data1LCD->_strlen
    _WriteLCD->_LCD
    _SettingsLCD->_LCD

Critical Paths under _main in BANK0

    _Data2LCD->_sprintf
    _sprintf->_vfprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   17756
                           _Data1LCD
                           _Data2LCD
                            _ReadI2C
                           _WriteI2C
                           _settings
 ---------------------------------------------------------------------------------
 (1) _settings                                             0     0      0      66
                        _SettingsLCD
 ---------------------------------------------------------------------------------
 (1) _WriteI2C                                             8     3      5     567
                                              2 COMRAM     8     3      5
                            _SendI2C
                           _StartI2C
                            _StopI2C
 ---------------------------------------------------------------------------------
 (1) _ReadI2C                                              8     3      5     450
                                              3 COMRAM     8     3      5
                         _ReceiveI2C
                   _RepeatedStartI2C
                            _SendI2C
                           _StartI2C
                            _StopI2C
 ---------------------------------------------------------------------------------
 (2) _StopI2C                                              0     0      0       0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _StartI2C                                             0     0      0       0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _SendI2C                                              1     1      0      22
                                              1 COMRAM     1     1      0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _RepeatedStartI2C                                     0     0      0       0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _ReceiveI2C                                           2     2      0      45
                                              1 COMRAM     2     2      0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (3) _ReadyI2C                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Data2LCD                                             0     0      0   16223
                        _SettingsLCD
                           _WriteLCD
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             24    10     14   15773
                                              6 BANK0     24    10     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   15418
                                             93 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           44    38      6   15056
                                             66 COMRAM    27    21      6
                               _ctoa
                               _dtoa
                              _fputc
                               _xtoa
 ---------------------------------------------------------------------------------
 (5) _xtoa                                                39    28     11    4871
                                             27 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (7) _islower                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4966
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 7     4      3    3537
                                             27 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3317
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _Data1LCD                                             0     0      0     450
                        _SettingsLCD
                           _WriteLCD
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     318
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _WriteLCD                                             1     1      0      66
                                              2 COMRAM     1     1      0
                                _LCD
 ---------------------------------------------------------------------------------
 (2) _SettingsLCD                                          1     1      0      66
                                              2 COMRAM     1     1      0
                                _LCD
 ---------------------------------------------------------------------------------
 (3) _LCD                                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Data1LCD
     _SettingsLCD
       _LCD
     _WriteLCD
       _LCD
     _strlen
   _Data2LCD
     _SettingsLCD
       _LCD
     _WriteLCD
       _LCD
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
             _toupper
               _islower
     _strlen
   _ReadI2C
     _ReceiveI2C
       _ReadyI2C
     _RepeatedStartI2C
       _ReadyI2C
     _SendI2C
       _ReadyI2C
     _StartI2C
       _ReadyI2C
     _StopI2C
       _ReadyI2C
   _WriteI2C
     _SendI2C
       _ReadyI2C
     _StartI2C
       _ReadyI2C
     _StopI2C
       _ReadyI2C
   _settings
     _SettingsLCD
       _LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1E      73       5       71.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D2      20        0.0%
DATA                 0      0      D2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Dec 09 17:51:43 2020

                        _i 0068                         l93 196C                         l87 175C  
                       l88 175C                         l99 1700                ReadI2C@Data 0005  
                      l102 1BF2                        l111 1BE2                        l200 0BBC  
                      l202 0BC4                        l114 1BEA                        l122 1608  
                      l131 1BC8                        l220 0DFC                        l108 1B9C  
                      l125 1BFA                        l134 1BB2                        l143 1920  
                      l128 1B76                        l137 1A68                        l225 0E36  
                      l250 10D4                        l234 0ED2                        l227 0E3E  
                      l149 168E                        l182 14D2                        l255 0B1A  
                      l248 1070                        l185 1514                        l194 187C  
                      l187 1550                        l267 17BC                        l268 17C4  
                      l385 125C                        l398 13C0                        l952 1A2C  
                      l946 19E8                        l973 148A                        l981 19B0  
                      l949 19F0                        l958 1B12                        l991 1BFC  
                      l988 18CE                        l997 1B48                        _LCD 1A2E  
                      _PEN 007E2A                        u900 1AD4                        _SEN 007E28  
                      u901 1ACE                        u910 1AD6                        u840 13D4  
                      u920 149C                        u841 13D0                        u921 1498  
                      u850 13E6                        u930 14BE                        u851 13E2  
                      u931 14BA                        u860 140E                        u940 1514  
                      u861 140A                        u941 1510                        u870 1444  
                      u950 1524                        u871 1440                        u951 1520  
                      u880 1B3C                        u960 19CC                        u881 1B38  
                      u961 19C8                        u890 19B0                        u970 1B0C  
                      u891 19AC                        u971 1B06                        u980 1B0E  
                      u990 1A26                        u991 1A20                        _abs 19B2  
                      _pad 148C                        wreg 000FE8               ReadI2C@bytes 0007  
             __CFG_LVP$OFF 000000                       ?_LCD 0001               __CFG_WDT$OFF 000000  
                     l1002 181A                       l1013 1ADA                       l1007 1822  
                     l2000 1960                       l2010 18F6                       l2002 1966  
                     ?_abs 0013                       l2012 18FC                       l2004 18D0  
                     l2020 16BE                       l2006 18D6                       l2030 1554  
                     l2022 16C2                       l2014 1692                       l2008 18E4  
                     l2040 15C6                       l2032 1570                       l2024 16C8  
                     l2016 16A2                       l2050 160A                       l2042 15CA  
                     l2034 157E                       l2026 16E6                       l2018 16B0  
                     l2060 166A                       l2052 1610                       l2036 15A2  
                     l2044 15D0                       l2028 16EA                       l2054 1644  
                     l2046 15EE                       l2038 15B6                       l2070 173E  
                     l2062 1702                       l1600 1538                       l2056 1652  
                     l2048 15F2                       l2072 1758                       l2064 1706  
                     l2058 1664                       l2066 170A                       l1700 1380  
                     l1604 19B2                       l1612 19F2                       l1620 17FC  
                     l2068 1724                       l1550 13E6                       l1710 1844  
                     l1630 10E8                       l1702 13A0                       l1606 19CC  
                     l1622 180E                       l1560 1B14                       l1552 13F0  
                     l1712 1850                       l1640 113E                       l1632 1108  
                     l1720 0B1C                       l1608 1ADC                       l1616 17C6  
                     l1800 0E92                       l1562 1B20                       l1554 140E  
                     l1546 13C2                       l1570 196E                       l1714 1854  
                     l1706 1824                       l1650 1192                       l1642 114A  
                     l1634 110C                       l1626 10D6                       l1730 0B96  
                     l1722 0B3C                       l1810 0F06                       l1802 0E9A  
                     l1564 1B24                       l1556 1444                       l1548 13D4  
                     l1572 197A                       l1716 1858                       l1708 1838  
                     l1660 1206                       l1652 11A4                       l1644 1168  
                     l1636 111A                       l1628 10DA                       l1740 0BF2  
                     l1732 0BB0                       l1724 0B64                       l1812 0F18  
                     l1820 0F78                       l1804 0EB6                       l1900 0AD8  
                     l1566 1B3C                       l1574 198C                       l1590 14CA  
                     l1582 148C                       l1654 11D2                       l1646 1170  
                     l1662 120C                       l1638 113A                       l1670 125E  
                     l1750 0C90                       l1742 0BFA                       l1734 0BCC  
                     l1726 0B84                       l1830 100E                       l1822 0F88  
                     l1806 0EC6                       l1920 1A32                       l1576 1990  
                     l1592 14DE                       l1584 149C                       l1664 121C  
                     l1656 11F2                       l1648 1184                       l1680 12A2  
                     l1672 1262                       l1760 0D4C                       l1752 0C96  
                     l1744 0C02                       l1736 0BDE                       l1728 0B94  
                     l1840 1086                       l1832 102C                       l1824 0F8E  
                     l1816 0F52                       l1904 0AE4                       l1912 1B78  
                     l1922 1A42                       l1594 14F2                       l1586 14B0  
                     l1666 123C                       l1658 11F4                       l1690 130A  
                     l1682 12C2                       l1674 1270                       l1770 0D9E  
                     l1762 0D66                       l1746 0C08                       l1754 0CFA  
                     l1738 0BEC                       l1578 1AA4                       l1842 1096  
                     l1834 1046                       l1826 0F94                       l1818 0F64  
                     l1906 0B08                       l1850 0836                       l1930 1764  
                     l1914 1B78                       l1924 1A46                       l1940 1BB8  
                     l1596 14F6                       l1588 14BE                       l1692 1338  
                     l1684 12E0                       l1676 1290                       l1772 0DB0  
                     l1756 0D14                       l1764 0D76                       l1748 0C8A  
                     l1844 10AC                       l1836 1060                       l1828 0FF2  
                     l1860 08B0                       l1852 0844                       l1932 176C  
                     l1916 1B8E                       l1926 1A56                       l1918 1A30  
                     l1598 1524                       l1694 1358                       l1686 12E8  
                     l1678 1294                       l1774 0DBC                       l1766 0D88  
                     l1758 0D32                       l1838 1080                       l1790 0E54  
                     l1782 0DFE                       l1870 095C                       l1854 0856  
                     l1934 177A                       l1942 1BEC                       l1950 1BE4  
                     l1928 1A58                       l1696 136A                       l1688 12FC  
                     l1776 0DC4                       l1768 0D98                       l1792 0E5C  
                     l1784 0E0E                       l1880 09F2                       l1864 08CC  
                     l1856 085A                       l1848 0812                       l1936 17A0  
                     l1960 1B50                       l1944 1BF0                       l1952 1BE8  
                     l1938 1BB6                       l1698 1370                       l1778 0DD4  
                     l1794 0E7C                       l1786 0E10                       l1890 0A9C  
                     l1882 0A00                       l1874 0994                       l1866 08F0  
                     l1858 087E                       l1962 1B56                       l1954 1BF4  
                     l1946 1BDA                       l1972 1BA0                       l1796 0E84  
                     l1788 0E2A                       l1892 0AAA                       l1884 0A3C  
                     l1876 09B8                       l1868 0914                       l1980 1898  
                     l1964 1B5E                       l1956 1BF8                       l1948 1BDE  
                     l1974 1BA2                       l1798 0E8C                       l1894 0ABE  
                     l1878 09DC                       l1982 18A0                       l1966 1B72  
                     l1958 1B4C                       l1990 192A                       ?_pad 0011  
                     l1888 0A78                       l1984 18BC                       l1976 187E  
                     l1968 1B74                       l1992 192C                       l1898 0ACA  
                     l1978 1890                       l1994 194E                       l1996 1954  
                     l1988 1922                       l1998 195A                       STR_1 0801  
                     u1000 1A28                       u1010 17F6                       u1011 17F0  
                     u1100 121C                       u1020 17F8                       u1101 1218  
                     u1110 1270                       u1030 180E                       u1111 126C  
                     u1031 180A                       u1040 10E8                       u1120 12A2  
                     u1200 0B64                       u1041 10E4                       u1121 129E  
                     u1201 0B60                       u1050 111A                       u1130 12E0  
                     u1210 0B94                       u1051 1116                       u1131 12DC  
                     u1211 0B90                       u1140 130A                       u1300 0D88  
                     u1220 0BB0                       u1061 1144                       u1141 1306  
                     u1301 0D84                       u1221 0BAC                       u1070 1168  
                     u1150 1338                       u1310 0D98                       u1230 0BDE  
                     u1071 1164                       u1151 1334                       u1311 0D94  
                     u1231 0BDA                       u1080 1192                       u1160 1380  
                     u1320 0DB0                       u1240 0BEC                       u1400 0F4C  
                     u1081 118E                       u1161 137C                       u1321 0DAC  
                     u1241 0BE8                       u1401 0F46                       u1170 1838  
                     u1090 11D2                       u1250 0D14                       u1410 0F4E  
                     u1330 0E0E                       u1171 1834                       u1091 11CE  
                     u1251 0D10                       u1331 0E0A                       u1260 0D32  
                     u1180 0B4C                       u1420 0F64                       u1340 0E2A  
                     u1500 0836                       u1261 0D2E                       u1181 0B46  
                     u1421 0F60                       u1341 0E26                       u1501 0832  
                     u1270 0D4C                       u1190 0B4E                       u1430 0FCC  
                     u1350 0E54                       u1510 087E                       u1271 0D48  
                     u1351 0E50                       u1511 087A                       u1280 0D66  
                     u1440 100E                       u1360 0EB6                       u1520 08F0  
                     u1600 1B70                       _LATD 000F8C                       u1281 0D62  
                     u1441 100A                       u1361 0EB2                       u1521 08EC  
                     u1601 1B6A                       _LATE 000F8D                       u1290 0D76  
                     u1450 102C                       u1370 0F00                       u1530 0914  
                     u1291 0D72                       u1451 1028                       u1435 0FBA  
                     u1371 0EFA                       u1531 0910                       u1620 1920  
                     u1460 1046                       u1380 0F02                       u1540 09B8  
                     u1621 191C                       u1461 1042                       u1541 09B4  
                     u1470 1060                       u1390 0F18                       u1550 09DC  
                     u1630 16E6                       u1471 105C                       u1391 0F14  
                     u1551 09D8                       u1615 1B72                       u1631 16E2  
                     u1480 1070                       u1560 0A9C                       u1640 15A2  
                     u1481 106C                       u1561 0A98                       u1641 159E  
                     u1490 1080                       u1570 1B8E                       u1650 15EE  
                     u1707 1A4C                       u1491 107C                       u1571 1B8A  
                     u1651 15EA                       u1660 168E                       u1580 1B9C  
                     u1717 1A5E                       u1661 168A                       u1581 1B98  
                     u1590 17BC                       u1591 17B8                       u1677 16F4  
                     u1687 15FC                       u1697 1A38                       _RCEN 007E2B  
                     _RSEN 007E29                       abs@a 0013                       _dbuf 006A  
                     _ctoa 1824                       _main 1702                       _dtoa 0B1C  
                     _name 00CD                       _prec 0064                       _nout 0060  
                     pad@i 0018                       pad@p 0015                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     pad@w 001A                       fsr2l 000FD9                       _xtoa 0DFE  
                     start 0000                _toupper$830 000D               ___param_bank 000000  
          __end_of_ReadI2C 160A                      ??_LCD 0001            __end_of_SendI2C 1BE4  
                    ??_abs 0015                      ??_pad 0017            __end_of_StopI2C 1BEC  
          __end_of___aodiv 125E                      ?_ctoa 001C                      ?_main 0001  
                    ?_dtoa 001C            __end_of___aomod 13C2                      _ACKEN 007E2C  
                    _ACKDT 007E2D                      ?_xtoa 001C                      _LATE0 007C68  
                    _LATE1 007C69               vfpfcnvrt@fmt 0045               vfpfcnvrt@llu 0055  
                    _TRISD 000F95                      _TRISE 000F96             ReadI2C@Address 000B  
                    _flags 0066                      _fputc 13C2            __end_of_isalpha 1A2E  
                    _fputs 196E                      pad@fp 0011                      _width 0062  
                    ctoa@c 001E                      _putch 1BFC                      ctoa@w 001F  
                    dtoa@d 001E                      dtoa@i 003E                      dtoa@n 0036  
                    dtoa@p 0030                      dtoa@s 0034                      dtoa@w 0032  
          __end_of_islower 1ADC           __end_of_Data1LCD 1922           __end_of_Data2LCD 1690  
          __end_of_isupper 1B14                      tablat 000FF5                      status 000FD8  
          __end_of_sprintf 18D0                      xtoa@c 0041                      xtoa@d 001E  
                    xtoa@i 003F                      xtoa@n 0037                      xtoa@p 0033  
                    xtoa@w 0035                      xtoa@x 0026            __end_of_toupper 1824  
        ?_RepeatedStartI2C 0001            __initialization 1A6A               __end_of_ctoa 187E  
             __end_of_main 1764               __end_of_dtoa 0DFE         ??_RepeatedStartI2C 0002  
             __end_of_xtoa 10D6           __end_of_ReadyI2C 1B9E                     ??_ctoa 001F  
                   ??_main 0060                     ??_dtoa 0026                 _ReceiveI2C 1B4A  
                   ??_xtoa 0027              __activetblptr 000001                SendI2C@data 0002  
         __end_of_StartI2C 1BF4                     _ADCON1 000FC1                     ?_fputc 0001  
                   ?_fputs 000A           __end_of_WriteI2C 1702                     ?_putch 0001  
         __end_of_WriteLCD 1BB4                     _OSCCON 000FD3                     _SSPADD 000FC8  
                   _SSPBUF 000FC9                  ??_ReadI2C 0009                  ??_SendI2C 0002  
             vfprintf@cfmt 005E                  ??_StopI2C 0002                  ??___aodiv 0011  
                ??___aomod 0011                     clear_0 1A90                     _texto1 00C5  
                   _texto2 008A                     pad@buf 0013               WriteI2C@Data 0004  
                   ctoa@fp 001C                     dtoa@fp 001C                     _strlen 1B14  
                   fputc@c 0001                     fputs@c 000E                     fputs@i 000F  
                   fputs@s 000A                  ??_isalpha 0003            ReadI2C@Register 0004  
                ??_islower 0003               __mediumconst 0000              ??_SettingsLCD 0003  
         __end_of_settings 196E                     tblptrh 000FF7                  ??_isupper 0003  
                   tblptrl 000FF6                     tblptru 000FF8                     putch@c 0001  
         __end_of_vfprintf 17C6                  ??_sprintf 0060                     xtoa@fp 001C  
                ??_toupper 0009                 __accesstop 0060    __end_of__initialization 1A96  
             WriteLCD@word 0003              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 1BCA              __end_of_fputc 148C              __end_of_fputs 19B2  
            __end_of_putch 1BFE                  ?_Data1LCD 0001                  ?_Data2LCD 0001  
              ?_ReceiveI2C 0001                    ??_fputc 0005                    ??_fputs 000E  
                  ??_putch 0001                    LCD@data 0002                 __pbssBANK0 0060  
      __end_of_SettingsLCD 1BCA                  ?_ReadyI2C 0001                  ?_StartI2C 0001  
                ?_WriteI2C 0003                  ?_WriteLCD 0001                 ??_Data1LCD 0005  
               ??_Data2LCD 0060                    ?_strlen 0001         __size_of_vfpfcnvrt 030A  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
               ??_ReadyI2C 0001                    _ReadI2C 1552        __size_of_ReceiveI2C 002E  
                  _SendI2C 1BD8                    __Hparam 0000                    __Lparam 0000  
                  _StopI2C 1BE4                  ?_settings 0001                    ___aodiv 10D6  
               ??_StartI2C 0002                    ___aomod 125E                  ?_vfprintf 00A7  
             __psmallconst 0800                    __pcinit 1A6A                 ??_WriteI2C 0008  
               ??_WriteLCD 0003                    __ramtop 0800                    __ptext0 1702  
                  __ptext1 1922                    __ptext2 1690                    __ptext3 1552  
                  __ptext4 1BE4                    __ptext5 1BEC                    __ptext6 1BD8  
                  __ptext7 1BF4                    __ptext8 1B4A                    __ptext9 1B78  
             __size_of_LCD 003C            __size_of_strlen 0036               __size_of_abs 0040  
             __size_of_pad 00C6                    _isalpha 19F2  __size_of_RepeatedStartI2C 0008  
                  _islower 1AA4                    _isupper 1ADC                _SettingsLCD 1BB4  
                  _sprintf 187E                    _toupper 17C6       end_of_initialization 1A96  
            WriteI2C@bytes 0006                    fputc@fp 0003                    fputs@fp 000C  
        __end_of_vfpfcnvrt 0B1C                    postdec1 000FE5                    postdec2 000FDD  
               ??_settings 0004                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE                 ??_vfprintf 005E                    strlen@a 0003  
                  strlen@s 0001                  _TRISBbits 000F93             ReceiveI2C@flag 0002  
         WriteI2C@Register 0003                vfpfcnvrt@ap 0047                vfpfcnvrt@fp 0043  
              vfpfcnvrt@ll 004D               ??_ReceiveI2C 0002             __end_of_strlen 1B4A  
        __size_of_Data1LCD 0052          __size_of_Data2LCD 0086        start_initialization 1A6A  
              __end_of_LCD 1A6A                __end_of_abs 19F2                __end_of_pad 1552  
        __size_of_ReadyI2C 0026         __end_of_ReceiveI2C 1B78                vfprintf@fmt 00A9  
              __pdataBANK0 00C5          __size_of_StartI2C 0008                   ??_strlen 0003  
        __size_of_WriteI2C 0072          __size_of_WriteLCD 0016           _RepeatedStartI2C 1BF4  
            __pcstackBANK0 00A7           ___aodiv@dividend 0001                  _dataSaved 009E  
                 ?_ReadI2C 0004                   ?_SendI2C 0001                   ?_StopI2C 0001  
                 ?___aodiv 0001                   ?___aomod 0001           ___aodiv@quotient 0013  
        __size_of_settings 004C          __size_of_vfprintf 0062                __smallconst 0800  
                 ?_isalpha 0001                   ?_islower 0001                   ?_isupper 0001  
             ?_SettingsLCD 0001                   ?_sprintf 00AD             __size_of_fputc 00CA  
           __size_of_fputs 0044                   ?_toupper 0007             __size_of_putch 0002  
                _vfpfcnvrt 0812            WriteI2C@Address 000A                   _Data1LCD 18D0  
                 _Data2LCD 160A                 vfpfcnvrt@c 005D                  copy_data0 1A7E  
                 _ReadyI2C 1B78           __size_of_ReadI2C 00B8                   __Hrparam 0000  
         __size_of_SendI2C 000C                 vfprintf@ap 00AB                   __Lrparam 0000  
               vfprintf@fp 00A7               __Lsmallconst 0800                   _StartI2C 1BEC  
         __size_of_StopI2C 0008           __size_of___aodiv 0188           __size_of___aomod 0164  
               ?_vfpfcnvrt 0043                   _WriteI2C 1690                   _WriteLCD 1B9E  
          ___aodiv@divisor 0009            ___aodiv@counter 0011                 sprintf@fmt 00AF  
         __size_of_isalpha 003C                   _dtoa$276 002E           __size_of_islower 0038  
                 __ptext10 160A                   __ptext11 187E                   __ptext20 19B2  
                 __ptext12 1764                   __ptext21 125E                   __ptext13 0812  
                 __ptext30 1B9E                   __ptext22 10D6                   __ptext14 0DFE  
                 __ptext31 1BB4                   __ptext23 1824                   __ptext15 17C6  
                 __ptext32 1A2E                   __ptext24 148C                   __ptext16 1AA4  
                 __ptext25 196E                   __ptext17 1ADC                   __ptext26 13C2  
                 __ptext18 19F2                   __ptext27 1BFC                   __ptext19 0B1C  
                 __ptext28 18D0                   __ptext29 1B14           __size_of_isupper 0038  
         __size_of_sprintf 0052           __size_of_toupper 005E              __size_of_ctoa 005A  
            __size_of_main 0062              __size_of_dtoa 02E2              __size_of_xtoa 02D8  
 __end_of_RepeatedStartI2C 1BFC                   _settings 1922                   _xtoa$286 002F  
                 _xtoa$287 0031                   _vfprintf 1764           ___aomod@dividend 0001  
                 isalpha@c 0001       __size_of_SettingsLCD 0016                  sprintf@ap 00BD  
                 islower@c 0001                   isupper@c 0001            ___aomod@divisor 0009  
              ??_vfpfcnvrt 0049            ___aomod@counter 0011                   sprintf@f 00BF  
      __CFG_FOSC$INTOSC_HS 000000                   sprintf@s 00AD                   toupper@c 0007  
          SettingsLCD@word 0003               ___aodiv@sign 0012               ___aomod@sign 0012  
         ReceiveI2C@buffer 0003  
