

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Jul 19 22:07:49 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41  0000                     
    42                           ; Version 2.10
    43                           ; Generated 31/07/2019 GMT
    44                           ; 
    45                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4550 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataBANK0
    78  001634                     __pidataBANK0:
    79                           	opt callstack 0
    80                           
    81                           ;initializer for _days
    82  001634  53                 	db	83
    83  001635  4D                 	db	77
    84  001636  54                 	db	84
    85  001637  57                 	db	87
    86  001638  74                 	db	116
    87  001639  46                 	db	70
    88  00163A  73                 	db	115
    89                           
    90                           ;initializer for _name
    91  00163B  66                 	db	102
    92  00163C  41                 	db	65
    93  00163D  62                 	db	98
    94  00163E  49                 	db	73
    95  00163F  61                 	db	97
    96  001640  4E                 	db	78
    97                           
    98                           ;initializer for _AM_PM
    99  001641  05                 	db	5
   100                           
   101                           ;initializer for _Clock_type
   102  001642  06                 	db	6
   103                           
   104                           ;initializer for _text9
   105  001643  53                 	db	83
   106  001644  61                 	db	97
   107  001645  74                 	db	116
   108  001646  00                 	db	0
   109  001647  00                 	db	0
   110                           
   111                           ;initializer for _text8
   112  001648  46                 	db	70
   113  001649  72                 	db	114
   114  00164A  69                 	db	105
   115  00164B  00                 	db	0
   116  00164C  00                 	db	0
   117                           
   118                           ;initializer for _text7
   119  00164D  54                 	db	84
   120  00164E  68                 	db	104
   121  00164F  75                 	db	117
   122  001650  00                 	db	0
   123  001651  00                 	db	0
   124                           
   125                           ;initializer for _text6
   126  001652  57                 	db	87
   127  001653  65                 	db	101
   128  001654  64                 	db	100
   129  001655  00                 	db	0
   130  001656  00                 	db	0
   131                           
   132                           ;initializer for _text5
   133  001657  54                 	db	84
   134  001658  75                 	db	117
   135  001659  65                 	db	101
   136  00165A  00                 	db	0
   137  00165B  00                 	db	0
   138                           
   139                           ;initializer for _text4
   140  00165C  4D                 	db	77
   141  00165D  6F                 	db	111
   142  00165E  6E                 	db	110
   143  00165F  00                 	db	0
   144  001660  00                 	db	0
   145                           
   146                           ;initializer for _text3
   147  001661  53                 	db	83
   148  001662  75                 	db	117
   149  001663  6E                 	db	110
   150  001664  00                 	db	0
   151  001665  00                 	db	0
   152                           
   153                           ;initializer for _text2
   154  001666  41                 	db	65
   155  001667  4D                 	db	77
   156  001668  00                 	db	0
   157  001669  00                 	db	0
   158  00166A  00                 	db	0
   159                           
   160                           ;initializer for _text1
   161  00166B  50                 	db	80
   162  00166C  4D                 	db	77
   163  00166D  00                 	db	0
   164  00166E  00                 	db	0
   165  00166F  00                 	db	0
   166                           
   167                           ;initializer for _calendario
   168  001670  01                 	db	1
   169  001671  20                 	db	32
   170  001672  02                 	db	2
   171  001673  17                 	db	23
   172                           
   173                           ;initializer for _hora
   174  001674  50                 	db	80
   175  001675  59                 	db	89
   176  001676  71                 	db	113
   177  0000                     _LATEbits	set	3981
   178  0000                     _SSPBUF	set	4041
   179  0000                     _LATE	set	3981
   180  0000                     _TRISE	set	3990
   181  0000                     _LATD	set	3980
   182  0000                     _TRISD	set	3989
   183  0000                     _SSPADD	set	4040
   184  0000                     _SSPCON2	set	4037
   185  0000                     _SSPCON1	set	4038
   186  0000                     _SSPSTAT	set	4039
   187  0000                     _TRISBbits	set	3987
   188  0000                     _ADCON1	set	4033
   189  0000                     _OSCCON	set	4051
   190  0000                     _ACKEN	set	32300
   191  0000                     _ACKDT	set	32301
   192  0000                     _RCEN	set	32299
   193  0000                     _RSEN	set	32297
   194  0000                     _PEN	set	32298
   195  0000                     _SEN	set	32296
   196                           
   197                           	psect	smallconst
   198  000800                     __psmallconst:
   199                           	opt callstack 0
   200  000800  00                 	db	0
   201  000801                     STR_3:
   202  000801  43                 	db	67	;'C'
   203  000802  61                 	db	97	;'a'
   204  000803  6C                 	db	108	;'l'
   205  000804  3A                 	db	58	;':'
   206  000805  25                 	db	37
   207  000806  78                 	db	120	;'x'
   208  000807  2F                 	db	47
   209  000808  25                 	db	37
   210  000809  78                 	db	120	;'x'
   211  00080A  2F                 	db	47
   212  00080B  25                 	db	37
   213  00080C  78                 	db	120	;'x'
   214  00080D  00                 	db	0
   215  00080E                     STR_1:
   216  00080E  48                 	db	72	;'H'
   217  00080F  6F                 	db	111	;'o'
   218  000810  72                 	db	114	;'r'
   219  000811  3A                 	db	58	;':'
   220  000812  25                 	db	37
   221  000813  78                 	db	120	;'x'
   222  000814  3A                 	db	58	;':'
   223  000815  25                 	db	37
   224  000816  78                 	db	120	;'x'
   225  000817  3A                 	db	58	;':'
   226  000818  25                 	db	37
   227  000819  78                 	db	120	;'x'
   228  00081A  00                 	db	0
   229  0000                     
   230                           ; #config settings
   231  00081B  00                 	db	0	; dummy byte at the end
   232  0000                     
   233                           	psect	cinit
   234  001678                     __pcinit:
   235                           	opt callstack 0
   236  001678                     start_initialization:
   237                           	opt callstack 0
   238  001678                     __initialization:
   239                           	opt callstack 0
   240                           
   241                           ; Initialize objects allocated to BANK0 (67 bytes)
   242                           ; load TBLPTR registers with __pidataBANK0
   243  001678  0E34               	movlw	low __pidataBANK0
   244  00167A  6EF6               	movwf	tblptrl,c
   245  00167C  0E16               	movlw	high __pidataBANK0
   246  00167E  6EF7               	movwf	tblptrh,c
   247  001680  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   248  001682  6EF8               	movwf	tblptru,c
   249  001684  EE00  F060         	lfsr	0,__pdataBANK0
   250  001688  EE10 F043          	lfsr	1,67
   251  00168C                     copy_data0:
   252  00168C  0009               	tblrd		*+
   253  00168E  CFF5 FFEE          	movff	tablat,postinc0
   254  001692  50E5               	movf	postdec1,w,c
   255  001694  50E1               	movf	fsr1l,w,c
   256  001696  E1FA               	bnz	copy_data0
   257                           
   258                           ; Clear objects allocated to BANK1 (52 bytes)
   259  001698  EE01  F000         	lfsr	0,__pbssBANK1
   260  00169C  0E34               	movlw	52
   261  00169E                     clear_0:
   262  00169E  6AEE               	clrf	postinc0,c
   263  0016A0  06E8               	decf	wreg,f,c
   264  0016A2  E1FD               	bnz	clear_0
   265                           
   266                           ; Clear objects allocated to BANK0 (61 bytes)
   267  0016A4  EE00  F0A3         	lfsr	0,__pbssBANK0
   268  0016A8  0E3D               	movlw	61
   269  0016AA                     clear_1:
   270  0016AA  6AEE               	clrf	postinc0,c
   271  0016AC  06E8               	decf	wreg,f,c
   272  0016AE  E1FD               	bnz	clear_1
   273  0016B0                     end_of_initialization:
   274                           	opt callstack 0
   275  0016B0                     __end_of__initialization:
   276                           	opt callstack 0
   277  0016B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   278  0016B2  6EF8               	movwf	tblptru,c
   279  0016B4  0100               	movlb	0
   280  0016B6  EF0E  F004         	goto	_main	;jump to C main() function
   281                           
   282                           	psect	bssBANK0
   283  0000A3                     __pbssBANK0:
   284                           	opt callstack 0
   285  0000A3                     _nout:
   286                           	opt callstack 0
   287  0000A3                     	ds	2
   288  0000A5                     _width:
   289                           	opt callstack 0
   290  0000A5                     	ds	2
   291  0000A7                     _prec:
   292                           	opt callstack 0
   293  0000A7                     	ds	2
   294  0000A9                     _flags:
   295                           	opt callstack 0
   296  0000A9                     	ds	2
   297  0000AB                     _k:
   298                           	opt callstack 0
   299  0000AB                     	ds	2
   300  0000AD                     _z:
   301                           	opt callstack 0
   302  0000AD                     	ds	2
   303  0000AF                     _i:
   304                           	opt callstack 0
   305  0000AF                     	ds	2
   306  0000B1                     _dma:
   307                           	opt callstack 0
   308  0000B1                     	ds	20
   309  0000C5                     _smh:
   310                           	opt callstack 0
   311  0000C5                     	ds	20
   312  0000D9                     _DatosCalendario:
   313                           	opt callstack 0
   314  0000D9                     	ds	4
   315  0000DD                     _DatosHora:
   316                           	opt callstack 0
   317  0000DD                     	ds	3
   318                           
   319                           	psect	dataBANK0
   320  000060                     __pdataBANK0:
   321                           	opt callstack 0
   322  000060                     _days:
   323                           	opt callstack 0
   324  000060                     	ds	7
   325  000067                     _name:
   326                           	opt callstack 0
   327  000067                     	ds	6
   328  00006D                     _AM_PM:
   329                           	opt callstack 0
   330  00006D                     	ds	1
   331  00006E                     _Clock_type:
   332                           	opt callstack 0
   333  00006E                     	ds	1
   334  00006F                     _text9:
   335                           	opt callstack 0
   336  00006F                     	ds	5
   337  000074                     _text8:
   338                           	opt callstack 0
   339  000074                     	ds	5
   340  000079                     _text7:
   341                           	opt callstack 0
   342  000079                     	ds	5
   343  00007E                     _text6:
   344                           	opt callstack 0
   345  00007E                     	ds	5
   346  000083                     _text5:
   347                           	opt callstack 0
   348  000083                     	ds	5
   349  000088                     _text4:
   350                           	opt callstack 0
   351  000088                     	ds	5
   352  00008D                     _text3:
   353                           	opt callstack 0
   354  00008D                     	ds	5
   355  000092                     _text2:
   356                           	opt callstack 0
   357  000092                     	ds	5
   358  000097                     _text1:
   359                           	opt callstack 0
   360  000097                     	ds	5
   361  00009C                     _calendario:
   362                           	opt callstack 0
   363  00009C                     	ds	4
   364  0000A0                     _hora:
   365                           	opt callstack 0
   366  0000A0                     	ds	3
   367                           
   368                           	psect	bssBANK1
   369  000100                     __pbssBANK1:
   370                           	opt callstack 0
   371  000100                     _buffer:
   372                           	opt callstack 0
   373  000100                     	ds	20
   374  000114                     _dbuf:
   375                           	opt callstack 0
   376  000114                     	ds	32
   377                           
   378                           	psect	cstackBANK0
   379  0000E0                     __pcstackBANK0:
   380                           	opt callstack 0
   381  0000E0                     ?_sprintf:
   382                           	opt callstack 0
   383  0000E0                     sprintf@s:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x0
   387  0000E0                     	ds	2
   388  0000E2                     sprintf@fmt:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x2
   392  0000E2                     	ds	10
   393  0000EC                     sprintf@ap:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0xC
   397  0000EC                     	ds	2
   398  0000EE                     sprintf@f:
   399                           	opt callstack 0
   400                           
   401                           ; 6 bytes @ 0xE
   402  0000EE                     	ds	6
   403                           
   404                           	psect	cstackCOMRAM
   405  000001                     __pcstackCOMRAM:
   406                           	opt callstack 0
   407  000001                     ??_ReadyI2C:
   408  000001                     ?_strlen:
   409                           	opt callstack 0
   410  000001                     ?_isupper:
   411                           	opt callstack 0
   412  000001                     ?_isalpha:
   413                           	opt callstack 0
   414  000001                     ?_islower:
   415                           	opt callstack 0
   416  000001                     LCD@data:
   417                           	opt callstack 0
   418  000001                     isalpha@c:
   419                           	opt callstack 0
   420  000001                     isupper@c:
   421                           	opt callstack 0
   422  000001                     fputc@c:
   423                           	opt callstack 0
   424  000001                     strlen@s:
   425                           	opt callstack 0
   426  000001                     islower@c:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430  000001                     	ds	1
   431  000002                     SendI2C@data:
   432                           	opt callstack 0
   433  000002                     ReceiveI2C@flag:
   434                           	opt callstack 0
   435  000002                     SettingsLCD@word:
   436                           	opt callstack 0
   437  000002                     WriteLCD@word:
   438                           	opt callstack 0
   439                           
   440                           ; 1 bytes @ 0x1
   441  000002                     	ds	1
   442  000003                     ??_isupper:
   443  000003                     ??_isalpha:
   444  000003                     ??_islower:
   445  000003                     WriteI2C@Register:
   446                           	opt callstack 0
   447  000003                     ReceiveI2C@buffer:
   448                           	opt callstack 0
   449  000003                     fputc@fp:
   450                           	opt callstack 0
   451  000003                     strlen@a:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0x2
   455  000003                     	ds	1
   456  000004                     ReadI2C@Register:
   457                           	opt callstack 0
   458  000004                     WriteI2C@Data:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x3
   462  000004                     	ds	1
   463  000005                     ??_fputc:
   464  000005                     ReadI2C@Data:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x4
   468  000005                     	ds	1
   469  000006                     WriteI2C@bytes:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x5
   473  000006                     	ds	1
   474  000007                     ?_toupper:
   475                           	opt callstack 0
   476  000007                     ReadI2C@bytes:
   477                           	opt callstack 0
   478  000007                     toupper@c:
   479                           	opt callstack 0
   480                           
   481                           ; 2 bytes @ 0x6
   482  000007                     	ds	1
   483  000008                     ??_WriteI2C:
   484                           
   485                           ; 1 bytes @ 0x7
   486  000008                     	ds	1
   487  000009                     ??_ReadI2C:
   488  000009                     ??_toupper:
   489                           
   490                           ; 1 bytes @ 0x8
   491  000009                     	ds	1
   492  00000A                     WriteI2C@Address:
   493                           	opt callstack 0
   494  00000A                     fputs@s:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x9
   498  00000A                     	ds	1
   499  00000B                     ReadI2C@Address:
   500                           	opt callstack 0
   501                           
   502                           ; 1 bytes @ 0xA
   503  00000B                     	ds	1
   504  00000C                     fputs@fp:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0xB
   508  00000C                     	ds	1
   509  00000D                     _toupper$842:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0xC
   513  00000D                     	ds	1
   514  00000E                     fputs@c:
   515                           	opt callstack 0
   516                           
   517                           ; 1 bytes @ 0xD
   518  00000E                     	ds	1
   519  00000F                     fputs@i:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0xE
   523  00000F                     	ds	2
   524  000011                     ?_pad:
   525                           	opt callstack 0
   526  000011                     pad@fp:
   527                           	opt callstack 0
   528                           
   529                           ; 2 bytes @ 0x10
   530  000011                     	ds	2
   531  000013                     pad@buf:
   532                           	opt callstack 0
   533                           
   534                           ; 2 bytes @ 0x12
   535  000013                     	ds	2
   536  000015                     pad@p:
   537                           	opt callstack 0
   538                           
   539                           ; 2 bytes @ 0x14
   540  000015                     	ds	2
   541  000017                     ??_pad:
   542                           
   543                           ; 1 bytes @ 0x16
   544  000017                     	ds	1
   545  000018                     pad@i:
   546                           	opt callstack 0
   547                           
   548                           ; 2 bytes @ 0x17
   549  000018                     	ds	2
   550  00001A                     pad@w:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x19
   554  00001A                     	ds	2
   555  00001C                     ?_xtoa:
   556                           	opt callstack 0
   557  00001C                     xtoa@fp:
   558                           	opt callstack 0
   559                           
   560                           ; 2 bytes @ 0x1B
   561  00001C                     	ds	2
   562  00001E                     xtoa@d:
   563                           	opt callstack 0
   564                           
   565                           ; 8 bytes @ 0x1D
   566  00001E                     	ds	8
   567  000026                     xtoa@x:
   568                           	opt callstack 0
   569                           
   570                           ; 1 bytes @ 0x25
   571  000026                     	ds	1
   572  000027                     ??_xtoa:
   573                           
   574                           ; 1 bytes @ 0x26
   575  000027                     	ds	8
   576  00002F                     _xtoa$301:
   577                           	opt callstack 0
   578                           
   579                           ; 2 bytes @ 0x2E
   580  00002F                     	ds	2
   581  000031                     _xtoa$302:
   582                           	opt callstack 0
   583                           
   584                           ; 2 bytes @ 0x30
   585  000031                     	ds	2
   586  000033                     xtoa@p:
   587                           	opt callstack 0
   588                           
   589                           ; 2 bytes @ 0x32
   590  000033                     	ds	2
   591  000035                     xtoa@w:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x34
   595  000035                     	ds	2
   596  000037                     xtoa@n:
   597                           	opt callstack 0
   598                           
   599                           ; 8 bytes @ 0x36
   600  000037                     	ds	8
   601  00003F                     xtoa@i:
   602                           	opt callstack 0
   603                           
   604                           ; 2 bytes @ 0x3E
   605  00003F                     	ds	2
   606  000041                     xtoa@c:
   607                           	opt callstack 0
   608                           
   609                           ; 2 bytes @ 0x40
   610  000041                     	ds	2
   611  000043                     ?_vfpfcnvrt:
   612                           	opt callstack 0
   613  000043                     vfpfcnvrt@fp:
   614                           	opt callstack 0
   615                           
   616                           ; 2 bytes @ 0x42
   617  000043                     	ds	2
   618  000045                     vfpfcnvrt@fmt:
   619                           	opt callstack 0
   620                           
   621                           ; 2 bytes @ 0x44
   622  000045                     	ds	2
   623  000047                     vfpfcnvrt@ap:
   624                           	opt callstack 0
   625                           
   626                           ; 2 bytes @ 0x46
   627  000047                     	ds	2
   628  000049                     ??_vfpfcnvrt:
   629                           
   630                           ; 1 bytes @ 0x48
   631  000049                     	ds	4
   632  00004D                     vfpfcnvrt@llu:
   633                           	opt callstack 0
   634                           
   635                           ; 8 bytes @ 0x4C
   636  00004D                     	ds	8
   637  000055                     vfpfcnvrt@c:
   638                           	opt callstack 0
   639                           
   640                           ; 1 bytes @ 0x54
   641  000055                     	ds	1
   642  000056                     ?_vfprintf:
   643                           	opt callstack 0
   644  000056                     vfprintf@fp:
   645                           	opt callstack 0
   646                           
   647                           ; 2 bytes @ 0x55
   648  000056                     	ds	2
   649  000058                     vfprintf@fmt:
   650                           	opt callstack 0
   651                           
   652                           ; 2 bytes @ 0x57
   653  000058                     	ds	2
   654  00005A                     vfprintf@ap:
   655                           	opt callstack 0
   656                           
   657                           ; 2 bytes @ 0x59
   658  00005A                     	ds	2
   659  00005C                     vfprintf@cfmt:
   660                           	opt callstack 0
   661                           
   662                           ; 2 bytes @ 0x5B
   663  00005C                     	ds	2
   664  00005E                     ??_main:
   665                           
   666                           ; 1 bytes @ 0x5D
   667  00005E                     	ds	2
   668                           
   669 ;;
   670 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   671 ;;
   672 ;; *************** function _main *****************
   673 ;; Defined at:
   674 ;;		line 57 in file "main.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   688 ;;      Params:         0       0       0       0       0       0       0       0       0
   689 ;;      Locals:         0       0       0       0       0       0       0       0       0
   690 ;;      Temps:          2       0       0       0       0       0       0       0       0
   691 ;;      Totals:         2       0       0       0       0       0       0       0       0
   692 ;;Total ram usage:        2 bytes
   693 ;; Hardware stack levels required when called:    8
   694 ;; This function calls:
   695 ;;		_ReadI2C
   696 ;;		_SettingsLCD
   697 ;;		_WriteI2C
   698 ;;		_WriteLCD
   699 ;;		_settings
   700 ;;		_sprintf
   701 ;;		_strlen
   702 ;; This function is called by:
   703 ;;		Startup code after reset
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text0
   708  00081C                     __ptext0:
   709                           	opt callstack 0
   710  00081C                     _main:
   711                           	opt callstack 23
   712  00081C                     
   713                           ;main.c: 58:     settings();
   714  00081C  ECD5  F00A         	call	_settings	;wreg free
   715  000820                     
   716                           ;main.c: 59:     WriteI2C(0xD0,0x00,hora,3);
   717  000820  0E00               	movlw	0
   718  000822  6E03               	movwf	WriteI2C@Register^0,c
   719  000824  0EA0               	movlw	low _hora
   720  000826  6E04               	movwf	WriteI2C@Data^0,c
   721  000828  0E00               	movlw	high _hora
   722  00082A  6E05               	movwf	(WriteI2C@Data+1)^0,c
   723  00082C  0E00               	movlw	0
   724  00082E  6E07               	movwf	(WriteI2C@bytes+1)^0,c
   725  000830  0E03               	movlw	3
   726  000832  6E06               	movwf	WriteI2C@bytes^0,c
   727  000834  0ED0               	movlw	208
   728  000836  EC13  F00A         	call	_WriteI2C
   729  00083A                     
   730                           ;main.c: 60:     WriteI2C(0xD0,0x03,calendario,4);
   731  00083A  0E03               	movlw	3
   732  00083C  6E03               	movwf	WriteI2C@Register^0,c
   733  00083E  0E9C               	movlw	low _calendario
   734  000840  6E04               	movwf	WriteI2C@Data^0,c
   735  000842  0E00               	movlw	high _calendario
   736  000844  6E05               	movwf	(WriteI2C@Data+1)^0,c
   737  000846  0E00               	movlw	0
   738  000848  6E07               	movwf	(WriteI2C@bytes+1)^0,c
   739  00084A  0E04               	movlw	4
   740  00084C  6E06               	movwf	WriteI2C@bytes^0,c
   741  00084E  0ED0               	movlw	208
   742  000850  EC13  F00A         	call	_WriteI2C
   743  000854                     l1818:
   744                           
   745                           ;main.c: 62:         ReadI2C(0xD0,0x00,DatosHora,3);
   746  000854  0E00               	movlw	0
   747  000856  6E04               	movwf	ReadI2C@Register^0,c
   748  000858  0EDD               	movlw	low _DatosHora
   749  00085A  6E05               	movwf	ReadI2C@Data^0,c
   750  00085C  0E00               	movlw	high _DatosHora
   751  00085E  6E06               	movwf	(ReadI2C@Data+1)^0,c
   752  000860  0E00               	movlw	0
   753  000862  6E08               	movwf	(ReadI2C@bytes+1)^0,c
   754  000864  0E03               	movlw	3
   755  000866  6E07               	movwf	ReadI2C@bytes^0,c
   756  000868  0ED0               	movlw	208
   757  00086A  ECB7  F009         	call	_ReadI2C
   758  00086E                     
   759                           ;main.c: 63:         if(DatosHora[2] & (1<<Clock_type)){
   760  00086E  0100               	movlb	0	; () banked
   761  000870  ADDF               	btfss	(_DatosHora+2)& (0+255),6,b
   762  000872  EF3D  F004         	goto	u1111
   763  000876  EF3F  F004         	goto	u1110
   764  00087A                     u1111:
   765  00087A  EFD5  F004         	goto	l1856
   766  00087E                     u1110:
   767  00087E                     
   768                           ; BSR set to: 0
   769                           ;main.c: 64:             SettingsLCD(0x80 +14);
   770  00087E  0E8E               	movlw	142
   771  000880  EC0A  F00C         	call	_SettingsLCD
   772  000884                     
   773                           ;main.c: 65:             if(DatosHora[2] & (1<<AM_PM)){
   774  000884  0100               	movlb	0	; () banked
   775  000886  ABDF               	btfss	(_DatosHora+2)& (0+255),5,b
   776  000888  EF48  F004         	goto	u1121
   777  00088C  EF4A  F004         	goto	u1120
   778  000890                     u1121:
   779  000890  EF70  F004         	goto	l1834
   780  000894                     u1120:
   781  000894                     
   782                           ; BSR set to: 0
   783                           ;main.c: 66:                 for(i=0; i<=strlen(text1); i++){
   784  000894  0E00               	movlw	0
   785  000896  6FB0               	movwf	(_i+1)& (0+255),b
   786  000898  0E00               	movlw	0
   787  00089A  6FAF               	movwf	_i& (0+255),b
   788  00089C  EF5C  F004         	goto	l1832
   789  0008A0                     l1828:
   790                           
   791                           ; BSR set to: 0
   792                           ;main.c: 67:                     WriteLCD(text1[i]);
   793  0008A0  0E97               	movlw	low _text1
   794  0008A2  25AF               	addwf	_i& (0+255),w,b
   795  0008A4  6ED9               	movwf	fsr2l,c
   796  0008A6  0E00               	movlw	high _text1
   797  0008A8  21B0               	addwfc	(_i+1)& (0+255),w,b
   798  0008AA  6EDA               	movwf	fsr2h,c
   799  0008AC  50DF               	movf	indf2,w,c
   800  0008AE  EC10  F00C         	call	_WriteLCD
   801  0008B2                     
   802                           ;main.c: 68:                 }
   803  0008B2  0100               	movlb	0	; () banked
   804  0008B4  4BAF               	infsnz	_i& (0+255),f,b
   805  0008B6  2BB0               	incf	(_i+1)& (0+255),f,b
   806  0008B8                     l1832:
   807                           
   808                           ; BSR set to: 0
   809  0008B8  0E97               	movlw	low _text1
   810  0008BA  6E01               	movwf	strlen@s^0,c
   811  0008BC  0E00               	movlw	high _text1
   812  0008BE  6E02               	movwf	(strlen@s+1)^0,c
   813  0008C0  ECB3  F00B         	call	_strlen	;wreg free
   814  0008C4  0100               	movlb	0	; () banked
   815  0008C6  51AF               	movf	_i& (0+255),w,b
   816  0008C8  5C01               	subwf	?_strlen^0,w,c
   817  0008CA  51B0               	movf	(_i+1)& (0+255),w,b
   818  0008CC  5802               	subwfb	(?_strlen+1)^0,w,c
   819  0008CE  B0D8               	btfsc	status,0,c
   820  0008D0  EF6C  F004         	goto	u1131
   821  0008D4  EF6E  F004         	goto	u1130
   822  0008D8                     u1131:
   823  0008D8  EF50  F004         	goto	l1828
   824  0008DC                     u1130:
   825  0008DC  EF94  F004         	goto	l1842
   826  0008E0                     l1834:
   827                           
   828                           ; BSR set to: 0
   829                           ;main.c: 71:                 for(i=0; i<=strlen(text2); i++){
   830  0008E0  0E00               	movlw	0
   831  0008E2  6FB0               	movwf	(_i+1)& (0+255),b
   832  0008E4  0E00               	movlw	0
   833  0008E6  6FAF               	movwf	_i& (0+255),b
   834  0008E8  EF82  F004         	goto	l1840
   835  0008EC                     l1836:
   836                           
   837                           ; BSR set to: 0
   838                           ;main.c: 72:                     WriteLCD(text2[i]);
   839  0008EC  0E92               	movlw	low _text2
   840  0008EE  25AF               	addwf	_i& (0+255),w,b
   841  0008F0  6ED9               	movwf	fsr2l,c
   842  0008F2  0E00               	movlw	high _text2
   843  0008F4  21B0               	addwfc	(_i+1)& (0+255),w,b
   844  0008F6  6EDA               	movwf	fsr2h,c
   845  0008F8  50DF               	movf	indf2,w,c
   846  0008FA  EC10  F00C         	call	_WriteLCD
   847  0008FE                     
   848                           ;main.c: 73:                 }
   849  0008FE  0100               	movlb	0	; () banked
   850  000900  4BAF               	infsnz	_i& (0+255),f,b
   851  000902  2BB0               	incf	(_i+1)& (0+255),f,b
   852  000904                     l1840:
   853                           
   854                           ; BSR set to: 0
   855  000904  0E92               	movlw	low _text2
   856  000906  6E01               	movwf	strlen@s^0,c
   857  000908  0E00               	movlw	high _text2
   858  00090A  6E02               	movwf	(strlen@s+1)^0,c
   859  00090C  ECB3  F00B         	call	_strlen	;wreg free
   860  000910  0100               	movlb	0	; () banked
   861  000912  51AF               	movf	_i& (0+255),w,b
   862  000914  5C01               	subwf	?_strlen^0,w,c
   863  000916  51B0               	movf	(_i+1)& (0+255),w,b
   864  000918  5802               	subwfb	(?_strlen+1)^0,w,c
   865  00091A  B0D8               	btfsc	status,0,c
   866  00091C  EF92  F004         	goto	u1141
   867  000920  EF94  F004         	goto	u1140
   868  000924                     u1141:
   869  000924  EF76  F004         	goto	l1836
   870  000928                     u1140:
   871  000928                     l1842:
   872                           
   873                           ; BSR set to: 0
   874                           ;main.c: 75:             SettingsLCD(0x80);
   875  000928  0E80               	movlw	128
   876  00092A  EC0A  F00C         	call	_SettingsLCD
   877  00092E                     
   878                           ;main.c: 76:             DatosHora[2] = DatosHora[2] & (0x1f);
   879  00092E  0100               	movlb	0	; () banked
   880  000930  51DF               	movf	(_DatosHora+2)& (0+255),w,b
   881  000932  0B1F               	andlw	31
   882  000934  6FDF               	movwf	(_DatosHora+2)& (0+255),b
   883  000936                     
   884                           ; BSR set to: 0
   885                           ;main.c: 77:             sprintf(smh,"Hor:%x:%x:%x",DatosHora[2],DatosHora[1],DatosHora[
      +                          0]);
   886  000936  0EC5               	movlw	low _smh
   887  000938  6FE0               	movwf	sprintf@s& (0+255),b
   888  00093A  0E00               	movlw	high _smh
   889  00093C  6FE1               	movwf	(sprintf@s+1)& (0+255),b
   890  00093E  0E0E               	movlw	low STR_1
   891  000940  6FE2               	movwf	sprintf@fmt& (0+255),b
   892  000942  0E08               	movlw	high STR_1
   893  000944  6FE3               	movwf	(sprintf@fmt+1)& (0+255),b
   894  000946  C0DF  F0E4         	movff	_DatosHora+2,?_sprintf+4
   895  00094A  6BE5               	clrf	(?_sprintf+5)& (0+255),b
   896  00094C  C0DE  F0E6         	movff	_DatosHora+1,?_sprintf+6
   897  000950  6BE7               	clrf	(?_sprintf+7)& (0+255),b
   898  000952  C0DD  F0E8         	movff	_DatosHora,?_sprintf+8
   899  000956  6BE9               	clrf	(?_sprintf+9)& (0+255),b
   900  000958  ECAC  F00A         	call	_sprintf	;wreg free
   901  00095C                     
   902                           ;main.c: 78:             for(i=0; i<=strlen(smh); i++){
   903  00095C  0E00               	movlw	0
   904  00095E  0100               	movlb	0	; () banked
   905  000960  6FB0               	movwf	(_i+1)& (0+255),b
   906  000962  0E00               	movlw	0
   907  000964  6FAF               	movwf	_i& (0+255),b
   908  000966  EFC1  F004         	goto	l1854
   909  00096A                     l1850:
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 79:                 WriteLCD(smh[i]);
   913  00096A  0EC5               	movlw	low _smh
   914  00096C  25AF               	addwf	_i& (0+255),w,b
   915  00096E  6ED9               	movwf	fsr2l,c
   916  000970  0E00               	movlw	high _smh
   917  000972  21B0               	addwfc	(_i+1)& (0+255),w,b
   918  000974  6EDA               	movwf	fsr2h,c
   919  000976  50DF               	movf	indf2,w,c
   920  000978  EC10  F00C         	call	_WriteLCD
   921  00097C                     
   922                           ;main.c: 80:             }
   923  00097C  0100               	movlb	0	; () banked
   924  00097E  4BAF               	infsnz	_i& (0+255),f,b
   925  000980  2BB0               	incf	(_i+1)& (0+255),f,b
   926  000982                     l1854:
   927                           
   928                           ; BSR set to: 0
   929  000982  0EC5               	movlw	low _smh
   930  000984  6E01               	movwf	strlen@s^0,c
   931  000986  0E00               	movlw	high _smh
   932  000988  6E02               	movwf	(strlen@s+1)^0,c
   933  00098A  ECB3  F00B         	call	_strlen	;wreg free
   934  00098E  0100               	movlb	0	; () banked
   935  000990  51AF               	movf	_i& (0+255),w,b
   936  000992  5C01               	subwf	?_strlen^0,w,c
   937  000994  51B0               	movf	(_i+1)& (0+255),w,b
   938  000996  5802               	subwfb	(?_strlen+1)^0,w,c
   939  000998  B0D8               	btfsc	status,0,c
   940  00099A  EFD1  F004         	goto	u1151
   941  00099E  EFD3  F004         	goto	u1150
   942  0009A2                     u1151:
   943  0009A2  EFB5  F004         	goto	l1850
   944  0009A6                     u1150:
   945  0009A6  EF14  F005         	goto	l1870
   946  0009AA                     l1856:
   947                           
   948                           ; BSR set to: 0
   949                           ;main.c: 83:             SettingsLCD(0x80);
   950  0009AA  0E80               	movlw	128
   951  0009AC  EC0A  F00C         	call	_SettingsLCD
   952  0009B0                     
   953                           ;main.c: 84:             DatosHora[2] = DatosHora[2] & (0x3f);
   954  0009B0  0100               	movlb	0	; () banked
   955  0009B2  51DF               	movf	(_DatosHora+2)& (0+255),w,b
   956  0009B4  0B3F               	andlw	63
   957  0009B6  6FDF               	movwf	(_DatosHora+2)& (0+255),b
   958  0009B8                     
   959                           ; BSR set to: 0
   960                           ;main.c: 85:             sprintf(smh,"Hor:%x:%x:%x",DatosHora[2],DatosHora[1],DatosHora[
      +                          0]);
   961  0009B8  0EC5               	movlw	low _smh
   962  0009BA  6FE0               	movwf	sprintf@s& (0+255),b
   963  0009BC  0E00               	movlw	high _smh
   964  0009BE  6FE1               	movwf	(sprintf@s+1)& (0+255),b
   965  0009C0  0E0E               	movlw	low STR_1
   966  0009C2  6FE2               	movwf	sprintf@fmt& (0+255),b
   967  0009C4  0E08               	movlw	high STR_1
   968  0009C6  6FE3               	movwf	(sprintf@fmt+1)& (0+255),b
   969  0009C8  C0DF  F0E4         	movff	_DatosHora+2,?_sprintf+4
   970  0009CC  6BE5               	clrf	(?_sprintf+5)& (0+255),b
   971  0009CE  C0DE  F0E6         	movff	_DatosHora+1,?_sprintf+6
   972  0009D2  6BE7               	clrf	(?_sprintf+7)& (0+255),b
   973  0009D4  C0DD  F0E8         	movff	_DatosHora,?_sprintf+8
   974  0009D8  6BE9               	clrf	(?_sprintf+9)& (0+255),b
   975  0009DA  ECAC  F00A         	call	_sprintf	;wreg free
   976  0009DE                     
   977                           ;main.c: 86:             for(i=0; i<=strlen(smh); i++){
   978  0009DE  0E00               	movlw	0
   979  0009E0  0100               	movlb	0	; () banked
   980  0009E2  6FB0               	movwf	(_i+1)& (0+255),b
   981  0009E4  0E00               	movlw	0
   982  0009E6  6FAF               	movwf	_i& (0+255),b
   983  0009E8  EF02  F005         	goto	l1868
   984  0009EC                     l1864:
   985                           
   986                           ; BSR set to: 0
   987                           ;main.c: 87:                 WriteLCD(smh[i]);
   988  0009EC  0EC5               	movlw	low _smh
   989  0009EE  25AF               	addwf	_i& (0+255),w,b
   990  0009F0  6ED9               	movwf	fsr2l,c
   991  0009F2  0E00               	movlw	high _smh
   992  0009F4  21B0               	addwfc	(_i+1)& (0+255),w,b
   993  0009F6  6EDA               	movwf	fsr2h,c
   994  0009F8  50DF               	movf	indf2,w,c
   995  0009FA  EC10  F00C         	call	_WriteLCD
   996  0009FE                     
   997                           ;main.c: 88:             }
   998  0009FE  0100               	movlb	0	; () banked
   999  000A00  4BAF               	infsnz	_i& (0+255),f,b
  1000  000A02  2BB0               	incf	(_i+1)& (0+255),f,b
  1001  000A04                     l1868:
  1002                           
  1003                           ; BSR set to: 0
  1004  000A04  0EC5               	movlw	low _smh
  1005  000A06  6E01               	movwf	strlen@s^0,c
  1006  000A08  0E00               	movlw	high _smh
  1007  000A0A  6E02               	movwf	(strlen@s+1)^0,c
  1008  000A0C  ECB3  F00B         	call	_strlen	;wreg free
  1009  000A10  0100               	movlb	0	; () banked
  1010  000A12  51AF               	movf	_i& (0+255),w,b
  1011  000A14  5C01               	subwf	?_strlen^0,w,c
  1012  000A16  51B0               	movf	(_i+1)& (0+255),w,b
  1013  000A18  5802               	subwfb	(?_strlen+1)^0,w,c
  1014  000A1A  B0D8               	btfsc	status,0,c
  1015  000A1C  EF12  F005         	goto	u1161
  1016  000A20  EF14  F005         	goto	u1160
  1017  000A24                     u1161:
  1018  000A24  EFF6  F004         	goto	l1864
  1019  000A28                     u1160:
  1020  000A28                     l1870:
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;main.c: 90:         ReadI2C(0xD0,0x03,DatosCalendario,4);
  1024  000A28  0E03               	movlw	3
  1025  000A2A  6E04               	movwf	ReadI2C@Register^0,c
  1026  000A2C  0ED9               	movlw	low _DatosCalendario
  1027  000A2E  6E05               	movwf	ReadI2C@Data^0,c
  1028  000A30  0E00               	movlw	high _DatosCalendario
  1029  000A32  6E06               	movwf	(ReadI2C@Data+1)^0,c
  1030  000A34  0E00               	movlw	0
  1031  000A36  6E08               	movwf	(ReadI2C@bytes+1)^0,c
  1032  000A38  0E04               	movlw	4
  1033  000A3A  6E07               	movwf	ReadI2C@bytes^0,c
  1034  000A3C  0ED0               	movlw	208
  1035  000A3E  ECB7  F009         	call	_ReadI2C
  1036  000A42                     
  1037                           ;main.c: 91:         SettingsLCD(0xC0);
  1038  000A42  0EC0               	movlw	192
  1039  000A44  EC0A  F00C         	call	_SettingsLCD
  1040  000A48                     
  1041                           ;main.c: 92:         sprintf(dma,"Cal:%x/%x/%x",DatosCalendario[1],DatosCalendario[2],Da
      +                          tosCalendario[3]);
  1042  000A48  0EB1               	movlw	low _dma
  1043  000A4A  0100               	movlb	0	; () banked
  1044  000A4C  6FE0               	movwf	sprintf@s& (0+255),b
  1045  000A4E  0E00               	movlw	high _dma
  1046  000A50  6FE1               	movwf	(sprintf@s+1)& (0+255),b
  1047  000A52  0E01               	movlw	low STR_3
  1048  000A54  6FE2               	movwf	sprintf@fmt& (0+255),b
  1049  000A56  0E08               	movlw	high STR_3
  1050  000A58  6FE3               	movwf	(sprintf@fmt+1)& (0+255),b
  1051  000A5A  C0DA  F0E4         	movff	_DatosCalendario+1,?_sprintf+4
  1052  000A5E  6BE5               	clrf	(?_sprintf+5)& (0+255),b
  1053  000A60  C0DB  F0E6         	movff	_DatosCalendario+2,?_sprintf+6
  1054  000A64  6BE7               	clrf	(?_sprintf+7)& (0+255),b
  1055  000A66  C0DC  F0E8         	movff	_DatosCalendario+3,?_sprintf+8
  1056  000A6A  6BE9               	clrf	(?_sprintf+9)& (0+255),b
  1057  000A6C  ECAC  F00A         	call	_sprintf	;wreg free
  1058  000A70                     
  1059                           ;main.c: 93:         for(i=0; i<=strlen(dma); i++){
  1060  000A70  0E00               	movlw	0
  1061  000A72  0100               	movlb	0	; () banked
  1062  000A74  6FB0               	movwf	(_i+1)& (0+255),b
  1063  000A76  0E00               	movlw	0
  1064  000A78  6FAF               	movwf	_i& (0+255),b
  1065  000A7A  EF4B  F005         	goto	l1882
  1066  000A7E                     l1878:
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;main.c: 94:             WriteLCD(dma[i]);
  1070  000A7E  0EB1               	movlw	low _dma
  1071  000A80  25AF               	addwf	_i& (0+255),w,b
  1072  000A82  6ED9               	movwf	fsr2l,c
  1073  000A84  0E00               	movlw	high _dma
  1074  000A86  21B0               	addwfc	(_i+1)& (0+255),w,b
  1075  000A88  6EDA               	movwf	fsr2h,c
  1076  000A8A  50DF               	movf	indf2,w,c
  1077  000A8C  EC10  F00C         	call	_WriteLCD
  1078  000A90                     
  1079                           ;main.c: 95:         }
  1080  000A90  0100               	movlb	0	; () banked
  1081  000A92  4BAF               	infsnz	_i& (0+255),f,b
  1082  000A94  2BB0               	incf	(_i+1)& (0+255),f,b
  1083  000A96                     l1882:
  1084                           
  1085                           ; BSR set to: 0
  1086  000A96  0EB1               	movlw	low _dma
  1087  000A98  6E01               	movwf	strlen@s^0,c
  1088  000A9A  0E00               	movlw	high _dma
  1089  000A9C  6E02               	movwf	(strlen@s+1)^0,c
  1090  000A9E  ECB3  F00B         	call	_strlen	;wreg free
  1091  000AA2  0100               	movlb	0	; () banked
  1092  000AA4  51AF               	movf	_i& (0+255),w,b
  1093  000AA6  5C01               	subwf	?_strlen^0,w,c
  1094  000AA8  51B0               	movf	(_i+1)& (0+255),w,b
  1095  000AAA  5802               	subwfb	(?_strlen+1)^0,w,c
  1096  000AAC  B0D8               	btfsc	status,0,c
  1097  000AAE  EF5B  F005         	goto	u1171
  1098  000AB2  EF5D  F005         	goto	u1170
  1099  000AB6                     u1171:
  1100  000AB6  EF3F  F005         	goto	l1878
  1101  000ABA                     u1170:
  1102  000ABA  EF69  F006         	goto	l1944
  1103  000ABE                     l1886:
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;main.c: 101:                 for(i=0; i<=strlen(text3); i++){
  1107  000ABE  0E00               	movlw	0
  1108  000AC0  6FB0               	movwf	(_i+1)& (0+255),b
  1109  000AC2  0E00               	movlw	0
  1110  000AC4  6FAF               	movwf	_i& (0+255),b
  1111  000AC6  EF71  F005         	goto	l1892
  1112  000ACA                     l1888:
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;main.c: 102:                     WriteLCD(text3[i]);
  1116  000ACA  0E8D               	movlw	low _text3
  1117  000ACC  25AF               	addwf	_i& (0+255),w,b
  1118  000ACE  6ED9               	movwf	fsr2l,c
  1119  000AD0  0E00               	movlw	high _text3
  1120  000AD2  21B0               	addwfc	(_i+1)& (0+255),w,b
  1121  000AD4  6EDA               	movwf	fsr2h,c
  1122  000AD6  50DF               	movf	indf2,w,c
  1123  000AD8  EC10  F00C         	call	_WriteLCD
  1124  000ADC                     
  1125                           ;main.c: 103:                 }
  1126  000ADC  0100               	movlb	0	; () banked
  1127  000ADE  4BAF               	infsnz	_i& (0+255),f,b
  1128  000AE0  2BB0               	incf	(_i+1)& (0+255),f,b
  1129  000AE2                     l1892:
  1130                           
  1131                           ; BSR set to: 0
  1132  000AE2  0E8D               	movlw	low _text3
  1133  000AE4  6E01               	movwf	strlen@s^0,c
  1134  000AE6  0E00               	movlw	high _text3
  1135  000AE8  6E02               	movwf	(strlen@s+1)^0,c
  1136  000AEA  ECB3  F00B         	call	_strlen	;wreg free
  1137  000AEE  0100               	movlb	0	; () banked
  1138  000AF0  51AF               	movf	_i& (0+255),w,b
  1139  000AF2  5C01               	subwf	?_strlen^0,w,c
  1140  000AF4  51B0               	movf	(_i+1)& (0+255),w,b
  1141  000AF6  5802               	subwfb	(?_strlen+1)^0,w,c
  1142  000AF8  B0D8               	btfsc	status,0,c
  1143  000AFA  EF81  F005         	goto	u1181
  1144  000AFE  EF83  F005         	goto	u1180
  1145  000B02                     u1181:
  1146  000B02  EF65  F005         	goto	l1888
  1147  000B06                     u1180:
  1148  000B06  EF2A  F004         	goto	l1818
  1149  000B0A                     l1894:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 106:                 for(i=0; i<=strlen(text4); i++){
  1153  000B0A  0E00               	movlw	0
  1154  000B0C  6FB0               	movwf	(_i+1)& (0+255),b
  1155  000B0E  0E00               	movlw	0
  1156  000B10  6FAF               	movwf	_i& (0+255),b
  1157  000B12  EF97  F005         	goto	l1900
  1158  000B16                     l1896:
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 107:                     WriteLCD(text4[i]);
  1162  000B16  0E88               	movlw	low _text4
  1163  000B18  25AF               	addwf	_i& (0+255),w,b
  1164  000B1A  6ED9               	movwf	fsr2l,c
  1165  000B1C  0E00               	movlw	high _text4
  1166  000B1E  21B0               	addwfc	(_i+1)& (0+255),w,b
  1167  000B20  6EDA               	movwf	fsr2h,c
  1168  000B22  50DF               	movf	indf2,w,c
  1169  000B24  EC10  F00C         	call	_WriteLCD
  1170  000B28                     
  1171                           ;main.c: 108:                 }
  1172  000B28  0100               	movlb	0	; () banked
  1173  000B2A  4BAF               	infsnz	_i& (0+255),f,b
  1174  000B2C  2BB0               	incf	(_i+1)& (0+255),f,b
  1175  000B2E                     l1900:
  1176                           
  1177                           ; BSR set to: 0
  1178  000B2E  0E88               	movlw	low _text4
  1179  000B30  6E01               	movwf	strlen@s^0,c
  1180  000B32  0E00               	movlw	high _text4
  1181  000B34  6E02               	movwf	(strlen@s+1)^0,c
  1182  000B36  ECB3  F00B         	call	_strlen	;wreg free
  1183  000B3A  0100               	movlb	0	; () banked
  1184  000B3C  51AF               	movf	_i& (0+255),w,b
  1185  000B3E  5C01               	subwf	?_strlen^0,w,c
  1186  000B40  51B0               	movf	(_i+1)& (0+255),w,b
  1187  000B42  5802               	subwfb	(?_strlen+1)^0,w,c
  1188  000B44  B0D8               	btfsc	status,0,c
  1189  000B46  EFA7  F005         	goto	u1191
  1190  000B4A  EFA9  F005         	goto	u1190
  1191  000B4E                     u1191:
  1192  000B4E  EF8B  F005         	goto	l1896
  1193  000B52                     u1190:
  1194  000B52  EF2A  F004         	goto	l1818
  1195  000B56                     l1902:
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;main.c: 111:                 for(i=0; i<=strlen(text5); i++){
  1199  000B56  0E00               	movlw	0
  1200  000B58  6FB0               	movwf	(_i+1)& (0+255),b
  1201  000B5A  0E00               	movlw	0
  1202  000B5C  6FAF               	movwf	_i& (0+255),b
  1203  000B5E  EFBD  F005         	goto	l1908
  1204  000B62                     l1904:
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;main.c: 112:                     WriteLCD(text5[i]);
  1208  000B62  0E83               	movlw	low _text5
  1209  000B64  25AF               	addwf	_i& (0+255),w,b
  1210  000B66  6ED9               	movwf	fsr2l,c
  1211  000B68  0E00               	movlw	high _text5
  1212  000B6A  21B0               	addwfc	(_i+1)& (0+255),w,b
  1213  000B6C  6EDA               	movwf	fsr2h,c
  1214  000B6E  50DF               	movf	indf2,w,c
  1215  000B70  EC10  F00C         	call	_WriteLCD
  1216  000B74                     
  1217                           ;main.c: 113:                 }
  1218  000B74  0100               	movlb	0	; () banked
  1219  000B76  4BAF               	infsnz	_i& (0+255),f,b
  1220  000B78  2BB0               	incf	(_i+1)& (0+255),f,b
  1221  000B7A                     l1908:
  1222                           
  1223                           ; BSR set to: 0
  1224  000B7A  0E83               	movlw	low _text5
  1225  000B7C  6E01               	movwf	strlen@s^0,c
  1226  000B7E  0E00               	movlw	high _text5
  1227  000B80  6E02               	movwf	(strlen@s+1)^0,c
  1228  000B82  ECB3  F00B         	call	_strlen	;wreg free
  1229  000B86  0100               	movlb	0	; () banked
  1230  000B88  51AF               	movf	_i& (0+255),w,b
  1231  000B8A  5C01               	subwf	?_strlen^0,w,c
  1232  000B8C  51B0               	movf	(_i+1)& (0+255),w,b
  1233  000B8E  5802               	subwfb	(?_strlen+1)^0,w,c
  1234  000B90  B0D8               	btfsc	status,0,c
  1235  000B92  EFCD  F005         	goto	u1201
  1236  000B96  EFCF  F005         	goto	u1200
  1237  000B9A                     u1201:
  1238  000B9A  EFB1  F005         	goto	l1904
  1239  000B9E                     u1200:
  1240  000B9E  EF2A  F004         	goto	l1818
  1241  000BA2                     l1910:
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 116:                 for(i=0; i<=strlen(text6); i++){
  1245  000BA2  0E00               	movlw	0
  1246  000BA4  6FB0               	movwf	(_i+1)& (0+255),b
  1247  000BA6  0E00               	movlw	0
  1248  000BA8  6FAF               	movwf	_i& (0+255),b
  1249  000BAA  EFE3  F005         	goto	l1916
  1250  000BAE                     l1912:
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;main.c: 117:                     WriteLCD(text6[i]);
  1254  000BAE  0E7E               	movlw	low _text6
  1255  000BB0  25AF               	addwf	_i& (0+255),w,b
  1256  000BB2  6ED9               	movwf	fsr2l,c
  1257  000BB4  0E00               	movlw	high _text6
  1258  000BB6  21B0               	addwfc	(_i+1)& (0+255),w,b
  1259  000BB8  6EDA               	movwf	fsr2h,c
  1260  000BBA  50DF               	movf	indf2,w,c
  1261  000BBC  EC10  F00C         	call	_WriteLCD
  1262  000BC0                     
  1263                           ;main.c: 118:                 }
  1264  000BC0  0100               	movlb	0	; () banked
  1265  000BC2  4BAF               	infsnz	_i& (0+255),f,b
  1266  000BC4  2BB0               	incf	(_i+1)& (0+255),f,b
  1267  000BC6                     l1916:
  1268                           
  1269                           ; BSR set to: 0
  1270  000BC6  0E7E               	movlw	low _text6
  1271  000BC8  6E01               	movwf	strlen@s^0,c
  1272  000BCA  0E00               	movlw	high _text6
  1273  000BCC  6E02               	movwf	(strlen@s+1)^0,c
  1274  000BCE  ECB3  F00B         	call	_strlen	;wreg free
  1275  000BD2  0100               	movlb	0	; () banked
  1276  000BD4  51AF               	movf	_i& (0+255),w,b
  1277  000BD6  5C01               	subwf	?_strlen^0,w,c
  1278  000BD8  51B0               	movf	(_i+1)& (0+255),w,b
  1279  000BDA  5802               	subwfb	(?_strlen+1)^0,w,c
  1280  000BDC  B0D8               	btfsc	status,0,c
  1281  000BDE  EFF3  F005         	goto	u1211
  1282  000BE2  EFF5  F005         	goto	u1210
  1283  000BE6                     u1211:
  1284  000BE6  EFD7  F005         	goto	l1912
  1285  000BEA                     u1210:
  1286  000BEA  EF2A  F004         	goto	l1818
  1287  000BEE                     l1918:
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;main.c: 121:                 for(i=0; i<=strlen(text7); i++){
  1291  000BEE  0E00               	movlw	0
  1292  000BF0  6FB0               	movwf	(_i+1)& (0+255),b
  1293  000BF2  0E00               	movlw	0
  1294  000BF4  6FAF               	movwf	_i& (0+255),b
  1295  000BF6  EF09  F006         	goto	l1924
  1296  000BFA                     l1920:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 122:                     WriteLCD(text7[i]);
  1300  000BFA  0E79               	movlw	low _text7
  1301  000BFC  25AF               	addwf	_i& (0+255),w,b
  1302  000BFE  6ED9               	movwf	fsr2l,c
  1303  000C00  0E00               	movlw	high _text7
  1304  000C02  21B0               	addwfc	(_i+1)& (0+255),w,b
  1305  000C04  6EDA               	movwf	fsr2h,c
  1306  000C06  50DF               	movf	indf2,w,c
  1307  000C08  EC10  F00C         	call	_WriteLCD
  1308  000C0C                     
  1309                           ;main.c: 123:                 }
  1310  000C0C  0100               	movlb	0	; () banked
  1311  000C0E  4BAF               	infsnz	_i& (0+255),f,b
  1312  000C10  2BB0               	incf	(_i+1)& (0+255),f,b
  1313  000C12                     l1924:
  1314                           
  1315                           ; BSR set to: 0
  1316  000C12  0E79               	movlw	low _text7
  1317  000C14  6E01               	movwf	strlen@s^0,c
  1318  000C16  0E00               	movlw	high _text7
  1319  000C18  6E02               	movwf	(strlen@s+1)^0,c
  1320  000C1A  ECB3  F00B         	call	_strlen	;wreg free
  1321  000C1E  0100               	movlb	0	; () banked
  1322  000C20  51AF               	movf	_i& (0+255),w,b
  1323  000C22  5C01               	subwf	?_strlen^0,w,c
  1324  000C24  51B0               	movf	(_i+1)& (0+255),w,b
  1325  000C26  5802               	subwfb	(?_strlen+1)^0,w,c
  1326  000C28  B0D8               	btfsc	status,0,c
  1327  000C2A  EF19  F006         	goto	u1221
  1328  000C2E  EF1B  F006         	goto	u1220
  1329  000C32                     u1221:
  1330  000C32  EFFD  F005         	goto	l1920
  1331  000C36                     u1220:
  1332  000C36  EF2A  F004         	goto	l1818
  1333  000C3A                     l1926:
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 126:                 for(i=0; i<=strlen(text8); i++){
  1337  000C3A  0E00               	movlw	0
  1338  000C3C  6FB0               	movwf	(_i+1)& (0+255),b
  1339  000C3E  0E00               	movlw	0
  1340  000C40  6FAF               	movwf	_i& (0+255),b
  1341  000C42  EF2F  F006         	goto	l1932
  1342  000C46                     l1928:
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 127:                     WriteLCD(text8[i]);
  1346  000C46  0E74               	movlw	low _text8
  1347  000C48  25AF               	addwf	_i& (0+255),w,b
  1348  000C4A  6ED9               	movwf	fsr2l,c
  1349  000C4C  0E00               	movlw	high _text8
  1350  000C4E  21B0               	addwfc	(_i+1)& (0+255),w,b
  1351  000C50  6EDA               	movwf	fsr2h,c
  1352  000C52  50DF               	movf	indf2,w,c
  1353  000C54  EC10  F00C         	call	_WriteLCD
  1354  000C58                     
  1355                           ;main.c: 128:                 }
  1356  000C58  0100               	movlb	0	; () banked
  1357  000C5A  4BAF               	infsnz	_i& (0+255),f,b
  1358  000C5C  2BB0               	incf	(_i+1)& (0+255),f,b
  1359  000C5E                     l1932:
  1360                           
  1361                           ; BSR set to: 0
  1362  000C5E  0E74               	movlw	low _text8
  1363  000C60  6E01               	movwf	strlen@s^0,c
  1364  000C62  0E00               	movlw	high _text8
  1365  000C64  6E02               	movwf	(strlen@s+1)^0,c
  1366  000C66  ECB3  F00B         	call	_strlen	;wreg free
  1367  000C6A  0100               	movlb	0	; () banked
  1368  000C6C  51AF               	movf	_i& (0+255),w,b
  1369  000C6E  5C01               	subwf	?_strlen^0,w,c
  1370  000C70  51B0               	movf	(_i+1)& (0+255),w,b
  1371  000C72  5802               	subwfb	(?_strlen+1)^0,w,c
  1372  000C74  B0D8               	btfsc	status,0,c
  1373  000C76  EF3F  F006         	goto	u1231
  1374  000C7A  EF41  F006         	goto	u1230
  1375  000C7E                     u1231:
  1376  000C7E  EF23  F006         	goto	l1928
  1377  000C82                     u1230:
  1378  000C82  EF2A  F004         	goto	l1818
  1379  000C86                     l1934:
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 131:                 for(i=0; i<=strlen(text9); i++){
  1383  000C86  0E00               	movlw	0
  1384  000C88  6FB0               	movwf	(_i+1)& (0+255),b
  1385  000C8A  0E00               	movlw	0
  1386  000C8C  6FAF               	movwf	_i& (0+255),b
  1387  000C8E  EF55  F006         	goto	l1940
  1388  000C92                     l1936:
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;main.c: 132:                     WriteLCD(text9[i]);
  1392  000C92  0E6F               	movlw	low _text9
  1393  000C94  25AF               	addwf	_i& (0+255),w,b
  1394  000C96  6ED9               	movwf	fsr2l,c
  1395  000C98  0E00               	movlw	high _text9
  1396  000C9A  21B0               	addwfc	(_i+1)& (0+255),w,b
  1397  000C9C  6EDA               	movwf	fsr2h,c
  1398  000C9E  50DF               	movf	indf2,w,c
  1399  000CA0  EC10  F00C         	call	_WriteLCD
  1400  000CA4                     
  1401                           ;main.c: 133:                 }
  1402  000CA4  0100               	movlb	0	; () banked
  1403  000CA6  4BAF               	infsnz	_i& (0+255),f,b
  1404  000CA8  2BB0               	incf	(_i+1)& (0+255),f,b
  1405  000CAA                     l1940:
  1406                           
  1407                           ; BSR set to: 0
  1408  000CAA  0E6F               	movlw	low _text9
  1409  000CAC  6E01               	movwf	strlen@s^0,c
  1410  000CAE  0E00               	movlw	high _text9
  1411  000CB0  6E02               	movwf	(strlen@s+1)^0,c
  1412  000CB2  ECB3  F00B         	call	_strlen	;wreg free
  1413  000CB6  0100               	movlb	0	; () banked
  1414  000CB8  51AF               	movf	_i& (0+255),w,b
  1415  000CBA  5C01               	subwf	?_strlen^0,w,c
  1416  000CBC  51B0               	movf	(_i+1)& (0+255),w,b
  1417  000CBE  5802               	subwfb	(?_strlen+1)^0,w,c
  1418  000CC0  B0D8               	btfsc	status,0,c
  1419  000CC2  EF65  F006         	goto	u1241
  1420  000CC6  EF67  F006         	goto	u1240
  1421  000CCA                     u1241:
  1422  000CCA  EF49  F006         	goto	l1936
  1423  000CCE                     u1240:
  1424  000CCE  EF2A  F004         	goto	l1818
  1425  000CD2                     l1944:
  1426                           
  1427                           ; BSR set to: 0
  1428  000CD2  0E60               	movlw	low _days
  1429  000CD4  25D9               	addwf	_DatosCalendario& (0+255),w,b
  1430  000CD6  6ED9               	movwf	fsr2l,c
  1431  000CD8  6ADA               	clrf	fsr2h,c
  1432  000CDA  0E00               	movlw	high _days
  1433  000CDC  22DA               	addwfc	fsr2h,f,c
  1434  000CDE  50DF               	movf	indf2,w,c
  1435  000CE0  6E5E               	movwf	??_main^0,c
  1436  000CE2  6A5F               	clrf	(??_main+1)^0,c
  1437                           
  1438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1439                           ; Switch size 1, requested type "simple"
  1440                           ; Number of cases is 1, Range of values is 0 to 0
  1441                           ; switch strategies available:
  1442                           ; Name         Instructions Cycles
  1443                           ; simple_byte            4     3 (average)
  1444                           ;	Chosen strategy is simple_byte
  1445  000CE4  505F               	movf	(??_main+1)^0,w,c
  1446  000CE6  0A00               	xorlw	0	; case 0
  1447  000CE8  B4D8               	btfsc	status,2,c
  1448  000CEA  EF79  F006         	goto	l1970
  1449  000CEE  EF2A  F004         	goto	l1818
  1450  000CF2                     l1970:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ; Switch size 1, requested type "simple"
  1454                           ; Number of cases is 7, Range of values is 70 to 116
  1455                           ; switch strategies available:
  1456                           ; Name         Instructions Cycles
  1457                           ; simple_byte           22    12 (average)
  1458                           ;	Chosen strategy is simple_byte
  1459  000CF2  505E               	movf	??_main^0,w,c
  1460  000CF4  0A46               	xorlw	70	; case 70
  1461  000CF6  B4D8               	btfsc	status,2,c
  1462  000CF8  EF1D  F006         	goto	l1926
  1463  000CFC  0A0B               	xorlw	11	; case 77
  1464  000CFE  B4D8               	btfsc	status,2,c
  1465  000D00  EF85  F005         	goto	l1894
  1466  000D04  0A1E               	xorlw	30	; case 83
  1467  000D06  B4D8               	btfsc	status,2,c
  1468  000D08  EF5F  F005         	goto	l1886
  1469  000D0C  0A07               	xorlw	7	; case 84
  1470  000D0E  B4D8               	btfsc	status,2,c
  1471  000D10  EFAB  F005         	goto	l1902
  1472  000D14  0A03               	xorlw	3	; case 87
  1473  000D16  B4D8               	btfsc	status,2,c
  1474  000D18  EFD1  F005         	goto	l1910
  1475  000D1C  0A24               	xorlw	36	; case 115
  1476  000D1E  B4D8               	btfsc	status,2,c
  1477  000D20  EF43  F006         	goto	l1934
  1478  000D24  0A07               	xorlw	7	; case 116
  1479  000D26  B4D8               	btfsc	status,2,c
  1480  000D28  EFF7  F005         	goto	l1918
  1481  000D2C  EF2A  F004         	goto	l1818
  1482  000D30  EF00  F000         	goto	start
  1483  000D34                     __end_of_main:
  1484                           	opt callstack 0
  1485                           
  1486 ;; *************** function _sprintf *****************
  1487 ;; Defined at:
  1488 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1491 ;;		 -> dma(20), smh(20), 
  1492 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1493 ;;		 -> STR_3(13), STR_2(13), STR_1(13), 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  f               6   14[BANK0 ] struct _IO_FILE
  1496 ;;  ap              2   12[BANK0 ] PTR void [1]
  1497 ;;		 -> ?_sprintf(2), 
  1498 ;;  ret             2    0        int 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  2    0[BANK0 ] int 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1508 ;;      Params:         0      10       0       0       0       0       0       0       0
  1509 ;;      Locals:         0      10       0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1511 ;;      Totals:         0      20       0       0       0       0       0       0       0
  1512 ;;Total ram usage:       20 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    7
  1515 ;; This function calls:
  1516 ;;		_vfprintf
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text1
  1523  001558                     __ptext1:
  1524                           	opt callstack 0
  1525  001558                     _sprintf:
  1526                           	opt callstack 23
  1527  001558  0EE4               	movlw	low (?_sprintf+4)
  1528  00155A  0100               	movlb	0	; () banked
  1529  00155C  6FEC               	movwf	sprintf@ap& (0+255),b
  1530  00155E  0E00               	movlw	high (?_sprintf+4)
  1531  001560  6FED               	movwf	(sprintf@ap+1)& (0+255),b
  1532  001562  C0E0  F0EE         	movff	sprintf@s,sprintf@f
  1533  001566  C0E1  F0EF         	movff	sprintf@s+1,sprintf@f+1
  1534  00156A                     
  1535                           ; BSR set to: 0
  1536  00156A  0E00               	movlw	0
  1537  00156C  6FF1               	movwf	(sprintf@f+3)& (0+255),b
  1538  00156E  0E00               	movlw	0
  1539  001570  6FF0               	movwf	(sprintf@f+2)& (0+255),b
  1540  001572                     
  1541                           ; BSR set to: 0
  1542  001572  0E00               	movlw	0
  1543  001574  6FF3               	movwf	(sprintf@f+5)& (0+255),b
  1544  001576  0E00               	movlw	0
  1545  001578  6FF2               	movwf	(sprintf@f+4)& (0+255),b
  1546  00157A                     
  1547                           ; BSR set to: 0
  1548  00157A  0EEE               	movlw	low sprintf@f
  1549  00157C  6E56               	movwf	vfprintf@fp^0,c
  1550  00157E  0E00               	movlw	high sprintf@f
  1551  001580  6E57               	movwf	(vfprintf@fp+1)^0,c
  1552  001582  C0E2  F058         	movff	sprintf@fmt,vfprintf@fmt
  1553  001586  C0E3  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1554  00158A  0EEC               	movlw	low sprintf@ap
  1555  00158C  6E5A               	movwf	vfprintf@ap^0,c
  1556  00158E  0E00               	movlw	high sprintf@ap
  1557  001590  6E5B               	movwf	(vfprintf@ap+1)^0,c
  1558  001592  EC4C  F00A         	call	_vfprintf	;wreg free
  1559  001596  0100               	movlb	0	; () banked
  1560  001598  51F0               	movf	(sprintf@f+2)& (0+255),w,b
  1561  00159A  25E0               	addwf	sprintf@s& (0+255),w,b
  1562  00159C  6ED9               	movwf	fsr2l,c
  1563  00159E  51F1               	movf	(sprintf@f+3)& (0+255),w,b
  1564  0015A0  21E1               	addwfc	(sprintf@s+1)& (0+255),w,b
  1565  0015A2  6EDA               	movwf	fsr2h,c
  1566  0015A4  0E00               	movlw	0
  1567  0015A6  6EDF               	movwf	indf2,c
  1568  0015A8                     
  1569                           ; BSR set to: 0
  1570  0015A8  0012               	return		;funcret
  1571  0015AA                     __end_of_sprintf:
  1572                           	opt callstack 0
  1573                           
  1574 ;; *************** function _vfprintf *****************
  1575 ;; Defined at:
  1576 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
  1579 ;;		 -> sprintf@f(6), 
  1580 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
  1581 ;;		 -> STR_3(13), STR_2(13), STR_1(13), 
  1582 ;;  ap              2   89[COMRAM] PTR PTR void 
  1583 ;;		 -> sprintf@ap(2), 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
  1586 ;;		 -> STR_3(13), STR_2(13), STR_1(13), 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  2   85[COMRAM] int 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1596 ;;      Params:         6       0       0       0       0       0       0       0       0
  1597 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1598 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1599 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1600 ;;Total ram usage:        8 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    6
  1603 ;; This function calls:
  1604 ;;		_vfpfcnvrt
  1605 ;; This function is called by:
  1606 ;;		_sprintf
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text2
  1611  001498                     __ptext2:
  1612                           	opt callstack 0
  1613  001498                     _vfprintf:
  1614                           	opt callstack 23
  1615  001498                     
  1616                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1617  001498  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
  1618  00149C  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1619  0014A0                     
  1620                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1621  0014A0  0E00               	movlw	0
  1622  0014A2  0100               	movlb	0	; () banked
  1623  0014A4  6FA4               	movwf	(_nout+1)& (0+255),b
  1624  0014A6  0E00               	movlw	0
  1625  0014A8  6FA3               	movwf	_nout& (0+255),b
  1626                           
  1627                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1628  0014AA  EF6A  F00A         	goto	l1744
  1629  0014AE                     l1742:
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1633  0014AE  C056  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  1634  0014B2  C057  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1635  0014B6  0E5C               	movlw	low vfprintf@cfmt
  1636  0014B8  6E45               	movwf	vfpfcnvrt@fmt^0,c
  1637  0014BA  0E00               	movlw	high vfprintf@cfmt
  1638  0014BC  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1639  0014BE  C05A  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  1640  0014C2  C05B  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1641  0014C6  EC07  F008         	call	_vfpfcnvrt	;wreg free
  1642  0014CA  5043               	movf	?_vfpfcnvrt^0,w,c
  1643  0014CC  0100               	movlb	0	; () banked
  1644  0014CE  27A3               	addwf	_nout& (0+255),f,b
  1645  0014D0  5044               	movf	(?_vfpfcnvrt+1)^0,w,c
  1646  0014D2  23A4               	addwfc	(_nout+1)& (0+255),f,b
  1647  0014D4                     l1744:
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1651  0014D4  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
  1652  0014D8  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1653  0014DC                     	if	0	;tblptru may be non-zero
  1654  0014DC                     	endif
  1655  0014DC                     	if	0	;tblptru may be non-zero
  1656  0014DC                     	endif
  1657  0014DC  0008               	tblrd		*
  1658  0014DE  50F5               	movf	tablat,w,c
  1659  0014E0  0900               	iorlw	0
  1660  0014E2  A4D8               	btfss	status,2,c
  1661  0014E4  EF76  F00A         	goto	u1071
  1662  0014E8  EF78  F00A         	goto	u1070
  1663  0014EC                     u1071:
  1664  0014EC  EF57  F00A         	goto	l1742
  1665  0014F0                     u1070:
  1666  0014F0                     
  1667                           ; BSR set to: 0
  1668                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1669  0014F0  C0A3  F056         	movff	_nout,?_vfprintf
  1670  0014F4  C0A4  F057         	movff	_nout+1,?_vfprintf+1
  1671  0014F8                     
  1672                           ; BSR set to: 0
  1673  0014F8  0012               	return		;funcret
  1674  0014FA                     __end_of_vfprintf:
  1675                           	opt callstack 0
  1676                           
  1677 ;; *************** function _vfpfcnvrt *****************
  1678 ;; Defined at:
  1679 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  1682 ;;		 -> sprintf@f(6), 
  1683 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  1684 ;;		 -> vfprintf@cfmt(2), 
  1685 ;;  ap              2   70[COMRAM] PTR PTR void 
  1686 ;;		 -> sprintf@ap(2), 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  llu             8   76[COMRAM] unsigned long long 
  1689 ;;  ll              8    0        long long 
  1690 ;;  f               4    0        long long 
  1691 ;;  vp              3    0        PTR void 
  1692 ;;  ct              3    0        unsigned char [3]
  1693 ;;  cp              3    0        PTR unsigned char 
  1694 ;;  i               2    0        int 
  1695 ;;  done            2    0        int 
  1696 ;;  c               1   84[COMRAM] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  2   66[COMRAM] int 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1706 ;;      Params:         6       0       0       0       0       0       0       0       0
  1707 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1708 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1709 ;;      Totals:        19       0       0       0       0       0       0       0       0
  1710 ;;Total ram usage:       19 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    5
  1713 ;; This function calls:
  1714 ;;		_fputc
  1715 ;;		_xtoa
  1716 ;; This function is called by:
  1717 ;;		_vfprintf
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text3
  1722  00100E                     __ptext3:
  1723                           	opt callstack 0
  1724  00100E                     _vfpfcnvrt:
  1725                           	opt callstack 23
  1726  00100E                     
  1727                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1728  00100E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1729  001012  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1730  001016  CFDE FFF6          	movff	postinc2,tblptrl
  1731  00101A  CFDD FFF7          	movff	postdec2,tblptrh
  1732  00101E                     	if	0	;tblptru may be non-zero
  1733  00101E                     	endif
  1734  00101E                     	if	0	;tblptru may be non-zero
  1735  00101E                     	endif
  1736  00101E  0008               	tblrd		*
  1737  001020  50F5               	movf	tablat,w,c
  1738  001022  0A25               	xorlw	37
  1739  001024  A4D8               	btfss	status,2,c
  1740  001026  EF17  F008         	goto	u1011
  1741  00102A  EF19  F008         	goto	u1010
  1742  00102E                     u1011:
  1743  00102E  EFD3  F008         	goto	l1696
  1744  001032                     u1010:
  1745  001032                     
  1746                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1747  001032  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1748  001036  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1749  00103A  2ADE               	incf	postinc2,f,c
  1750  00103C  0E00               	movlw	0
  1751  00103E  22DD               	addwfc	postdec2,f,c
  1752  001040                     
  1753                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1754  001040  0E00               	movlw	0
  1755  001042  0100               	movlb	0	; () banked
  1756  001044  6FA6               	movwf	(_width+1)& (0+255),b
  1757  001046  0E00               	movlw	0
  1758  001048  6FA5               	movwf	_width& (0+255),b
  1759  00104A  C0A5  F0A9         	movff	_width,_flags
  1760  00104E  C0A6  F0AA         	movff	_width+1,_flags+1
  1761  001052                     
  1762                           ; BSR set to: 0
  1763                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1764  001052  69A7               	setf	_prec& (0+255),b
  1765  001054  69A8               	setf	(_prec+1)& (0+255),b
  1766  001056                     
  1767                           ; BSR set to: 0
  1768                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
  1769  001056  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1770  00105A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1771  00105E  CFDE FFF6          	movff	postinc2,tblptrl
  1772  001062  CFDD FFF7          	movff	postdec2,tblptrh
  1773  001066                     	if	0	;tblptru may be non-zero
  1774  001066                     	endif
  1775  001066                     	if	0	;tblptru may be non-zero
  1776  001066                     	endif
  1777  001066  0008               	tblrd		*
  1778  001068  50F5               	movf	tablat,w,c
  1779  00106A  0A78               	xorlw	120
  1780  00106C  B4D8               	btfsc	status,2,c
  1781  00106E  EF3B  F008         	goto	u1021
  1782  001072  EF3D  F008         	goto	u1020
  1783  001076                     u1021:
  1784  001076  EF4F  F008         	goto	l1670
  1785  00107A                     u1020:
  1786  00107A                     
  1787                           ; BSR set to: 0
  1788  00107A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1789  00107E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1790  001082  CFDE FFF6          	movff	postinc2,tblptrl
  1791  001086  CFDD FFF7          	movff	postdec2,tblptrh
  1792  00108A                     	if	0	;tblptru may be non-zero
  1793  00108A                     	endif
  1794  00108A                     	if	0	;tblptru may be non-zero
  1795  00108A                     	endif
  1796  00108A  0008               	tblrd		*
  1797  00108C  50F5               	movf	tablat,w,c
  1798  00108E  0A58               	xorlw	88
  1799  001090  A4D8               	btfss	status,2,c
  1800  001092  EF4D  F008         	goto	u1031
  1801  001096  EF4F  F008         	goto	u1030
  1802  00109A                     u1031:
  1803  00109A  EF9D  F008         	goto	l1680
  1804  00109E                     u1030:
  1805  00109E                     l1670:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
  1809  00109E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1810  0010A2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1811  0010A6  CFDE FFF6          	movff	postinc2,tblptrl
  1812  0010AA  CFDD FFF7          	movff	postdec2,tblptrh
  1813  0010AE                     	if	0	;tblptru may be non-zero
  1814  0010AE                     	endif
  1815  0010AE                     	if	0	;tblptru may be non-zero
  1816  0010AE                     	endif
  1817  0010AE  0008               	tblrd		*
  1818  0010B0  CFF5 F055          	movff	tablat,vfpfcnvrt@c
  1819  0010B4                     
  1820                           ; BSR set to: 0
  1821                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
  1822  0010B4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1823  0010B8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1824  0010BC  2ADE               	incf	postinc2,f,c
  1825  0010BE  0E00               	movlw	0
  1826  0010C0  22DD               	addwfc	postdec2,f,c
  1827  0010C2                     
  1828                           ; BSR set to: 0
  1829                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1830  0010C2  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1831  0010C6  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1832  0010CA  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1833  0010CE  0E02               	movlw	2
  1834  0010D0  26DE               	addwf	postinc2,f,c
  1835  0010D2  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1836  0010D6  0E00               	movlw	0
  1837  0010D8  22DD               	addwfc	postdec2,f,c
  1838  0010DA  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1839  0010DE  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1840  0010E2  CFDE F04B          	movff	postinc2,??_vfpfcnvrt+2
  1841  0010E6  CFDD F04C          	movff	postdec2,??_vfpfcnvrt+3
  1842  0010EA  C04B  F04D         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1843  0010EE  C04C  F04E         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1844  0010F2  6A4F               	clrf	(vfpfcnvrt@llu+2)^0,c
  1845  0010F4  6A50               	clrf	(vfpfcnvrt@llu+3)^0,c
  1846  0010F6  6A51               	clrf	(vfpfcnvrt@llu+4)^0,c
  1847  0010F8  6A52               	clrf	(vfpfcnvrt@llu+5)^0,c
  1848  0010FA  6A53               	clrf	(vfpfcnvrt@llu+6)^0,c
  1849  0010FC  6A54               	clrf	(vfpfcnvrt@llu+7)^0,c
  1850  0010FE                     
  1851                           ; BSR set to: 0
  1852                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
  1853  0010FE  C043  F01C         	movff	vfpfcnvrt@fp,xtoa@fp
  1854  001102  C044  F01D         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  1855  001106  C04D  F01E         	movff	vfpfcnvrt@llu,xtoa@d
  1856  00110A  C04E  F01F         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  1857  00110E  C04F  F020         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  1858  001112  C050  F021         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  1859  001116  C051  F022         	movff	vfpfcnvrt@llu+4,xtoa@d+4
  1860  00111A  C052  F023         	movff	vfpfcnvrt@llu+5,xtoa@d+5
  1861  00111E  C053  F024         	movff	vfpfcnvrt@llu+6,xtoa@d+6
  1862  001122  C054  F025         	movff	vfpfcnvrt@llu+7,xtoa@d+7
  1863  001126  C055  F026         	movff	vfpfcnvrt@c,xtoa@x
  1864  00112A  EC9A  F006         	call	_xtoa	;wreg free
  1865  00112E  C01C  F043         	movff	?_xtoa,?_vfpfcnvrt
  1866  001132  C01D  F044         	movff	?_xtoa+1,?_vfpfcnvrt+1
  1867  001136  EFEE  F008         	goto	l292
  1868  00113A                     l1680:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1872  00113A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1873  00113E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1874  001142  CFDE FFF6          	movff	postinc2,tblptrl
  1875  001146  CFDD FFF7          	movff	postdec2,tblptrh
  1876  00114A                     	if	0	;tblptru may be non-zero
  1877  00114A                     	endif
  1878  00114A                     	if	0	;tblptru may be non-zero
  1879  00114A                     	endif
  1880  00114A  0008               	tblrd		*
  1881  00114C  50F5               	movf	tablat,w,c
  1882  00114E  0A25               	xorlw	37
  1883  001150  A4D8               	btfss	status,2,c
  1884  001152  EFAD  F008         	goto	u1041
  1885  001156  EFAF  F008         	goto	u1040
  1886  00115A                     u1041:
  1887  00115A  EFC6  F008         	goto	l1690
  1888  00115E                     u1040:
  1889  00115E                     
  1890                           ; BSR set to: 0
  1891                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1892  00115E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1893  001162  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1894  001166  2ADE               	incf	postinc2,f,c
  1895  001168  0E00               	movlw	0
  1896  00116A  22DD               	addwfc	postdec2,f,c
  1897  00116C                     
  1898                           ; BSR set to: 0
  1899                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1900  00116C  0E00               	movlw	0
  1901  00116E  6E02               	movwf	(fputc@c+1)^0,c
  1902  001170  0E25               	movlw	37
  1903  001172  6E01               	movwf	fputc@c^0,c
  1904  001174  C043  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1905  001178  C044  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1906  00117C  ECEF  F008         	call	_fputc	;wreg free
  1907  001180                     l1686:
  1908                           
  1909                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1910  001180  0E00               	movlw	0
  1911  001182  6E44               	movwf	(?_vfpfcnvrt+1)^0,c
  1912  001184  0E01               	movlw	1
  1913  001186  6E43               	movwf	?_vfpfcnvrt^0,c
  1914  001188  EFEE  F008         	goto	l292
  1915  00118C                     l1690:
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1919  00118C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1920  001190  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1921  001194  2ADE               	incf	postinc2,f,c
  1922  001196  0E00               	movlw	0
  1923  001198  22DD               	addwfc	postdec2,f,c
  1924  00119A                     
  1925                           ; BSR set to: 0
  1926                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1927  00119A  0E00               	movlw	0
  1928  00119C  6E44               	movwf	(?_vfpfcnvrt+1)^0,c
  1929  00119E  0E00               	movlw	0
  1930  0011A0  6E43               	movwf	?_vfpfcnvrt^0,c
  1931  0011A2  EFEE  F008         	goto	l292
  1932  0011A6                     l1696:
  1933                           
  1934                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1935  0011A6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1936  0011AA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1937  0011AE  CFDE FFF6          	movff	postinc2,tblptrl
  1938  0011B2  CFDD FFF7          	movff	postdec2,tblptrh
  1939  0011B6                     	if	0	;tblptru may be non-zero
  1940  0011B6                     	endif
  1941  0011B6                     	if	0	;tblptru may be non-zero
  1942  0011B6                     	endif
  1943  0011B6  0008               	tblrd		*
  1944  0011B8  50F5               	movf	tablat,w,c
  1945  0011BA  6E01               	movwf	fputc@c^0,c
  1946  0011BC  6A02               	clrf	(fputc@c+1)^0,c
  1947  0011BE  C043  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1948  0011C2  C044  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1949  0011C6  ECEF  F008         	call	_fputc	;wreg free
  1950  0011CA                     
  1951                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1952  0011CA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1953  0011CE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1954  0011D2  2ADE               	incf	postinc2,f,c
  1955  0011D4  0E00               	movlw	0
  1956  0011D6  22DD               	addwfc	postdec2,f,c
  1957  0011D8  EFC0  F008         	goto	l1686
  1958  0011DC                     l292:
  1959  0011DC  0012               	return		;funcret
  1960  0011DE                     __end_of_vfpfcnvrt:
  1961                           	opt callstack 0
  1962                           
  1963 ;; *************** function _xtoa *****************
  1964 ;; Defined at:
  1965 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1968 ;;		 -> sprintf@f(6), 
  1969 ;;  d               8   29[COMRAM] unsigned long long 
  1970 ;;  x               1   37[COMRAM] unsigned char 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;  n               8   54[COMRAM] unsigned long long 
  1973 ;;  c               2   64[COMRAM] int 
  1974 ;;  i               2   62[COMRAM] int 
  1975 ;;  w               2   52[COMRAM] int 
  1976 ;;  p               2   50[COMRAM] int 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2   27[COMRAM] int 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1986 ;;      Params:        11       0       0       0       0       0       0       0       0
  1987 ;;      Locals:        20       0       0       0       0       0       0       0       0
  1988 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1989 ;;      Totals:        39       0       0       0       0       0       0       0       0
  1990 ;;Total ram usage:       39 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    4
  1993 ;; This function calls:
  1994 ;;		_isalpha
  1995 ;;		_isupper
  1996 ;;		_pad
  1997 ;;		_toupper
  1998 ;; This function is called by:
  1999 ;;		_vfpfcnvrt
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text4
  2004  000D34                     __ptext4:
  2005                           	opt callstack 0
  2006  000D34                     _xtoa:
  2007                           	opt callstack 23
  2008  000D34                     
  2009                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
  2010  000D34  0100               	movlb	0	; () banked
  2011  000D36  BFA8               	btfsc	(_prec+1)& (0+255),7,b
  2012  000D38  EFA0  F006         	goto	u821
  2013  000D3C  EFA2  F006         	goto	u820
  2014  000D40                     u821:
  2015  000D40  EFA3  F006         	goto	l1578
  2016  000D44                     u820:
  2017  000D44                     
  2018                           ; BSR set to: 0
  2019                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
  2020  000D44  93A9               	bcf	_flags& (0+255),1,b
  2021  000D46                     l1578:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
  2025  000D46  BFA8               	btfsc	(_prec+1)& (0+255),7,b
  2026  000D48  EFB0  F006         	goto	u830
  2027  000D4C  51A8               	movf	(_prec+1)& (0+255),w,b
  2028  000D4E  E106               	bnz	u831
  2029  000D50  05A7               	decf	_prec& (0+255),w,b
  2030  000D52  B0D8               	btfsc	status,0,c
  2031  000D54  EFAE  F006         	goto	u831
  2032  000D58  EFB0  F006         	goto	u830
  2033  000D5C                     u831:
  2034  000D5C  EFB6  F006         	goto	l260
  2035  000D60                     u830:
  2036  000D60                     
  2037                           ; BSR set to: 0
  2038  000D60  0E00               	movlw	0
  2039  000D62  6E34               	movwf	(xtoa@p+1)^0,c
  2040  000D64  0E01               	movlw	1
  2041  000D66  6E33               	movwf	xtoa@p^0,c
  2042  000D68  EFBA  F006         	goto	l262
  2043  000D6C                     l260:
  2044                           
  2045                           ; BSR set to: 0
  2046  000D6C  C0A7  F033         	movff	_prec,xtoa@p
  2047  000D70  C0A8  F034         	movff	_prec+1,xtoa@p+1
  2048  000D74                     l262:
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
  2052  000D74  C0A5  F035         	movff	_width,xtoa@w
  2053  000D78  C0A6  F036         	movff	_width+1,xtoa@w+1
  2054                           
  2055                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
  2056  000D7C  A9A9               	btfss	_flags& (0+255),4,b
  2057  000D7E  EFC3  F006         	goto	u841
  2058  000D82  EFC5  F006         	goto	u840
  2059  000D86                     u841:
  2060  000D86  EFC9  F006         	goto	l1584
  2061  000D8A                     u840:
  2062  000D8A                     
  2063                           ; BSR set to: 0
  2064                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
  2065  000D8A  0EFE               	movlw	254
  2066  000D8C  2635               	addwf	xtoa@w^0,f,c
  2067  000D8E  0EFF               	movlw	255
  2068  000D90  2236               	addwfc	(xtoa@w+1)^0,f,c
  2069  000D92                     l1584:
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
  2073  000D92  C01E  F037         	movff	xtoa@d,xtoa@n
  2074  000D96  C01F  F038         	movff	xtoa@d+1,xtoa@n+1
  2075  000D9A  C020  F039         	movff	xtoa@d+2,xtoa@n+2
  2076  000D9E  C021  F03A         	movff	xtoa@d+3,xtoa@n+3
  2077  000DA2  C022  F03B         	movff	xtoa@d+4,xtoa@n+4
  2078  000DA6  C023  F03C         	movff	xtoa@d+5,xtoa@n+5
  2079  000DAA  C024  F03D         	movff	xtoa@d+6,xtoa@n+6
  2080  000DAE  C025  F03E         	movff	xtoa@d+7,xtoa@n+7
  2081  000DB2                     
  2082                           ; BSR set to: 0
  2083                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
  2084  000DB2  0E00               	movlw	0
  2085  000DB4  6E40               	movwf	(xtoa@i+1)^0,c
  2086  000DB6  0E1F               	movlw	31
  2087  000DB8  6E3F               	movwf	xtoa@i^0,c
  2088  000DBA                     
  2089                           ; BSR set to: 0
  2090                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
  2091  000DBA  0E00               	movlw	0
  2092  000DBC  0101               	movlb	1	; () banked
  2093  000DBE  6F33               	movwf	(_dbuf+31)& (0+255),b
  2094                           
  2095                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2096  000DC0  EF95  F007         	goto	l1620
  2097  000DC4                     l1590:
  2098                           
  2099                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
  2100  000DC4  063F               	decf	xtoa@i^0,f,c
  2101  000DC6  A0D8               	btfss	status,0,c
  2102  000DC8  0640               	decf	(xtoa@i+1)^0,f,c
  2103  000DCA                     
  2104                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
  2105  000DCA  0E0F               	movlw	15
  2106  000DCC  1437               	andwf	xtoa@n^0,w,c
  2107  000DCE  6E41               	movwf	xtoa@c^0,c
  2108  000DD0  6A42               	clrf	(xtoa@c+1)^0,c
  2109  000DD2                     
  2110                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
  2111  000DD2  BE42               	btfsc	(xtoa@c+1)^0,7,c
  2112  000DD4  EFF5  F006         	goto	u851
  2113  000DD8  5042               	movf	(xtoa@c+1)^0,w,c
  2114  000DDA  E109               	bnz	u850
  2115  000DDC  0E0A               	movlw	10
  2116  000DDE  5C41               	subwf	xtoa@c^0,w,c
  2117  000DE0  A0D8               	btfss	status,0,c
  2118  000DE2  EFF5  F006         	goto	u851
  2119  000DE6  EFF7  F006         	goto	u850
  2120  000DEA                     u851:
  2121  000DEA  EFFF  F006         	goto	l1598
  2122  000DEE                     u850:
  2123  000DEE  0E57               	movlw	87
  2124  000DF0  2441               	addwf	xtoa@c^0,w,c
  2125  000DF2  6E41               	movwf	xtoa@c^0,c
  2126  000DF4  0E00               	movlw	0
  2127  000DF6  2042               	addwfc	(xtoa@c+1)^0,w,c
  2128  000DF8  6E42               	movwf	(xtoa@c+1)^0,c
  2129  000DFA  EF05  F007         	goto	l269
  2130  000DFE                     l1598:
  2131  000DFE  0E30               	movlw	48
  2132  000E00  2441               	addwf	xtoa@c^0,w,c
  2133  000E02  6E41               	movwf	xtoa@c^0,c
  2134  000E04  0E00               	movlw	0
  2135  000E06  2042               	addwfc	(xtoa@c+1)^0,w,c
  2136  000E08  6E42               	movwf	(xtoa@c+1)^0,c
  2137  000E0A                     l269:
  2138  000E0A  0EBF               	movlw	191
  2139  000E0C  6E27               	movwf	??_xtoa^0,c
  2140  000E0E  0EFF               	movlw	255
  2141  000E10  6E28               	movwf	(??_xtoa+1)^0,c
  2142  000E12  5026               	movf	xtoa@x^0,w,c
  2143  000E14  6E29               	movwf	(??_xtoa+2)^0,c
  2144  000E16  6A2A               	clrf	(??_xtoa+3)^0,c
  2145  000E18  5027               	movf	??_xtoa^0,w,c
  2146  000E1A  2629               	addwf	(??_xtoa+2)^0,f,c
  2147  000E1C  5028               	movf	(??_xtoa+1)^0,w,c
  2148  000E1E  222A               	addwfc	(??_xtoa+3)^0,f,c
  2149  000E20  502A               	movf	(??_xtoa+3)^0,w,c
  2150  000E22  E10A               	bnz	u860
  2151  000E24  0E1A               	movlw	26
  2152  000E26  5C29               	subwf	(??_xtoa+2)^0,w,c
  2153  000E28  A0D8               	btfss	status,0,c
  2154  000E2A  EF19  F007         	goto	u861
  2155  000E2E  EF1C  F007         	goto	u860
  2156  000E32                     u861:
  2157  000E32  0E01               	movlw	1
  2158  000E34  EF1D  F007         	goto	u870
  2159  000E38                     u860:
  2160  000E38  0E00               	movlw	0
  2161  000E3A                     u870:
  2162  000E3A  6E2F               	movwf	_xtoa$301^0,c
  2163  000E3C  6A30               	clrf	(_xtoa$301+1)^0,c
  2164  000E3E  502F               	movf	_xtoa$301^0,w,c
  2165  000E40  1030               	iorwf	(_xtoa$301+1)^0,w,c
  2166  000E42  B4D8               	btfsc	status,2,c
  2167  000E44  EF26  F007         	goto	u881
  2168  000E48  EF28  F007         	goto	u880
  2169  000E4C                     u881:
  2170  000E4C  EF58  F007         	goto	l1612
  2171  000E50                     u880:
  2172  000E50  0E9F               	movlw	159
  2173  000E52  6E27               	movwf	??_xtoa^0,c
  2174  000E54  0EFF               	movlw	255
  2175  000E56  6E28               	movwf	(??_xtoa+1)^0,c
  2176  000E58  0E20               	movlw	32
  2177  000E5A  1041               	iorwf	xtoa@c^0,w,c
  2178  000E5C  6E29               	movwf	(??_xtoa+2)^0,c
  2179  000E5E  0E00               	movlw	0
  2180  000E60  1042               	iorwf	(xtoa@c+1)^0,w,c
  2181  000E62  6E2A               	movwf	(??_xtoa+3)^0,c
  2182  000E64  5027               	movf	??_xtoa^0,w,c
  2183  000E66  2629               	addwf	(??_xtoa+2)^0,f,c
  2184  000E68  5028               	movf	(??_xtoa+1)^0,w,c
  2185  000E6A  222A               	addwfc	(??_xtoa+3)^0,f,c
  2186  000E6C  502A               	movf	(??_xtoa+3)^0,w,c
  2187  000E6E  E10A               	bnz	u890
  2188  000E70  0E1A               	movlw	26
  2189  000E72  5C29               	subwf	(??_xtoa+2)^0,w,c
  2190  000E74  A0D8               	btfss	status,0,c
  2191  000E76  EF3F  F007         	goto	u891
  2192  000E7A  EF42  F007         	goto	u890
  2193  000E7E                     u891:
  2194  000E7E  0E01               	movlw	1
  2195  000E80  EF43  F007         	goto	u900
  2196  000E84                     u890:
  2197  000E84  0E00               	movlw	0
  2198  000E86                     u900:
  2199  000E86  6E31               	movwf	_xtoa$302^0,c
  2200  000E88  6A32               	clrf	(_xtoa$302+1)^0,c
  2201  000E8A  5031               	movf	_xtoa$302^0,w,c
  2202  000E8C  1032               	iorwf	(_xtoa$302+1)^0,w,c
  2203  000E8E  B4D8               	btfsc	status,2,c
  2204  000E90  EF4C  F007         	goto	u911
  2205  000E94  EF4E  F007         	goto	u910
  2206  000E98                     u911:
  2207  000E98  EF58  F007         	goto	l1612
  2208  000E9C                     u910:
  2209  000E9C                     
  2210                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
  2211  000E9C  C041  F007         	movff	xtoa@c,toupper@c
  2212  000EA0  C042  F008         	movff	xtoa@c+1,toupper@c+1
  2213  000EA4  EC7D  F00A         	call	_toupper	;wreg free
  2214  000EA8  C007  F041         	movff	?_toupper,xtoa@c
  2215  000EAC  C008  F042         	movff	?_toupper+1,xtoa@c+1
  2216  000EB0                     l1612:
  2217                           
  2218                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
  2219  000EB0  0E14               	movlw	low _dbuf
  2220  000EB2  243F               	addwf	xtoa@i^0,w,c
  2221  000EB4  6ED9               	movwf	fsr2l,c
  2222  000EB6  0E01               	movlw	high _dbuf
  2223  000EB8  2040               	addwfc	(xtoa@i+1)^0,w,c
  2224  000EBA  6EDA               	movwf	fsr2h,c
  2225  000EBC  C041  FFDF         	movff	xtoa@c,indf2
  2226  000EC0                     
  2227                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
  2228  000EC0  0633               	decf	xtoa@p^0,f,c
  2229  000EC2  A0D8               	btfss	status,0,c
  2230  000EC4  0634               	decf	(xtoa@p+1)^0,f,c
  2231  000EC6                     
  2232                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
  2233  000EC6  0635               	decf	xtoa@w^0,f,c
  2234  000EC8  A0D8               	btfss	status,0,c
  2235  000ECA  0636               	decf	(xtoa@w+1)^0,f,c
  2236  000ECC                     
  2237                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
  2238  000ECC  C037  F027         	movff	xtoa@n,??_xtoa
  2239  000ED0  C038  F028         	movff	xtoa@n+1,??_xtoa+1
  2240  000ED4  C039  F029         	movff	xtoa@n+2,??_xtoa+2
  2241  000ED8  C03A  F02A         	movff	xtoa@n+3,??_xtoa+3
  2242  000EDC  C03B  F02B         	movff	xtoa@n+4,??_xtoa+4
  2243  000EE0  C03C  F02C         	movff	xtoa@n+5,??_xtoa+5
  2244  000EE4  C03D  F02D         	movff	xtoa@n+6,??_xtoa+6
  2245  000EE8  C03E  F02E         	movff	xtoa@n+7,??_xtoa+7
  2246  000EEC  0E05               	movlw	5
  2247  000EEE  EF82  F007         	goto	u920
  2248  000EF2                     u925:
  2249  000EF2  90D8               	bcf	status,0,c
  2250  000EF4  322E               	rrcf	(??_xtoa+7)^0,f,c
  2251  000EF6  322D               	rrcf	(??_xtoa+6)^0,f,c
  2252  000EF8  322C               	rrcf	(??_xtoa+5)^0,f,c
  2253  000EFA  322B               	rrcf	(??_xtoa+4)^0,f,c
  2254  000EFC  322A               	rrcf	(??_xtoa+3)^0,f,c
  2255  000EFE  3229               	rrcf	(??_xtoa+2)^0,f,c
  2256  000F00  3228               	rrcf	(??_xtoa+1)^0,f,c
  2257  000F02  3227               	rrcf	??_xtoa^0,f,c
  2258  000F04                     u920:
  2259  000F04  2EE8               	decfsz	wreg,f,c
  2260  000F06  EF79  F007         	goto	u925
  2261  000F0A  C027  F037         	movff	??_xtoa,xtoa@n
  2262  000F0E  C028  F038         	movff	??_xtoa+1,xtoa@n+1
  2263  000F12  C029  F039         	movff	??_xtoa+2,xtoa@n+2
  2264  000F16  C02A  F03A         	movff	??_xtoa+3,xtoa@n+3
  2265  000F1A  C02B  F03B         	movff	??_xtoa+4,xtoa@n+4
  2266  000F1E  C02C  F03C         	movff	??_xtoa+5,xtoa@n+5
  2267  000F22  C02D  F03D         	movff	??_xtoa+6,xtoa@n+6
  2268  000F26  C02E  F03E         	movff	??_xtoa+7,xtoa@n+7
  2269  000F2A                     l1620:
  2270                           
  2271                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2272  000F2A  BE40               	btfsc	(xtoa@i+1)^0,7,c
  2273  000F2C  EFA1  F007         	goto	u931
  2274  000F30  5040               	movf	(xtoa@i+1)^0,w,c
  2275  000F32  E109               	bnz	u930
  2276  000F34  0E02               	movlw	2
  2277  000F36  5C3F               	subwf	xtoa@i^0,w,c
  2278  000F38  A0D8               	btfss	status,0,c
  2279  000F3A  EFA1  F007         	goto	u931
  2280  000F3E  EFA3  F007         	goto	u930
  2281  000F42                     u931:
  2282  000F42  EFD4  F007         	goto	l283
  2283  000F46                     u930:
  2284  000F46  5037               	movf	xtoa@n^0,w,c
  2285  000F48  1038               	iorwf	(xtoa@n+1)^0,w,c
  2286  000F4A  1039               	iorwf	(xtoa@n+2)^0,w,c
  2287  000F4C  103A               	iorwf	(xtoa@n+3)^0,w,c
  2288  000F4E  103B               	iorwf	(xtoa@n+4)^0,w,c
  2289  000F50  103C               	iorwf	(xtoa@n+5)^0,w,c
  2290  000F52  103D               	iorwf	(xtoa@n+6)^0,w,c
  2291  000F54  103E               	iorwf	(xtoa@n+7)^0,w,c
  2292  000F56  A4D8               	btfss	status,2,c
  2293  000F58  EFB0  F007         	goto	u941
  2294  000F5C  EFB2  F007         	goto	u940
  2295  000F60                     u941:
  2296  000F60  EFE2  F006         	goto	l1590
  2297  000F64                     u940:
  2298  000F64  BE34               	btfsc	(xtoa@p+1)^0,7,c
  2299  000F66  EFBF  F007         	goto	u950
  2300  000F6A  5034               	movf	(xtoa@p+1)^0,w,c
  2301  000F6C  E106               	bnz	u951
  2302  000F6E  0433               	decf	xtoa@p^0,w,c
  2303  000F70  B0D8               	btfsc	status,0,c
  2304  000F72  EFBD  F007         	goto	u951
  2305  000F76  EFBF  F007         	goto	u950
  2306  000F7A                     u951:
  2307  000F7A  EFE2  F006         	goto	l1590
  2308  000F7E                     u950:
  2309  000F7E  BE36               	btfsc	(xtoa@w+1)^0,7,c
  2310  000F80  EFCA  F007         	goto	u961
  2311  000F84  5036               	movf	(xtoa@w+1)^0,w,c
  2312  000F86  E108               	bnz	u960
  2313  000F88  0435               	decf	xtoa@w^0,w,c
  2314  000F8A  A0D8               	btfss	status,0,c
  2315  000F8C  EFCA  F007         	goto	u961
  2316  000F90  EFCC  F007         	goto	u960
  2317  000F94                     u961:
  2318  000F94  EFD4  F007         	goto	l283
  2319  000F98                     u960:
  2320  000F98  0100               	movlb	0	; () banked
  2321  000F9A  B3A9               	btfsc	_flags& (0+255),1,b
  2322  000F9C  EFD2  F007         	goto	u971
  2323  000FA0  EFD4  F007         	goto	u970
  2324  000FA4                     u971:
  2325  000FA4  EFE2  F006         	goto	l1590
  2326  000FA8                     u970:
  2327  000FA8                     l283:
  2328                           
  2329                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
  2330  000FA8  0100               	movlb	0	; () banked
  2331  000FAA  A9A9               	btfss	_flags& (0+255),4,b
  2332  000FAC  EFDA  F007         	goto	u981
  2333  000FB0  EFDC  F007         	goto	u980
  2334  000FB4                     u981:
  2335  000FB4  EFF2  F007         	goto	l1636
  2336  000FB8                     u980:
  2337  000FB8                     
  2338                           ; BSR set to: 0
  2339                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
  2340  000FB8  063F               	decf	xtoa@i^0,f,c
  2341  000FBA  A0D8               	btfss	status,0,c
  2342  000FBC  0640               	decf	(xtoa@i+1)^0,f,c
  2343  000FBE                     
  2344                           ; BSR set to: 0
  2345                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
  2346  000FBE  0E14               	movlw	low _dbuf
  2347  000FC0  243F               	addwf	xtoa@i^0,w,c
  2348  000FC2  6ED9               	movwf	fsr2l,c
  2349  000FC4  0E01               	movlw	high _dbuf
  2350  000FC6  2040               	addwfc	(xtoa@i+1)^0,w,c
  2351  000FC8  6EDA               	movwf	fsr2h,c
  2352  000FCA  C026  FFDF         	movff	xtoa@x,indf2
  2353  000FCE                     
  2354                           ; BSR set to: 0
  2355                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
  2356  000FCE  063F               	decf	xtoa@i^0,f,c
  2357  000FD0  A0D8               	btfss	status,0,c
  2358  000FD2  0640               	decf	(xtoa@i+1)^0,f,c
  2359                           
  2360                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
  2361  000FD4  0E14               	movlw	low _dbuf
  2362  000FD6  243F               	addwf	xtoa@i^0,w,c
  2363  000FD8  6ED9               	movwf	fsr2l,c
  2364  000FDA  0E01               	movlw	high _dbuf
  2365  000FDC  2040               	addwfc	(xtoa@i+1)^0,w,c
  2366  000FDE  6EDA               	movwf	fsr2h,c
  2367  000FE0  0E30               	movlw	48
  2368  000FE2  6EDF               	movwf	indf2,c
  2369  000FE4                     l1636:
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
  2373  000FE4  C01C  F011         	movff	xtoa@fp,pad@fp
  2374  000FE8  C01D  F012         	movff	xtoa@fp+1,pad@fp+1
  2375  000FEC  0E14               	movlw	low _dbuf
  2376  000FEE  243F               	addwf	xtoa@i^0,w,c
  2377  000FF0  6E13               	movwf	pad@buf^0,c
  2378  000FF2  0E01               	movlw	high _dbuf
  2379  000FF4  2040               	addwfc	(xtoa@i+1)^0,w,c
  2380  000FF6  6E14               	movwf	(pad@buf+1)^0,c
  2381  000FF8  C035  F015         	movff	xtoa@w,pad@p
  2382  000FFC  C036  F016         	movff	xtoa@w+1,pad@p+1
  2383  001000  EC54  F009         	call	_pad	;wreg free
  2384  001004  C011  F01C         	movff	?_pad,?_xtoa
  2385  001008  C012  F01D         	movff	?_pad+1,?_xtoa+1
  2386  00100C  0012               	return		;funcret
  2387  00100E                     __end_of_xtoa:
  2388                           	opt callstack 0
  2389                           
  2390 ;; *************** function _toupper *****************
  2391 ;; Defined at:
  2392 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\toupper.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  c               2    6[COMRAM] int 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  2    6[COMRAM] int 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2406 ;;      Params:         2       0       0       0       0       0       0       0       0
  2407 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2408 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2409 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2410 ;;Total ram usage:        8 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    1
  2413 ;; This function calls:
  2414 ;;		_islower
  2415 ;; This function is called by:
  2416 ;;		_xtoa
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text5
  2421  0014FA                     __ptext5:
  2422                           	opt callstack 0
  2423  0014FA                     _toupper:
  2424                           	opt callstack 25
  2425  0014FA  0E9F               	movlw	159
  2426  0014FC  6E09               	movwf	??_toupper^0,c
  2427  0014FE  0EFF               	movlw	255
  2428  001500  6E0A               	movwf	(??_toupper+1)^0,c
  2429  001502  C007  F00B         	movff	toupper@c,??_toupper+2
  2430  001506  C008  F00C         	movff	toupper@c+1,??_toupper+3
  2431  00150A  5009               	movf	??_toupper^0,w,c
  2432  00150C  260B               	addwf	(??_toupper+2)^0,f,c
  2433  00150E  500A               	movf	(??_toupper+1)^0,w,c
  2434  001510  220C               	addwfc	(??_toupper+3)^0,f,c
  2435  001512  500C               	movf	(??_toupper+3)^0,w,c
  2436  001514  E10A               	bnz	u790
  2437  001516  0E1A               	movlw	26
  2438  001518  5C0B               	subwf	(??_toupper+2)^0,w,c
  2439  00151A  A0D8               	btfss	status,0,c
  2440  00151C  EF92  F00A         	goto	u791
  2441  001520  EF95  F00A         	goto	u790
  2442  001524                     u791:
  2443  001524  0E01               	movlw	1
  2444  001526  EF96  F00A         	goto	u800
  2445  00152A                     u790:
  2446  00152A  0E00               	movlw	0
  2447  00152C                     u800:
  2448  00152C  6E0D               	movwf	_toupper$842^0,c
  2449  00152E  6A0E               	clrf	(_toupper$842+1)^0,c
  2450  001530  500D               	movf	_toupper$842^0,w,c
  2451  001532  100E               	iorwf	(_toupper$842+1)^0,w,c
  2452  001534  B4D8               	btfsc	status,2,c
  2453  001536  EF9F  F00A         	goto	u811
  2454  00153A  EFA1  F00A         	goto	u810
  2455  00153E                     u811:
  2456  00153E  EFA7  F00A         	goto	l1026
  2457  001542                     u810:
  2458  001542  0E5F               	movlw	95
  2459  001544  1407               	andwf	toupper@c^0,w,c
  2460  001546  6E07               	movwf	?_toupper^0,c
  2461  001548  6A08               	clrf	(?_toupper+1)^0,c
  2462  00154A  EFAB  F00A         	goto	l1031
  2463  00154E                     l1026:
  2464  00154E  C007  F007         	movff	toupper@c,?_toupper
  2465  001552  C008  F008         	movff	toupper@c+1,?_toupper+1
  2466  001556                     l1031:
  2467  001556  0012               	return		;funcret
  2468  001558                     __end_of_toupper:
  2469                           	opt callstack 0
  2470                           
  2471 ;; *************** function _islower *****************
  2472 ;; Defined at:
  2473 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\islower.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;  c               2    0[COMRAM] int 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  2    0[COMRAM] int 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2, status,0
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2487 ;;      Params:         2       0       0       0       0       0       0       0       0
  2488 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2489 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2490 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2491 ;;Total ram usage:        6 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_toupper
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text6
  2501  0016F6                     __ptext6:
  2502                           	opt callstack 0
  2503  0016F6                     _islower:
  2504                           	opt callstack 25
  2505  0016F6  0E9F               	movlw	159
  2506  0016F8  6E03               	movwf	??_islower^0,c
  2507  0016FA  0EFF               	movlw	255
  2508  0016FC  6E04               	movwf	(??_islower+1)^0,c
  2509  0016FE  C001  F005         	movff	islower@c,??_islower+2
  2510  001702  C002  F006         	movff	islower@c+1,??_islower+3
  2511  001706  5003               	movf	??_islower^0,w,c
  2512  001708  2605               	addwf	(??_islower+2)^0,f,c
  2513  00170A  5004               	movf	(??_islower+1)^0,w,c
  2514  00170C  2206               	addwfc	(??_islower+3)^0,f,c
  2515  00170E  5006               	movf	(??_islower+3)^0,w,c
  2516  001710  E10A               	bnz	u690
  2517  001712  0E1A               	movlw	26
  2518  001714  5C05               	subwf	(??_islower+2)^0,w,c
  2519  001716  A0D8               	btfss	status,0,c
  2520  001718  EF90  F00B         	goto	u691
  2521  00171C  EF93  F00B         	goto	u690
  2522  001720                     u691:
  2523  001720  0E01               	movlw	1
  2524  001722  EF94  F00B         	goto	u700
  2525  001726                     u690:
  2526  001726  0E00               	movlw	0
  2527  001728                     u700:
  2528  001728  6E01               	movwf	?_islower^0,c
  2529  00172A  6A02               	clrf	(?_islower+1)^0,c
  2530  00172C  0012               	return		;funcret
  2531  00172E                     __end_of_islower:
  2532                           	opt callstack 0
  2533                           
  2534 ;; *************** function _pad *****************
  2535 ;; Defined at:
  2536 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2539 ;;		 -> sprintf@f(6), 
  2540 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2541 ;;		 -> dbuf(32), 
  2542 ;;  p               2   20[COMRAM] int 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  w               2   25[COMRAM] int 
  2545 ;;  i               2   23[COMRAM] int 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  2   16[COMRAM] int 
  2548 ;; Registers used:
  2549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2555 ;;      Params:         6       0       0       0       0       0       0       0       0
  2556 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2557 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2558 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2559 ;;Total ram usage:       11 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    3
  2562 ;; This function calls:
  2563 ;;		_fputc
  2564 ;;		_fputs
  2565 ;;		_strlen
  2566 ;; This function is called by:
  2567 ;;		_xtoa
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text7
  2572  0012A8                     __ptext7:
  2573                           	opt callstack 0
  2574  0012A8                     _pad:
  2575                           	opt callstack 23
  2576  0012A8                     
  2577                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2578  0012A8  0100               	movlb	0	; () banked
  2579  0012AA  A1A9               	btfss	_flags& (0+255),0,b
  2580  0012AC  EF5A  F009         	goto	u711
  2581  0012B0  EF5C  F009         	goto	u710
  2582  0012B4                     u711:
  2583  0012B4  EF66  F009         	goto	l1538
  2584  0012B8                     u710:
  2585  0012B8                     
  2586                           ; BSR set to: 0
  2587                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2588  0012B8  C013  F00A         	movff	pad@buf,fputs@s
  2589  0012BC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2590  0012C0  C011  F00C         	movff	pad@fp,fputs@fp
  2591  0012C4  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2592  0012C8  ECF8  F00A         	call	_fputs	;wreg free
  2593  0012CC                     l1538:
  2594                           
  2595                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2596  0012CC  BE16               	btfsc	(pad@p+1)^0,7,c
  2597  0012CE  EF6B  F009         	goto	u721
  2598  0012D2  EF6D  F009         	goto	u720
  2599  0012D6                     u721:
  2600  0012D6  EF73  F009         	goto	l1542
  2601  0012DA                     u720:
  2602  0012DA  C015  F01A         	movff	pad@p,pad@w
  2603  0012DE  C016  F01B         	movff	pad@p+1,pad@w+1
  2604  0012E2  EF77  F009         	goto	l250
  2605  0012E6                     l1542:
  2606  0012E6  0E00               	movlw	0
  2607  0012E8  6E1B               	movwf	(pad@w+1)^0,c
  2608  0012EA  0E00               	movlw	0
  2609  0012EC  6E1A               	movwf	pad@w^0,c
  2610  0012EE                     l250:
  2611                           
  2612                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2613  0012EE  0E00               	movlw	0
  2614  0012F0  6E19               	movwf	(pad@i+1)^0,c
  2615  0012F2  0E00               	movlw	0
  2616  0012F4  6E18               	movwf	pad@i^0,c
  2617                           
  2618                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2619  0012F6  EF89  F009         	goto	l1548
  2620  0012FA                     l1544:
  2621                           
  2622                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2623  0012FA  0E00               	movlw	0
  2624  0012FC  6E02               	movwf	(fputc@c+1)^0,c
  2625  0012FE  0E20               	movlw	32
  2626  001300  6E01               	movwf	fputc@c^0,c
  2627  001302  C011  F003         	movff	pad@fp,fputc@fp
  2628  001306  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2629  00130A  ECEF  F008         	call	_fputc	;wreg free
  2630  00130E                     
  2631                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2632  00130E  4A18               	infsnz	pad@i^0,f,c
  2633  001310  2A19               	incf	(pad@i+1)^0,f,c
  2634  001312                     l1548:
  2635                           
  2636                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2637  001312  501A               	movf	pad@w^0,w,c
  2638  001314  5C18               	subwf	pad@i^0,w,c
  2639  001316  5019               	movf	(pad@i+1)^0,w,c
  2640  001318  0A80               	xorlw	128
  2641  00131A  6E17               	movwf	??_pad^0,c
  2642  00131C  501B               	movf	(pad@w+1)^0,w,c
  2643  00131E  0A80               	xorlw	128
  2644  001320  5817               	subwfb	??_pad^0,w,c
  2645  001322  A0D8               	btfss	status,0,c
  2646  001324  EF96  F009         	goto	u731
  2647  001328  EF98  F009         	goto	u730
  2648  00132C                     u731:
  2649  00132C  EF7D  F009         	goto	l1544
  2650  001330                     u730:
  2651  001330                     
  2652                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2653  001330  0100               	movlb	0	; () banked
  2654  001332  B1A9               	btfsc	_flags& (0+255),0,b
  2655  001334  EF9E  F009         	goto	u741
  2656  001338  EFA0  F009         	goto	u740
  2657  00133C                     u741:
  2658  00133C  EFAA  F009         	goto	l1552
  2659  001340                     u740:
  2660  001340                     
  2661                           ; BSR set to: 0
  2662                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2663  001340  C013  F00A         	movff	pad@buf,fputs@s
  2664  001344  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2665  001348  C011  F00C         	movff	pad@fp,fputs@fp
  2666  00134C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2667  001350  ECF8  F00A         	call	_fputs	;wreg free
  2668  001354                     l1552:
  2669                           
  2670                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2671  001354  C013  F001         	movff	pad@buf,strlen@s
  2672  001358  C014  F002         	movff	pad@buf+1,strlen@s+1
  2673  00135C  ECB3  F00B         	call	_strlen	;wreg free
  2674  001360  501A               	movf	pad@w^0,w,c
  2675  001362  2401               	addwf	?_strlen^0,w,c
  2676  001364  6E11               	movwf	?_pad^0,c
  2677  001366  501B               	movf	(pad@w+1)^0,w,c
  2678  001368  2002               	addwfc	(?_strlen+1)^0,w,c
  2679  00136A  6E12               	movwf	(?_pad+1)^0,c
  2680  00136C  0012               	return		;funcret
  2681  00136E                     __end_of_pad:
  2682                           	opt callstack 0
  2683                           
  2684 ;; *************** function _strlen *****************
  2685 ;; Defined at:
  2686 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2689 ;;		 -> dbuf(32), text9(5), text8(5), text7(5), 
  2690 ;;		 -> text6(5), text5(5), text4(5), text3(5), 
  2691 ;;		 -> dma(20), smh(20), text2(5), text1(5), 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2694 ;;		 -> dbuf(32), text9(5), text8(5), text7(5), 
  2695 ;;		 -> text6(5), text5(5), text4(5), text3(5), 
  2696 ;;		 -> dma(20), smh(20), text2(5), text1(5), 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  2    0[COMRAM] unsigned int 
  2699 ;; Registers used:
  2700 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2706 ;;      Params:         2       0       0       0       0       0       0       0       0
  2707 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2708 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2709 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2710 ;;Total ram usage:        4 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_main
  2716 ;;		_pad
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text8
  2721  001766                     __ptext8:
  2722                           	opt callstack 0
  2723  001766                     _strlen:
  2724                           	opt callstack 30
  2725  001766  C001  F003         	movff	strlen@s,strlen@a
  2726  00176A  C002  F004         	movff	strlen@s+1,strlen@a+1
  2727  00176E  EFBB  F00B         	goto	l1516
  2728  001772                     l1514:
  2729  001772  4A01               	infsnz	strlen@s^0,f,c
  2730  001774  2A02               	incf	(strlen@s+1)^0,f,c
  2731  001776                     l1516:
  2732  001776  C001  FFD9         	movff	strlen@s,fsr2l
  2733  00177A  C002  FFDA         	movff	strlen@s+1,fsr2h
  2734  00177E  50DF               	movf	indf2,w,c
  2735  001780  A4D8               	btfss	status,2,c
  2736  001782  EFC5  F00B         	goto	u671
  2737  001786  EFC7  F00B         	goto	u670
  2738  00178A                     u671:
  2739  00178A  EFB9  F00B         	goto	l1514
  2740  00178E                     u670:
  2741  00178E  5003               	movf	strlen@a^0,w,c
  2742  001790  5C01               	subwf	strlen@s^0,w,c
  2743  001792  6E01               	movwf	?_strlen^0,c
  2744  001794  5004               	movf	(strlen@a+1)^0,w,c
  2745  001796  5802               	subwfb	(strlen@s+1)^0,w,c
  2746  001798  6E02               	movwf	(?_strlen+1)^0,c
  2747  00179A  0012               	return		;funcret
  2748  00179C                     __end_of_strlen:
  2749                           	opt callstack 0
  2750                           
  2751 ;; *************** function _fputs *****************
  2752 ;; Defined at:
  2753 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2756 ;;		 -> dbuf(32), 
  2757 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2758 ;;		 -> sprintf@f(6), 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  i               2   14[COMRAM] int 
  2761 ;;  c               1   13[COMRAM] unsigned char 
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  2    9[COMRAM] int 
  2764 ;; Registers used:
  2765 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2771 ;;      Params:         4       0       0       0       0       0       0       0       0
  2772 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2774 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2775 ;;Total ram usage:        7 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    2
  2778 ;; This function calls:
  2779 ;;		_fputc
  2780 ;; This function is called by:
  2781 ;;		_pad
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text9
  2786  0015F0                     __ptext9:
  2787                           	opt callstack 0
  2788  0015F0                     _fputs:
  2789                           	opt callstack 23
  2790  0015F0  0E00               	movlw	0
  2791  0015F2  6E10               	movwf	(fputs@i+1)^0,c
  2792  0015F4  0E00               	movlw	0
  2793  0015F6  6E0F               	movwf	fputs@i^0,c
  2794  0015F8  EF09  F00B         	goto	l1528
  2795  0015FC                     l1524:
  2796  0015FC  C00E  F001         	movff	fputs@c,fputc@c
  2797  001600  6A02               	clrf	(fputc@c+1)^0,c
  2798  001602  C00C  F003         	movff	fputs@fp,fputc@fp
  2799  001606  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2800  00160A  ECEF  F008         	call	_fputc	;wreg free
  2801  00160E  4A0F               	infsnz	fputs@i^0,f,c
  2802  001610  2A10               	incf	(fputs@i+1)^0,f,c
  2803  001612                     l1528:
  2804  001612  500F               	movf	fputs@i^0,w,c
  2805  001614  240A               	addwf	fputs@s^0,w,c
  2806  001616  6ED9               	movwf	fsr2l,c
  2807  001618  5010               	movf	(fputs@i+1)^0,w,c
  2808  00161A  200B               	addwfc	(fputs@s+1)^0,w,c
  2809  00161C  6EDA               	movwf	fsr2h,c
  2810  00161E  50DF               	movf	indf2,w,c
  2811  001620  6E0E               	movwf	fputs@c^0,c
  2812  001622  500E               	movf	fputs@c^0,w,c
  2813  001624  A4D8               	btfss	status,2,c
  2814  001626  EF17  F00B         	goto	u681
  2815  00162A  EF19  F00B         	goto	u680
  2816  00162E                     u681:
  2817  00162E  EFFE  F00A         	goto	l1524
  2818  001632                     u680:
  2819  001632  0012               	return		;funcret
  2820  001634                     __end_of_fputs:
  2821                           	opt callstack 0
  2822                           
  2823 ;; *************** function _fputc *****************
  2824 ;; Defined at:
  2825 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  c               2    0[COMRAM] int 
  2828 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2829 ;;		 -> sprintf@f(6), 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  2    0[COMRAM] int 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2841 ;;      Params:         4       0       0       0       0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2843 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2844 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2845 ;;Total ram usage:        9 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    1
  2848 ;; This function calls:
  2849 ;;		_putch
  2850 ;; This function is called by:
  2851 ;;		_pad
  2852 ;;		_vfpfcnvrt
  2853 ;;		_fputs
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text10
  2858  0011DE                     __ptext10:
  2859                           	opt callstack 0
  2860  0011DE                     _fputc:
  2861                           	opt callstack 23
  2862  0011DE  5003               	movf	fputc@fp^0,w,c
  2863  0011E0  1004               	iorwf	(fputc@fp+1)^0,w,c
  2864  0011E2  B4D8               	btfsc	status,2,c
  2865  0011E4  EFF6  F008         	goto	u631
  2866  0011E8  EFF8  F008         	goto	u630
  2867  0011EC                     u631:
  2868  0011EC  EF01  F009         	goto	l1502
  2869  0011F0                     u630:
  2870  0011F0  5003               	movf	fputc@fp^0,w,c
  2871  0011F2  1004               	iorwf	(fputc@fp+1)^0,w,c
  2872  0011F4  A4D8               	btfss	status,2,c
  2873  0011F6  EFFF  F008         	goto	u641
  2874  0011FA  EF01  F009         	goto	u640
  2875  0011FE                     u641:
  2876  0011FE  EF06  F009         	goto	l1504
  2877  001202                     u640:
  2878  001202                     l1502:
  2879  001202  5001               	movf	fputc@c^0,w,c
  2880  001204  EC28  F00C         	call	_putch
  2881  001208  EF53  F009         	goto	l997
  2882  00120C                     l1504:
  2883  00120C  EE20 F004          	lfsr	2,4
  2884  001210  5003               	movf	fputc@fp^0,w,c
  2885  001212  26D9               	addwf	fsr2l,f,c
  2886  001214  5004               	movf	(fputc@fp+1)^0,w,c
  2887  001216  22DA               	addwfc	fsr2h,f,c
  2888  001218  50DE               	movf	postinc2,w,c
  2889  00121A  10DE               	iorwf	postinc2,w,c
  2890  00121C  B4D8               	btfsc	status,2,c
  2891  00121E  EF13  F009         	goto	u651
  2892  001222  EF15  F009         	goto	u650
  2893  001226                     u651:
  2894  001226  EF30  F009         	goto	l1508
  2895  00122A                     u650:
  2896  00122A  EE20 F004          	lfsr	2,4
  2897  00122E  5003               	movf	fputc@fp^0,w,c
  2898  001230  26D9               	addwf	fsr2l,f,c
  2899  001232  5004               	movf	(fputc@fp+1)^0,w,c
  2900  001234  22DA               	addwfc	fsr2h,f,c
  2901  001236  EE10 F002          	lfsr	1,2
  2902  00123A  5003               	movf	fputc@fp^0,w,c
  2903  00123C  26E1               	addwf	fsr1l,f,c
  2904  00123E  5004               	movf	(fputc@fp+1)^0,w,c
  2905  001240  22E2               	addwfc	fsr1h,f,c
  2906  001242  50DE               	movf	postinc2,w,c
  2907  001244  5CE6               	subwf	postinc1,w,c
  2908  001246  50E6               	movf	postinc1,w,c
  2909  001248  0A80               	xorlw	128
  2910  00124A  6E09               	movwf	(??_fputc+4)^0,c
  2911  00124C  50DE               	movf	postinc2,w,c
  2912  00124E  0A80               	xorlw	128
  2913  001250  5809               	subwfb	(??_fputc+4)^0,w,c
  2914  001252  B0D8               	btfsc	status,0,c
  2915  001254  EF2E  F009         	goto	u661
  2916  001258  EF30  F009         	goto	u660
  2917  00125C                     u661:
  2918  00125C  EF53  F009         	goto	l997
  2919  001260                     u660:
  2920  001260                     l1508:
  2921  001260  EE20 F002          	lfsr	2,2
  2922  001264  5003               	movf	fputc@fp^0,w,c
  2923  001266  26D9               	addwf	fsr2l,f,c
  2924  001268  5004               	movf	(fputc@fp+1)^0,w,c
  2925  00126A  22DA               	addwfc	fsr2h,f,c
  2926  00126C  CFDE F005          	movff	postinc2,??_fputc
  2927  001270  CFDD F006          	movff	postdec2,??_fputc+1
  2928  001274  C003  FFD9         	movff	fputc@fp,fsr2l
  2929  001278  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2930  00127C  CFDE F007          	movff	postinc2,??_fputc+2
  2931  001280  CFDD F008          	movff	postdec2,??_fputc+3
  2932  001284  5005               	movf	??_fputc^0,w,c
  2933  001286  2407               	addwf	(??_fputc+2)^0,w,c
  2934  001288  6ED9               	movwf	fsr2l,c
  2935  00128A  5006               	movf	(??_fputc+1)^0,w,c
  2936  00128C  2008               	addwfc	(??_fputc+3)^0,w,c
  2937  00128E  6EDA               	movwf	fsr2h,c
  2938  001290  C001  FFDF         	movff	fputc@c,indf2
  2939  001294  EE20 F002          	lfsr	2,2
  2940  001298  5003               	movf	fputc@fp^0,w,c
  2941  00129A  26D9               	addwf	fsr2l,f,c
  2942  00129C  5004               	movf	(fputc@fp+1)^0,w,c
  2943  00129E  22DA               	addwfc	fsr2h,f,c
  2944  0012A0  2ADE               	incf	postinc2,f,c
  2945  0012A2  0E00               	movlw	0
  2946  0012A4  22DD               	addwfc	postdec2,f,c
  2947  0012A6                     l997:
  2948  0012A6  0012               	return		;funcret
  2949  0012A8                     __end_of_fputc:
  2950                           	opt callstack 0
  2951                           
  2952 ;; *************** function _putch *****************
  2953 ;; Defined at:
  2954 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  c               1    wreg     unsigned char 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  c               1    0[COMRAM] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2968 ;;      Params:         0       0       0       0       0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2971 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2972 ;;Total ram usage:        0 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_fputc
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text11
  2982  001850                     __ptext11:
  2983                           	opt callstack 0
  2984  001850                     _putch:
  2985                           	opt callstack 23
  2986  001850  0012               	return		;funcret
  2987  001852                     __end_of_putch:
  2988                           	opt callstack 0
  2989                           
  2990 ;; *************** function _isupper *****************
  2991 ;; Defined at:
  2992 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isupper.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  c               2    0[COMRAM] int 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;		None
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  2    0[COMRAM] int 
  2999 ;; Registers used:
  3000 ;;		wreg, status,2, status,0
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3006 ;;      Params:         2       0       0       0       0       0       0       0       0
  3007 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3008 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3009 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3010 ;;Total ram usage:        6 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; This function calls:
  3013 ;;		Nothing
  3014 ;; This function is called by:
  3015 ;;		_xtoa
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text12
  3020  00172E                     __ptext12:
  3021                           	opt callstack 0
  3022  00172E                     _isupper:
  3023                           	opt callstack 26
  3024  00172E  0EBF               	movlw	191
  3025  001730  6E03               	movwf	??_isupper^0,c
  3026  001732  0EFF               	movlw	255
  3027  001734  6E04               	movwf	(??_isupper+1)^0,c
  3028  001736  C001  F005         	movff	isupper@c,??_isupper+2
  3029  00173A  C002  F006         	movff	isupper@c+1,??_isupper+3
  3030  00173E  5003               	movf	??_isupper^0,w,c
  3031  001740  2605               	addwf	(??_isupper+2)^0,f,c
  3032  001742  5004               	movf	(??_isupper+1)^0,w,c
  3033  001744  2206               	addwfc	(??_isupper+3)^0,f,c
  3034  001746  5006               	movf	(??_isupper+3)^0,w,c
  3035  001748  E10A               	bnz	u750
  3036  00174A  0E1A               	movlw	26
  3037  00174C  5C05               	subwf	(??_isupper+2)^0,w,c
  3038  00174E  A0D8               	btfss	status,0,c
  3039  001750  EFAC  F00B         	goto	u751
  3040  001754  EFAF  F00B         	goto	u750
  3041  001758                     u751:
  3042  001758  0E01               	movlw	1
  3043  00175A  EFB0  F00B         	goto	u760
  3044  00175E                     u750:
  3045  00175E  0E00               	movlw	0
  3046  001760                     u760:
  3047  001760  6E01               	movwf	?_isupper^0,c
  3048  001762  6A02               	clrf	(?_isupper+1)^0,c
  3049  001764  0012               	return		;funcret
  3050  001766                     __end_of_isupper:
  3051                           	opt callstack 0
  3052                           
  3053 ;; *************** function _isalpha *****************
  3054 ;; Defined at:
  3055 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isalpha.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  c               2    0[COMRAM] int 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  2    0[COMRAM] int 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3069 ;;      Params:         2       0       0       0       0       0       0       0       0
  3070 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3071 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3072 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3073 ;;Total ram usage:        6 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_xtoa
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text13
  3083  0016BA                     __ptext13:
  3084                           	opt callstack 0
  3085  0016BA                     _isalpha:
  3086                           	opt callstack 26
  3087  0016BA  0E9F               	movlw	159
  3088  0016BC  6E03               	movwf	??_isalpha^0,c
  3089  0016BE  0EFF               	movlw	255
  3090  0016C0  6E04               	movwf	(??_isalpha+1)^0,c
  3091  0016C2  0E20               	movlw	32
  3092  0016C4  1001               	iorwf	isalpha@c^0,w,c
  3093  0016C6  6E05               	movwf	(??_isalpha+2)^0,c
  3094  0016C8  0E00               	movlw	0
  3095  0016CA  1002               	iorwf	(isalpha@c+1)^0,w,c
  3096  0016CC  6E06               	movwf	(??_isalpha+3)^0,c
  3097  0016CE  5003               	movf	??_isalpha^0,w,c
  3098  0016D0  2605               	addwf	(??_isalpha+2)^0,f,c
  3099  0016D2  5004               	movf	(??_isalpha+1)^0,w,c
  3100  0016D4  2206               	addwfc	(??_isalpha+3)^0,f,c
  3101  0016D6  5006               	movf	(??_isalpha+3)^0,w,c
  3102  0016D8  E10A               	bnz	u770
  3103  0016DA  0E1A               	movlw	26
  3104  0016DC  5C05               	subwf	(??_isalpha+2)^0,w,c
  3105  0016DE  A0D8               	btfss	status,0,c
  3106  0016E0  EF74  F00B         	goto	u771
  3107  0016E4  EF77  F00B         	goto	u770
  3108  0016E8                     u771:
  3109  0016E8  0E01               	movlw	1
  3110  0016EA  EF78  F00B         	goto	u780
  3111  0016EE                     u770:
  3112  0016EE  0E00               	movlw	0
  3113  0016F0                     u780:
  3114  0016F0  6E01               	movwf	?_isalpha^0,c
  3115  0016F2  6A02               	clrf	(?_isalpha+1)^0,c
  3116  0016F4  0012               	return		;funcret
  3117  0016F6                     __end_of_isalpha:
  3118                           	opt callstack 0
  3119                           
  3120 ;; *************** function _settings *****************
  3121 ;; Defined at:
  3122 ;;		line 141 in file "main.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3139 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    2
  3143 ;; This function calls:
  3144 ;;		_SettingsLCD
  3145 ;; This function is called by:
  3146 ;;		_main
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text14
  3151  0015AA                     __ptext14:
  3152                           	opt callstack 0
  3153  0015AA                     _settings:
  3154                           	opt callstack 28
  3155  0015AA                     
  3156                           ;main.c: 142:     OSCCON = 0x72;
  3157  0015AA  0E72               	movlw	114
  3158  0015AC  6ED3               	movwf	211,c	;volatile
  3159                           
  3160                           ;main.c: 143:     ADCON1 = 0x0F;
  3161  0015AE  0E0F               	movlw	15
  3162  0015B0  6EC1               	movwf	193,c	;volatile
  3163  0015B2                     
  3164                           ;main.c: 144:     TRISBbits.RB0 = 1;
  3165  0015B2  8093               	bsf	147,0,c	;volatile
  3166  0015B4                     
  3167                           ;main.c: 145:     TRISBbits.RB1 = 1;
  3168  0015B4  8293               	bsf	147,1,c	;volatile
  3169                           
  3170                           ;main.c: 146:     SSPSTAT = 0x80;
  3171  0015B6  0E80               	movlw	128
  3172  0015B8  6EC7               	movwf	199,c	;volatile
  3173                           
  3174                           ;main.c: 147:     SSPCON1 = 0x28;
  3175  0015BA  0E28               	movlw	40
  3176  0015BC  6EC6               	movwf	198,c	;volatile
  3177                           
  3178                           ;main.c: 148:     SSPCON2 = 0;
  3179  0015BE  0E00               	movlw	0
  3180  0015C0  6EC5               	movwf	197,c	;volatile
  3181                           
  3182                           ;main.c: 149:     SSPADD = 0x31;
  3183  0015C2  0E31               	movlw	49
  3184  0015C4  6EC8               	movwf	200,c	;volatile
  3185                           
  3186                           ;main.c: 151:     TRISD = 0x00;
  3187  0015C6  0E00               	movlw	0
  3188  0015C8  6E95               	movwf	149,c	;volatile
  3189                           
  3190                           ;main.c: 152:     LATD = 0x00;
  3191  0015CA  0E00               	movlw	0
  3192  0015CC  6E8C               	movwf	140,c	;volatile
  3193                           
  3194                           ;main.c: 153:     TRISE = 0x00;
  3195  0015CE  0E00               	movlw	0
  3196  0015D0  6E96               	movwf	150,c	;volatile
  3197                           
  3198                           ;main.c: 154:     LATE = 0x00;
  3199  0015D2  0E00               	movlw	0
  3200  0015D4  6E8D               	movwf	141,c	;volatile
  3201  0015D6                     
  3202                           ;main.c: 155:     SettingsLCD(0x06);
  3203  0015D6  0E06               	movlw	6
  3204  0015D8  EC0A  F00C         	call	_SettingsLCD
  3205  0015DC                     
  3206                           ;main.c: 156:     SettingsLCD(0x0F);
  3207  0015DC  0E0F               	movlw	15
  3208  0015DE  EC0A  F00C         	call	_SettingsLCD
  3209  0015E2                     
  3210                           ;main.c: 157:     SettingsLCD(0x38);
  3211  0015E2  0E38               	movlw	56
  3212  0015E4  EC0A  F00C         	call	_SettingsLCD
  3213  0015E8                     
  3214                           ;main.c: 158:     SettingsLCD(0x01);
  3215  0015E8  0E01               	movlw	1
  3216  0015EA  EC0A  F00C         	call	_SettingsLCD
  3217  0015EE  0012               	return		;funcret
  3218  0015F0                     __end_of_settings:
  3219                           	opt callstack 0
  3220                           
  3221 ;; *************** function _SettingsLCD *****************
  3222 ;; Defined at:
  3223 ;;		line 228 in file "main.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  word            1    wreg     unsigned char 
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  word            1    1[COMRAM] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0
  3238 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3240 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3241 ;;Total ram usage:        1 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    1
  3244 ;; This function calls:
  3245 ;;		_LCD
  3246 ;; This function is called by:
  3247 ;;		_main
  3248 ;;		_settings
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text15
  3253  001814                     __ptext15:
  3254                           	opt callstack 0
  3255  001814                     _SettingsLCD:
  3256                           	opt callstack 28
  3257                           
  3258                           ;incstack = 0
  3259                           ;SettingsLCD@word stored from wreg
  3260  001814  6E02               	movwf	SettingsLCD@word^0,c
  3261  001816                     
  3262                           ;main.c: 229:     LATEbits.LATE1 = 0;
  3263  001816  928D               	bcf	141,1,c	;volatile
  3264  001818                     
  3265                           ;main.c: 230:     LCD(word);
  3266  001818  5002               	movf	SettingsLCD@word^0,w,c
  3267  00181A  ECF8  F00B         	call	_LCD
  3268  00181E  0012               	return		;funcret
  3269  001820                     __end_of_SettingsLCD:
  3270                           	opt callstack 0
  3271                           
  3272 ;; *************** function _WriteLCD *****************
  3273 ;; Defined at:
  3274 ;;		line 233 in file "main.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  word            1    wreg     unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  word            1    1[COMRAM] unsigned char 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0
  3289 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3291 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3292 ;;Total ram usage:        1 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    1
  3295 ;; This function calls:
  3296 ;;		_LCD
  3297 ;; This function is called by:
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text16
  3303  001820                     __ptext16:
  3304                           	opt callstack 0
  3305  001820                     _WriteLCD:
  3306                           	opt callstack 29
  3307                           
  3308                           ;incstack = 0
  3309                           ;WriteLCD@word stored from wreg
  3310  001820  6E02               	movwf	WriteLCD@word^0,c
  3311  001822                     
  3312                           ;main.c: 234:     LATEbits.LATE1 = 1;
  3313  001822  828D               	bsf	141,1,c	;volatile
  3314  001824                     
  3315                           ;main.c: 235:     LCD(word);
  3316  001824  5002               	movf	WriteLCD@word^0,w,c
  3317  001826  ECF8  F00B         	call	_LCD
  3318  00182A  0012               	return		;funcret
  3319  00182C                     __end_of_WriteLCD:
  3320                           	opt callstack 0
  3321                           
  3322 ;; *************** function _LCD *****************
  3323 ;; Defined at:
  3324 ;;		line 238 in file "main.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  data            1    wreg     unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  data            1    0[COMRAM] unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      void 
  3331 ;; Registers used:
  3332 ;;		wreg, status,2, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3338 ;;      Params:         0       0       0       0       0       0       0       0       0
  3339 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3341 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3342 ;;Total ram usage:        1 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_SettingsLCD
  3348 ;;		_WriteLCD
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text17
  3353  0017F0                     __ptext17:
  3354                           	opt callstack 0
  3355  0017F0                     _LCD:
  3356                           	opt callstack 28
  3357                           
  3358                           ;incstack = 0
  3359                           ;LCD@data stored from wreg
  3360  0017F0  6E01               	movwf	LCD@data^0,c
  3361  0017F2                     
  3362                           ;main.c: 239:     LATEbits.LATE0 = 1;
  3363  0017F2  808D               	bsf	141,0,c	;volatile
  3364  0017F4                     
  3365                           ;main.c: 240:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3366  0017F4  0E42               	movlw	66
  3367  0017F6                     u1257:
  3368  0017F6  2EE8               	decfsz	wreg,f,c
  3369  0017F8  D7FE               	bra	u1257
  3370  0017FA  D000               	nop2	
  3371  0017FC                     
  3372                           ;main.c: 241:     LATD = data;
  3373  0017FC  C001  FF8C         	movff	LCD@data,3980	;volatile
  3374  001800                     
  3375                           ;main.c: 242:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3376  001800  0E42               	movlw	66
  3377  001802                     u1267:
  3378  001802  2EE8               	decfsz	wreg,f,c
  3379  001804  D7FE               	bra	u1267
  3380  001806  D000               	nop2	
  3381  001808                     
  3382                           ;main.c: 243:     LATEbits.LATE0 = 0;
  3383  001808  908D               	bcf	141,0,c	;volatile
  3384  00180A                     
  3385                           ;main.c: 244:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3386  00180A  0E42               	movlw	66
  3387  00180C                     u1277:
  3388  00180C  2EE8               	decfsz	wreg,f,c
  3389  00180E  D7FE               	bra	u1277
  3390  001810  D000               	nop2	
  3391  001812  0012               	return		;funcret
  3392  001814                     __end_of_LCD:
  3393                           	opt callstack 0
  3394                           
  3395 ;; *************** function _WriteI2C *****************
  3396 ;; Defined at:
  3397 ;;		line 161 in file "main.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  Address         1    wreg     unsigned char 
  3400 ;;  Register        1    2[COMRAM] unsigned char 
  3401 ;;  Data            2    3[COMRAM] PTR unsigned char 
  3402 ;;		 -> calendario(4), hora(3), 
  3403 ;;  bytes           2    5[COMRAM] int 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  Address         1    9[COMRAM] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3415 ;;      Params:         5       0       0       0       0       0       0       0       0
  3416 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3417 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3418 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3419 ;;Total ram usage:        8 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    2
  3422 ;; This function calls:
  3423 ;;		_SendI2C
  3424 ;;		_StartI2C
  3425 ;;		_StopI2C
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text18
  3432  001426                     __ptext18:
  3433                           	opt callstack 0
  3434  001426                     _WriteI2C:
  3435                           	opt callstack 28
  3436                           
  3437                           ;incstack = 0
  3438                           ;WriteI2C@Address stored from wreg
  3439  001426  6E0A               	movwf	WriteI2C@Address^0,c
  3440  001428                     
  3441                           ;main.c: 162:     StartI2C();
  3442  001428  EC20  F00C         	call	_StartI2C	;wreg free
  3443                           
  3444                           ;main.c: 163:     SendI2C(Address);
  3445  00142C  500A               	movf	WriteI2C@Address^0,w,c
  3446  00142E  EC16  F00C         	call	_SendI2C
  3447                           
  3448                           ;main.c: 164:     SendI2C(Register);
  3449  001432  5003               	movf	WriteI2C@Register^0,w,c
  3450  001434  EC16  F00C         	call	_SendI2C
  3451  001438                     
  3452                           ;main.c: 165:     for(i=0; i<bytes; i++){
  3453  001438  0E00               	movlw	0
  3454  00143A  0100               	movlb	0	; () banked
  3455  00143C  6FB0               	movwf	(_i+1)& (0+255),b
  3456  00143E  0E00               	movlw	0
  3457  001440  6FAF               	movwf	_i& (0+255),b
  3458  001442  EF2F  F00A         	goto	l1770
  3459  001446                     l1764:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;main.c: 166:         SendI2C(*Data);
  3463  001446  C004  FFD9         	movff	WriteI2C@Data,fsr2l
  3464  00144A  C005  FFDA         	movff	WriteI2C@Data+1,fsr2h
  3465  00144E  50DF               	movf	indf2,w,c
  3466  001450  EC16  F00C         	call	_SendI2C
  3467  001454                     
  3468                           ;main.c: 167:         Data++;
  3469  001454  4A04               	infsnz	WriteI2C@Data^0,f,c
  3470  001456  2A05               	incf	(WriteI2C@Data+1)^0,f,c
  3471  001458                     
  3472                           ;main.c: 168:     }
  3473  001458  0100               	movlb	0	; () banked
  3474  00145A  4BAF               	infsnz	_i& (0+255),f,b
  3475  00145C  2BB0               	incf	(_i+1)& (0+255),f,b
  3476  00145E                     l1770:
  3477                           
  3478                           ; BSR set to: 0
  3479  00145E  5006               	movf	WriteI2C@bytes^0,w,c
  3480  001460  5DAF               	subwf	_i& (0+255),w,b
  3481  001462  51B0               	movf	(_i+1)& (0+255),w,b
  3482  001464  0A80               	xorlw	128
  3483  001466  6E08               	movwf	??_WriteI2C^0,c
  3484  001468  5007               	movf	(WriteI2C@bytes+1)^0,w,c
  3485  00146A  0A80               	xorlw	128
  3486  00146C  5808               	subwfb	??_WriteI2C^0,w,c
  3487  00146E  A0D8               	btfss	status,0,c
  3488  001470  EF3C  F00A         	goto	u1081
  3489  001474  EF3E  F00A         	goto	u1080
  3490  001478                     u1081:
  3491  001478  EF23  F00A         	goto	l1764
  3492  00147C                     u1080:
  3493  00147C                     
  3494                           ; BSR set to: 0
  3495                           ;main.c: 169:     StopI2C();
  3496  00147C  EC1C  F00C         	call	_StopI2C	;wreg free
  3497  001480                     
  3498                           ;main.c: 170:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  3499  001480  0E0B               	movlw	11
  3500  001482  6E09               	movwf	(??_WriteI2C+1)^0,c
  3501  001484  0E26               	movlw	38
  3502  001486  6E08               	movwf	??_WriteI2C^0,c
  3503  001488  0E5E               	movlw	94
  3504  00148A                     u1287:
  3505  00148A  2EE8               	decfsz	wreg,f,c
  3506  00148C  D7FE               	bra	u1287
  3507  00148E  2E08               	decfsz	??_WriteI2C^0,f,c
  3508  001490  D7FC               	bra	u1287
  3509  001492  2E09               	decfsz	(??_WriteI2C+1)^0,f,c
  3510  001494  D7FA               	bra	u1287
  3511  001496  0012               	return		;funcret
  3512  001498                     __end_of_WriteI2C:
  3513                           	opt callstack 0
  3514                           
  3515 ;; *************** function _ReadI2C *****************
  3516 ;; Defined at:
  3517 ;;		line 192 in file "main.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  Address         1    wreg     unsigned char 
  3520 ;;  Register        1    3[COMRAM] unsigned char 
  3521 ;;  Data            2    4[COMRAM] PTR unsigned char 
  3522 ;;		 -> DatosCalendario(4), DatosHora(3), 
  3523 ;;  bytes           2    6[COMRAM] int 
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  Address         1   10[COMRAM] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3535 ;;      Params:         5       0       0       0       0       0       0       0       0
  3536 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3537 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3538 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3539 ;;Total ram usage:        8 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    2
  3542 ;; This function calls:
  3543 ;;		_ReceiveI2C
  3544 ;;		_RepeatedStartI2C
  3545 ;;		_SendI2C
  3546 ;;		_StartI2C
  3547 ;;		_StopI2C
  3548 ;; This function is called by:
  3549 ;;		_main
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text19
  3554  00136E                     __ptext19:
  3555                           	opt callstack 0
  3556  00136E                     _ReadI2C:
  3557                           	opt callstack 28
  3558                           
  3559                           ;incstack = 0
  3560                           ;ReadI2C@Address stored from wreg
  3561  00136E  6E0B               	movwf	ReadI2C@Address^0,c
  3562  001370                     
  3563                           ;main.c: 193:     StartI2C();
  3564  001370  EC20  F00C         	call	_StartI2C	;wreg free
  3565                           
  3566                           ;main.c: 194:     SendI2C(Address);
  3567  001374  500B               	movf	ReadI2C@Address^0,w,c
  3568  001376  EC16  F00C         	call	_SendI2C
  3569                           
  3570                           ;main.c: 195:     SendI2C(Register);
  3571  00137A  5004               	movf	ReadI2C@Register^0,w,c
  3572  00137C  EC16  F00C         	call	_SendI2C
  3573                           
  3574                           ;main.c: 196:     RepeatedStartI2C();
  3575  001380  EC24  F00C         	call	_RepeatedStartI2C	;wreg free
  3576                           
  3577                           ;main.c: 197:     SendI2C(Address|0x01);
  3578  001384  500B               	movf	ReadI2C@Address^0,w,c
  3579  001386  0901               	iorlw	1
  3580  001388  EC16  F00C         	call	_SendI2C
  3581  00138C                     
  3582                           ;main.c: 198:     for(i=0; i<bytes; i++){
  3583  00138C  0E00               	movlw	0
  3584  00138E  0100               	movlb	0	; () banked
  3585  001390  6FB0               	movwf	(_i+1)& (0+255),b
  3586  001392  0E00               	movlw	0
  3587  001394  6FAF               	movwf	_i& (0+255),b
  3588  001396  EFF6  F009         	goto	l1790
  3589  00139A                     l1780:
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;main.c: 199:         if(i+1 == bytes){
  3593  00139A  0E01               	movlw	1
  3594  00139C  25AF               	addwf	_i& (0+255),w,b
  3595  00139E  6E09               	movwf	??_ReadI2C^0,c
  3596  0013A0  0E00               	movlw	0
  3597  0013A2  21B0               	addwfc	(_i+1)& (0+255),w,b
  3598  0013A4  6E0A               	movwf	(??_ReadI2C+1)^0,c
  3599  0013A6  5007               	movf	ReadI2C@bytes^0,w,c
  3600  0013A8  1809               	xorwf	??_ReadI2C^0,w,c
  3601  0013AA  E107               	bnz	u1091
  3602  0013AC  5008               	movf	(ReadI2C@bytes+1)^0,w,c
  3603  0013AE  180A               	xorwf	(??_ReadI2C+1)^0,w,c
  3604  0013B0  A4D8               	btfss	status,2,c
  3605  0013B2  EFDD  F009         	goto	u1091
  3606  0013B6  EFDF  F009         	goto	u1090
  3607  0013BA                     u1091:
  3608  0013BA  EFE9  F009         	goto	l1784
  3609  0013BE                     u1090:
  3610  0013BE                     
  3611                           ; BSR set to: 0
  3612                           ;main.c: 200:             *Data = ReceiveI2C(1);
  3613  0013BE  0E01               	movlw	1
  3614  0013C0  ECCE  F00B         	call	_ReceiveI2C
  3615  0013C4  C005  FFD9         	movff	ReadI2C@Data,fsr2l
  3616  0013C8  C006  FFDA         	movff	ReadI2C@Data+1,fsr2h
  3617  0013CC  6EDF               	movwf	indf2,c
  3618                           
  3619                           ;main.c: 201:         }else{
  3620  0013CE  EFF1  F009         	goto	l1786
  3621  0013D2                     l1784:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;main.c: 202:             *Data = ReceiveI2C(0);
  3625  0013D2  0E00               	movlw	0
  3626  0013D4  ECCE  F00B         	call	_ReceiveI2C
  3627  0013D8  C005  FFD9         	movff	ReadI2C@Data,fsr2l
  3628  0013DC  C006  FFDA         	movff	ReadI2C@Data+1,fsr2h
  3629  0013E0  6EDF               	movwf	indf2,c
  3630  0013E2                     l1786:
  3631                           
  3632                           ;main.c: 205:         Data++;
  3633  0013E2  4A05               	infsnz	ReadI2C@Data^0,f,c
  3634  0013E4  2A06               	incf	(ReadI2C@Data+1)^0,f,c
  3635  0013E6                     
  3636                           ;main.c: 206:     }
  3637  0013E6  0100               	movlb	0	; () banked
  3638  0013E8  4BAF               	infsnz	_i& (0+255),f,b
  3639  0013EA  2BB0               	incf	(_i+1)& (0+255),f,b
  3640  0013EC                     l1790:
  3641                           
  3642                           ; BSR set to: 0
  3643  0013EC  5007               	movf	ReadI2C@bytes^0,w,c
  3644  0013EE  5DAF               	subwf	_i& (0+255),w,b
  3645  0013F0  51B0               	movf	(_i+1)& (0+255),w,b
  3646  0013F2  0A80               	xorlw	128
  3647  0013F4  6E09               	movwf	??_ReadI2C^0,c
  3648  0013F6  5008               	movf	(ReadI2C@bytes+1)^0,w,c
  3649  0013F8  0A80               	xorlw	128
  3650  0013FA  5809               	subwfb	??_ReadI2C^0,w,c
  3651  0013FC  A0D8               	btfss	status,0,c
  3652  0013FE  EF03  F00A         	goto	u1101
  3653  001402  EF05  F00A         	goto	u1100
  3654  001406                     u1101:
  3655  001406  EFCD  F009         	goto	l1780
  3656  00140A                     u1100:
  3657  00140A                     
  3658                           ; BSR set to: 0
  3659                           ;main.c: 207:     StopI2C();
  3660  00140A  EC1C  F00C         	call	_StopI2C	;wreg free
  3661  00140E                     
  3662                           ;main.c: 208:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  3663  00140E  0E0B               	movlw	11
  3664  001410  6E0A               	movwf	(??_ReadI2C+1)^0,c
  3665  001412  0E26               	movlw	38
  3666  001414  6E09               	movwf	??_ReadI2C^0,c
  3667  001416  0E5E               	movlw	94
  3668  001418                     u1297:
  3669  001418  2EE8               	decfsz	wreg,f,c
  3670  00141A  D7FE               	bra	u1297
  3671  00141C  2E09               	decfsz	??_ReadI2C^0,f,c
  3672  00141E  D7FC               	bra	u1297
  3673  001420  2E0A               	decfsz	(??_ReadI2C+1)^0,f,c
  3674  001422  D7FA               	bra	u1297
  3675  001424  0012               	return		;funcret
  3676  001426                     __end_of_ReadI2C:
  3677                           	opt callstack 0
  3678                           
  3679 ;; *************** function _StopI2C *****************
  3680 ;; Defined at:
  3681 ;;		line 187 in file "main.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3698 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    1
  3702 ;; This function calls:
  3703 ;;		_ReadyI2C
  3704 ;; This function is called by:
  3705 ;;		_WriteI2C
  3706 ;;		_ReadI2C
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text20
  3711  001838                     __ptext20:
  3712                           	opt callstack 0
  3713  001838                     _StopI2C:
  3714                           	opt callstack 28
  3715  001838                     
  3716                           ;main.c: 188:     ReadyI2C();
  3717  001838  ECE5  F00B         	call	_ReadyI2C	;wreg free
  3718  00183C                     
  3719                           ;main.c: 189:     PEN = 1;
  3720  00183C  84C5               	bsf	4037,2,c	;volatile
  3721  00183E  0012               	return		;funcret
  3722  001840                     __end_of_StopI2C:
  3723                           	opt callstack 0
  3724                           
  3725 ;; *************** function _StartI2C *****************
  3726 ;; Defined at:
  3727 ;;		line 173 in file "main.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3741 ;;      Params:         0       0       0       0       0       0       0       0       0
  3742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3745 ;;Total ram usage:        0 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    1
  3748 ;; This function calls:
  3749 ;;		_ReadyI2C
  3750 ;; This function is called by:
  3751 ;;		_WriteI2C
  3752 ;;		_ReadI2C
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text21
  3757  001840                     __ptext21:
  3758                           	opt callstack 0
  3759  001840                     _StartI2C:
  3760                           	opt callstack 28
  3761  001840                     
  3762                           ;main.c: 174:     ReadyI2C();
  3763  001840  ECE5  F00B         	call	_ReadyI2C	;wreg free
  3764  001844                     
  3765                           ;main.c: 175:     SEN = 1;
  3766  001844  80C5               	bsf	4037,0,c	;volatile
  3767  001846  0012               	return		;funcret
  3768  001848                     __end_of_StartI2C:
  3769                           	opt callstack 0
  3770                           
  3771 ;; *************** function _SendI2C *****************
  3772 ;; Defined at:
  3773 ;;		line 182 in file "main.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;  data            1    wreg     unsigned char 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  data            1    1[COMRAM] unsigned char 
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3787 ;;      Params:         0       0       0       0       0       0       0       0       0
  3788 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3790 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3791 ;;Total ram usage:        1 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    1
  3794 ;; This function calls:
  3795 ;;		_ReadyI2C
  3796 ;; This function is called by:
  3797 ;;		_WriteI2C
  3798 ;;		_ReadI2C
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text22
  3803  00182C                     __ptext22:
  3804                           	opt callstack 0
  3805  00182C                     _SendI2C:
  3806                           	opt callstack 28
  3807                           
  3808                           ;incstack = 0
  3809                           ;SendI2C@data stored from wreg
  3810  00182C  6E02               	movwf	SendI2C@data^0,c
  3811  00182E                     
  3812                           ;main.c: 183:     ReadyI2C();
  3813  00182E  ECE5  F00B         	call	_ReadyI2C	;wreg free
  3814  001832                     
  3815                           ;main.c: 184:     SSPBUF = data;
  3816  001832  C002  FFC9         	movff	SendI2C@data,4041	;volatile
  3817  001836  0012               	return		;funcret
  3818  001838                     __end_of_SendI2C:
  3819                           	opt callstack 0
  3820                           
  3821 ;; *************** function _RepeatedStartI2C *****************
  3822 ;; Defined at:
  3823 ;;		line 211 in file "main.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;		None
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      void 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0, cstack
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3837 ;;      Params:         0       0       0       0       0       0       0       0       0
  3838 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3840 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3841 ;;Total ram usage:        0 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    1
  3844 ;; This function calls:
  3845 ;;		_ReadyI2C
  3846 ;; This function is called by:
  3847 ;;		_ReadI2C
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text23
  3852  001848                     __ptext23:
  3853                           	opt callstack 0
  3854  001848                     _RepeatedStartI2C:
  3855                           	opt callstack 28
  3856  001848                     
  3857                           ;main.c: 212:     ReadyI2C();
  3858  001848  ECE5  F00B         	call	_ReadyI2C	;wreg free
  3859  00184C                     
  3860                           ;main.c: 213:     RSEN = 1;
  3861  00184C  82C5               	bsf	4037,1,c	;volatile
  3862  00184E  0012               	return		;funcret
  3863  001850                     __end_of_RepeatedStartI2C:
  3864                           	opt callstack 0
  3865                           
  3866 ;; *************** function _ReceiveI2C *****************
  3867 ;; Defined at:
  3868 ;;		line 216 in file "main.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  flag            1    wreg     unsigned char 
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  flag            1    1[COMRAM] unsigned char 
  3873 ;;  buffer          1    2[COMRAM] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      unsigned char 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3883 ;;      Params:         0       0       0       0       0       0       0       0       0
  3884 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3886 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3887 ;;Total ram usage:        2 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    1
  3890 ;; This function calls:
  3891 ;;		_ReadyI2C
  3892 ;; This function is called by:
  3893 ;;		_ReadI2C
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text24
  3898  00179C                     __ptext24:
  3899                           	opt callstack 0
  3900  00179C                     _ReceiveI2C:
  3901                           	opt callstack 28
  3902                           
  3903                           ;incstack = 0
  3904                           ;ReceiveI2C@flag stored from wreg
  3905  00179C  6E02               	movwf	ReceiveI2C@flag^0,c
  3906  00179E                     
  3907                           ;main.c: 217:     unsigned char buffer;;main.c: 218:     ReadyI2C();
  3908  00179E  ECE5  F00B         	call	_ReadyI2C	;wreg free
  3909  0017A2                     
  3910                           ;main.c: 219:     RCEN = 1;
  3911  0017A2  86C5               	bsf	4037,3,c	;volatile
  3912                           
  3913                           ;main.c: 220:     ReadyI2C();
  3914  0017A4  ECE5  F00B         	call	_ReadyI2C	;wreg free
  3915  0017A8                     
  3916                           ;main.c: 221:     buffer = SSPBUF;
  3917  0017A8  CFC9 F003          	movff	4041,ReceiveI2C@buffer	;volatile
  3918                           
  3919                           ;main.c: 222:     ReadyI2C();
  3920  0017AC  ECE5  F00B         	call	_ReadyI2C	;wreg free
  3921  0017B0                     
  3922                           ;main.c: 223:     ACKDT = flag==1? 1 : 0;
  3923  0017B0  0402               	decf	ReceiveI2C@flag^0,w,c
  3924  0017B2  B4D8               	btfsc	status,2,c
  3925  0017B4  EFDE  F00B         	goto	u1051
  3926  0017B8  EFE1  F00B         	goto	u1050
  3927  0017BC                     u1051:
  3928  0017BC  8AC5               	bsf	4037,5,c	;volatile
  3929  0017BE  EFE2  F00B         	goto	u1065
  3930  0017C2                     u1050:
  3931  0017C2  9AC5               	bcf	4037,5,c	;volatile
  3932  0017C4                     u1065:
  3933  0017C4                     
  3934                           ;main.c: 224:     ACKEN = 1;
  3935  0017C4  88C5               	bsf	4037,4,c	;volatile
  3936  0017C6                     
  3937                           ;main.c: 225:     return buffer;
  3938  0017C6  5003               	movf	ReceiveI2C@buffer^0,w,c
  3939  0017C8  0012               	return		;funcret
  3940  0017CA                     __end_of_ReceiveI2C:
  3941                           	opt callstack 0
  3942                           
  3943 ;; *************** function _ReadyI2C *****************
  3944 ;; Defined at:
  3945 ;;		line 178 in file "main.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3959 ;;      Params:         0       0       0       0       0       0       0       0       0
  3960 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3961 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3962 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3963 ;;Total ram usage:        1 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; This function calls:
  3966 ;;		Nothing
  3967 ;; This function is called by:
  3968 ;;		_StartI2C
  3969 ;;		_SendI2C
  3970 ;;		_StopI2C
  3971 ;;		_RepeatedStartI2C
  3972 ;;		_ReceiveI2C
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text25
  3977  0017CA                     __ptext25:
  3978                           	opt callstack 0
  3979  0017CA                     _ReadyI2C:
  3980                           	opt callstack 28
  3981  0017CA                     l1642:
  3982  0017CA  CFC5 F001          	movff	4037,??_ReadyI2C	;volatile
  3983  0017CE  0E1F               	movlw	31
  3984  0017D0  1601               	andwf	??_ReadyI2C^0,f,c
  3985  0017D2  A4D8               	btfss	status,2,c
  3986  0017D4  EFEE  F00B         	goto	u991
  3987  0017D8  EFF0  F00B         	goto	u990
  3988  0017DC                     u991:
  3989  0017DC  EFE5  F00B         	goto	l1642
  3990  0017E0                     u990:
  3991  0017E0  B4C7               	btfsc	199,2,c	;volatile
  3992  0017E2  EFF5  F00B         	goto	u1001
  3993  0017E6  EFF7  F00B         	goto	u1000
  3994  0017EA                     u1001:
  3995  0017EA  EFE5  F00B         	goto	l1642
  3996  0017EE                     u1000:
  3997  0017EE  0012               	return		;funcret
  3998  0017F0                     __end_of_ReadyI2C:
  3999                           	opt callstack 0
  4000                           
  4001                           	psect	rparam
  4002  0000                     tosu	equ	0xFFF
  4003                           tosh	equ	0xFFE
  4004                           tosl	equ	0xFFD
  4005                           stkptr	equ	0xFFC
  4006                           pclatu	equ	0xFFB
  4007                           pclath	equ	0xFFA
  4008                           pcl	equ	0xFF9
  4009                           tblptru	equ	0xFF8
  4010                           tblptrh	equ	0xFF7
  4011                           tblptrl	equ	0xFF6
  4012                           tablat	equ	0xFF5
  4013                           prodh	equ	0xFF4
  4014                           prodl	equ	0xFF3
  4015                           indf0	equ	0xFEF
  4016                           postinc0	equ	0xFEE
  4017                           postdec0	equ	0xFED
  4018                           preinc0	equ	0xFEC
  4019                           plusw0	equ	0xFEB
  4020                           fsr0h	equ	0xFEA
  4021                           fsr0l	equ	0xFE9
  4022                           wreg	equ	0xFE8
  4023                           indf1	equ	0xFE7
  4024                           postinc1	equ	0xFE6
  4025                           postdec1	equ	0xFE5
  4026                           preinc1	equ	0xFE4
  4027                           plusw1	equ	0xFE3
  4028                           fsr1h	equ	0xFE2
  4029                           fsr1l	equ	0xFE1
  4030                           bsr	equ	0xFE0
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           postdec2	equ	0xFDD
  4034                           preinc2	equ	0xFDC
  4035                           plusw2	equ	0xFDB
  4036                           fsr2h	equ	0xFDA
  4037                           fsr2l	equ	0xFD9
  4038                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        67
    BSS         113
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     20     148
    BANK1           256      0      52
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), text9(BANK0[5]), text8(BANK0[5]), text7(BANK0[5]), 
		 -> text6(BANK0[5]), text5(BANK0[5]), text4(BANK0[5]), text3(BANK0[5]), 
		 -> dma(BANK0[20]), smh(BANK0[20]), text2(BANK0[5]), text1(BANK0[5]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), text9(BANK0[5]), text8(BANK0[5]), text7(BANK0[5]), 
		 -> text6(BANK0[5]), text5(BANK0[5]), text4(BANK0[5]), text3(BANK0[5]), 
		 -> dma(BANK0[20]), smh(BANK0[20]), text2(BANK0[5]), text1(BANK0[5]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[13]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> dma(BANK0[20]), smh(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> dma(BANK0[20]), smh(BANK0[20]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S779_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> dma(BANK0[20]), smh(BANK0[20]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> dma(BANK0[20]), smh(BANK0[20]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[13]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    ReadI2C@Data	PTR unsigned char  size(2) Largest target is 4
		 -> DatosCalendario(BANK0[4]), DatosHora(BANK0[3]), 

    WriteI2C@Data	PTR unsigned char  size(2) Largest target is 4
		 -> calendario(BANK0[4]), hora(BANK0[3]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _pad->_fputs
    _fputs->_fputc
    _settings->_SettingsLCD
    _SettingsLCD->_LCD
    _WriteLCD->_LCD
    _WriteI2C->_SendI2C
    _ReadI2C->_ReceiveI2C
    _StopI2C->_ReadyI2C
    _StartI2C->_ReadyI2C
    _SendI2C->_ReadyI2C
    _RepeatedStartI2C->_ReadyI2C
    _ReceiveI2C->_ReadyI2C

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10078
                                             93 COMRAM     2     2      0
                            _ReadI2C
                        _SettingsLCD
                           _WriteI2C
                           _WriteLCD
                           _settings
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    10     10    7623
                                              0 BANK0     20    10     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6968
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6613
                                             66 COMRAM    19    13      6
                              _fputc
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                39    28     11    5175
                                             27 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (5) _toupper                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (6) _islower                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3621
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               4     2      2    1078
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _settings                                             0     0      0      44
                        _SettingsLCD
 ---------------------------------------------------------------------------------
 (2) _SettingsLCD                                          1     1      0      44
                                              1 COMRAM     1     1      0
                                _LCD
 ---------------------------------------------------------------------------------
 (1) _WriteLCD                                             1     1      0      44
                                              1 COMRAM     1     1      0
                                _LCD
 ---------------------------------------------------------------------------------
 (3) _LCD                                                  1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _WriteI2C                                             8     3      5     567
                                              2 COMRAM     8     3      5
                            _SendI2C
                           _StartI2C
                            _StopI2C
 ---------------------------------------------------------------------------------
 (1) _ReadI2C                                              8     3      5     678
                                              3 COMRAM     8     3      5
                         _ReceiveI2C
                   _RepeatedStartI2C
                            _SendI2C
                           _StartI2C
                            _StopI2C
 ---------------------------------------------------------------------------------
 (2) _StopI2C                                              0     0      0       0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _StartI2C                                             0     0      0       0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _SendI2C                                              1     1      0      22
                                              1 COMRAM     1     1      0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _RepeatedStartI2C                                     0     0      0       0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (2) _ReceiveI2C                                           2     2      0      45
                                              1 COMRAM     2     2      0
                           _ReadyI2C
 ---------------------------------------------------------------------------------
 (3) _ReadyI2C                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadI2C
     _ReceiveI2C
       _ReadyI2C
     _RepeatedStartI2C
       _ReadyI2C
     _SendI2C
       _ReadyI2C
     _StartI2C
       _ReadyI2C
     _StopI2C
       _ReadyI2C
   _SettingsLCD
     _LCD
   _WriteI2C
     _SendI2C
       _ReadyI2C
     _StartI2C
       _ReadyI2C
     _StopI2C
       _ReadyI2C
   _WriteLCD
     _LCD
   _settings
     _SettingsLCD
       _LCD
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _xtoa
           _isalpha
           _isupper
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
           _toupper
             _islower
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      34       7       20.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     14      94       5       92.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     127      20        0.0%
DATA                 0      0     127       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Jul 19 22:07:49 2020

                        _i 00AF                          _k 00AB                          _z 00AD  
              ReadI2C@Data 0005                        l210 17C8                        l204 1424  
                      l213 181E                        l207 184E                        l216 182A  
                      l250 12EE                        l219 1812                        l260 0D6C  
                      l181 1496                        l253 1330                        l190 17EE  
                      l262 0D74                        l175 15EE                        l255 136C  
                      l184 1846                        l193 1836                        l283 0FA8  
                      l196 183E                        l292 11DC                        l285 100C  
                      l269 0E0A                        l298 14F0                        l299 14F8  
                      l982 1764                        l976 16F4                        l997 12A6  
                      _LCD 17F0                        _PEN 007E2A                        u700 1728  
                      u630 11F0                        u710 12B8                        u631 11EC  
                      u711 12B4                        u640 1202                        u720 12DA  
                      u800 152C                        u641 11FE                        u721 12D6  
                      u650 122A                        u730 1330                        u810 1542  
                      u651 1226                        u731 132C                        u811 153E  
                      u660 1260                        u740 1340                        u900 0E86  
                      u820 0D44                        _SEN 007E28                        u661 125C  
                      u741 133C                        u821 0D40                        u750 175E  
                      u670 178E                        u910 0E9C                        u830 0D60  
                      u751 1758                        u671 178A                        u911 0E98  
                      u831 0D5C                        u760 1760                        u680 1632  
                      u920 0F04                        u840 0D8A                        u681 162E  
                      u841 0D86                        u770 16EE                        u690 1726  
                      u930 0F46                        u850 0DEE                        u771 16E8  
                      u691 1720                        u931 0F42                        u851 0DEA  
                      u780 16F0                        u940 0F64                        u860 0E38  
                      u941 0F60                        u925 0EF2                        u861 0E32  
                      u790 152A                        u950 0F7E                        u870 0E3A  
                      u791 1524                        u951 0F7A                        u960 0F98  
                      u880 0E50                        u961 0F94                        u881 0E4C  
                      u970 0FA8                        u890 0E84                        u971 0FA4  
                      u891 0E7E                        u980 0FB8                        u981 0FB4  
                      u990 17E0                        u991 17DC                        _dma 00B1  
                      _pad 12A8                        _smh 00C5                        wreg 000FE8  
             ReadI2C@bytes 0007               __CFG_LVP$OFF 000000                       ?_LCD 0001  
             __CFG_WDT$OFF 000000                       l1012 15A8                       l1005 1632  
                     l1021 179A                       l1015 1850                       l1031 1556  
                     l1026 154E                       l1037 172C                       l1500 11F0  
                     l1502 1202                       l1504 120C                       l1512 1766  
                     l1506 122A                       l1522 15F0                       l1514 1772  
                     l1530 16F6                       l1610 0E9C                       l1602 0E3E  
                     l1508 1260                       l1524 15FC                       l1516 1776  
                     l1540 12DA                       l1604 0E50                       l1612 0EB0  
                     l1620 0F2A                       l1710 1844                       l1526 160E  
                     l1518 178E                       l1550 1340                       l1542 12E6  
                     l1534 12A8                       l1630 0FB8                       l1622 0F46  
                     l1614 0EC0                       l1640 17CA                       l1720 1848  
                     l1712 182E                       l1704 1816                       l1560 16BA  
                     l1528 1612                       l1552 1354                       l1544 12FA  
                     l1536 12B8                       l1632 0FBE                       l1624 0F64  
                     l1616 0EC6                       l1608 0E8A                       l1800 1558  
                     l1642 17CA                       l1730 17B0                       l1722 184C  
                     l1714 1832                       l1650 17FC                       l1706 1818  
                     l1546 130E                       l1538 12CC                       l1570 1542  
                     l1634 0FCE                       l1626 0F7E                       l1618 0ECC  
                     l1802 156A                       l1644 17E0                       l1732 17C4  
                     l1724 179E                       l1708 1840                       l1716 1838  
                     l1652 1800                       l1556 172E                       l1548 1312  
                     l1564 14FA                       l1636 0FE4                       l1628 0F98  
                     l1580 0D60                       l1660 1032                       l1740 14A0  
                     l1804 1572                       l1900 0B2E                       l1820 086E  
                     l1812 081C                       l1734 17C6                       l1726 17A2  
                     l1718 183C                       l1654 1808                       l1646 17F2  
                     l1750 15B4                       l1590 0DC4                       l1582 0D8A  
                     l1574 0D34                       l1670 109E                       l1662 1040  
                     l1742 14AE                       l1806 157A                       l1910 0BA2  
                     l1902 0B56                       l1830 08B2                       l1822 087E  
                     l1814 0820                       l1728 17A8                       l1760 1428  
                     l1656 180A                       l1648 17F4                       l1752 15D6  
                     l1568 1530                       l1592 0DCA                       l1584 0D92  
                     l1576 0D44                       l1672 10B4                       l1680 113A  
                     l1664 1052                       l1744 14D4                       l1808 1596  
                     l1920 0BFA                       l1912 0BAE                       l1904 0B62  
                     l1840 0904                       l1832 08B8                       l1824 0884  
                     l1816 083A                       l1770 145E                       l1762 1438  
                     l1754 15DC                       l1746 15AA                       l1498 11DE  
                     l1594 0DD2                       l1586 0DB2                       l1578 0D46  
                     l1682 115E                       l1690 118C                       l1674 10C2  
                     l1666 1056                       l1658 100E                       l1738 1498  
                     l1930 0C58                       l1922 0C0C                       l1914 0BC0  
                     l1906 0B74                       l1850 096A                       l1842 0928  
                     l1826 0894                       l1834 08E0                       l1818 0854  
                     l1780 139A                       l1772 147C                       l1764 1446  
                     l1756 15E2                       l1748 15B2                       l1596 0DEE  
                     l1588 0DBA                       l1692 119A                       l1684 116C  
                     l1676 10FE                       l1668 107A                       l1940 0CAA  
                     l1932 0C5E                       l1924 0C12                       l1916 0BC6  
                     l1908 0B7A                       l1860 09B8                       l1852 097C  
                     l1844 092E                       l1836 08EC                       l1828 08A0  
                     l1782 13BE                       l1790 13EC                       l1774 1480  
                     l1766 1454                       l1758 15E8                       l1598 0DFE  
                     l1686 1180                       l1934 0C86                       l1926 0C3A  
                     l1918 0BEE                       l1862 09DE                       l1870 0A28  
                     l1854 0982                       l1846 0936                       l1838 08FE  
                     l1792 140A                       l1784 13D2                       l1776 1370  
                     l1768 1458                       l1696 11A6                       l1936 0C92  
                     l1928 0C46                       l1944 0CD2                       l1880 0A90  
                     l1872 0A42                       l1864 09EC                       l1848 095C  
                     l1856 09AA                       l1794 140E                       l1786 13E2  
                     l1778 138C                       l1698 11CA                       l1970 0CF2  
                     l1938 0CA4                       l1890 0ADC                       l1882 0A96  
                     l1874 0A48                       l1866 09FE                       l1858 09B0  
                     l1788 13E6                       l1796 1822                       l1892 0AE2  
                     l1876 0A70                       l1868 0A04                       l1798 1824  
                     l1894 0B0A                       l1886 0ABE                       l1878 0A7E  
                     ?_pad 0011                       l1896 0B16                       l1888 0ACA  
                     l1898 0B28                       STR_1 080E                       STR_2 080E  
                     STR_3 0801                       u1000 17EE                       u1001 17EA  
                     u1010 1032                       u1011 102E                       u1100 140A  
                     u1020 107A                       u1101 1406                       u1021 1076  
                     u1030 109E                       u1110 087E                       u1031 109A  
                     u1111 087A                       u1040 115E                       u1200 0B9E  
                     u1120 0894                       u1041 115A                       u1201 0B9A  
                     u1121 0890                       u1050 17C2                       u1210 0BEA  
                     u1130 08DC                       u1051 17BC                       u1211 0BE6  
                     u1131 08D8                       u1220 0C36                       u1140 0928  
                     u1221 0C32                       u1141 0924                       u1070 14F0  
                     u1230 0C82                       u1150 09A6                       u1071 14EC  
                     u1231 0C7E                       u1151 09A2                       u1080 147C  
                     u1240 0CCE                       u1160 0A28                       u1065 17C4  
                     u1081 1478                       u1241 0CCA                       u1161 0A24  
                     u1090 13BE                       u1170 0ABA                       u1091 13BA  
                     u1171 0AB6                       u1180 0B06                       u1181 0B02  
                     u1190 0B52                       u1191 0B4E                       _LATD 000F8C  
                     u1257 17F6                       _LATE 000F8D                       u1267 1802  
                     u1277 180C                       u1287 148A                       u1297 1418  
                     _RCEN 007E2B                       _RSEN 007E29                       _dbuf 0114  
                     _days 0060                       _main 081C                       _name 0067  
                     _hora 00A0                       _prec 00A7                       _nout 00A3  
                     pad@i 0018                       pad@p 0015                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     pad@w 001A                       fsr2l 000FD9                       _xtoa 0D34  
                     start 0000                _toupper$842 000D               ___param_bank 000000  
          __end_of_ReadI2C 1426                      ??_LCD 0001            __end_of_SendI2C 1838  
                    ??_pad 0017            __end_of_StopI2C 1840                 _Clock_type 006E  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    ?_xtoa 001C                      _AM_PM 006D               vfpfcnvrt@fmt 0045  
             vfpfcnvrt@llu 004D                      _TRISD 000F95                      _TRISE 000F96  
           ReadI2C@Address 000B                      _flags 00A9                      _fputc 11DE  
          __end_of_isalpha 16F6                      _fputs 15F0                      _text1 0097  
                    _text2 0092                      _text3 008D                      _text4 0088  
                    _text5 0083                      _text6 007E                      _text7 0079  
                    _text8 0074                      _text9 006F                      pad@fp 0011  
                    _width 00A5                      _putch 1850            __end_of_islower 172E  
          __end_of_isupper 1766                      tablat 000FF5                      status 000FD8  
          __end_of_sprintf 15AA                      xtoa@c 0041                      xtoa@d 001E  
                    xtoa@i 003F                      xtoa@n 0037                      xtoa@p 0033  
                    xtoa@w 0035                      xtoa@x 0026            __end_of_toupper 1558  
        ?_RepeatedStartI2C 0001            __initialization 1678               __end_of_main 0D34  
       ??_RepeatedStartI2C 0002               __end_of_xtoa 100E           __end_of_ReadyI2C 17F0  
                   ??_main 005E                 _ReceiveI2C 179C                     ??_xtoa 0027  
            __activetblptr 000002                SendI2C@data 0002           __end_of_StartI2C 1848  
                   _ADCON1 000FC1                     ?_fputc 0001                     ?_fputs 000A  
         __end_of_WriteI2C 1498                     ?_putch 0001           __end_of_WriteLCD 182C  
                   _OSCCON 000FD3                     _SSPADD 000FC8                     _SSPBUF 000FC9  
                ??_ReadI2C 0009                  ??_SendI2C 0002               vfprintf@cfmt 005C  
                ??_StopI2C 0002                     _buffer 0100                     clear_0 169E  
                   clear_1 16AA                     pad@buf 0013               WriteI2C@Data 0004  
                   _strlen 1766                     fputc@c 0001                     fputs@c 000E  
                   fputs@i 000F                     fputs@s 000A                  ??_isalpha 0003  
          ReadI2C@Register 0004                  ??_islower 0003               __mediumconst 0000  
            ??_SettingsLCD 0002           __end_of_settings 15F0                     tblptrh 000FF7  
                ??_isupper 0003                     tblptrl 000FF6                     tblptru 000FF8  
                   putch@c 0001           __end_of_vfprintf 14FA                  ??_sprintf 005E  
                   xtoa@fp 001C                  ??_toupper 0009                 __accesstop 0060  
  __end_of__initialization 16B0               WriteLCD@word 0002              ___rparam_used 000001  
           __pcstackCOMRAM 0001               __pidataBANK0 1634              __end_of_fputc 12A8  
            __end_of_fputs 1634              __end_of_putch 1852                ?_ReceiveI2C 0001  
               _calendario 009C                    ??_fputc 0005                    ??_fputs 000E  
                  ??_putch 0001                    LCD@data 0001                 __pbssBANK0 00A3  
               __pbssBANK1 0100        __end_of_SettingsLCD 1820                  ?_ReadyI2C 0001  
                ?_StartI2C 0001                  ?_WriteI2C 0003                  ?_WriteLCD 0001  
                  ?_strlen 0001         __size_of_vfpfcnvrt 01D0                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7                 ??_ReadyI2C 0001  
                  _ReadI2C 136E        __size_of_ReceiveI2C 002E                    _SendI2C 182C  
                  __Hparam 0000                    __Lparam 0000                    _StopI2C 1838  
                ?_settings 0001                 ??_StartI2C 0002                  ?_vfprintf 0056  
             __psmallconst 0800                    __pcinit 1678                 ??_WriteI2C 0008  
               ??_WriteLCD 0002                    __ramtop 0800                    __ptext0 081C  
                  __ptext1 1558                    __ptext2 1498                    __ptext3 100E  
                  __ptext4 0D34                    __ptext5 14FA                    __ptext6 16F6  
                  __ptext7 12A8                    __ptext8 1766                    __ptext9 15F0  
             __size_of_LCD 0024            __size_of_strlen 0036               __size_of_pad 00C6  
                  _isalpha 16BA  __size_of_RepeatedStartI2C 0008                    _islower 16F6  
                  _isupper 172E                _SettingsLCD 1814                    _sprintf 1558  
                  _toupper 14FA       end_of_initialization 16B0              WriteI2C@bytes 0006  
                  fputc@fp 0003              __Lmediumconst 0000                    fputs@fp 000C  
        __end_of_vfpfcnvrt 11DE                    postdec1 000FE5                    postdec2 000FDD  
               ??_settings 0003                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE                 ??_vfprintf 005C                    strlen@a 0003  
                  strlen@s 0001                  _TRISBbits 000F93             ReceiveI2C@flag 0002  
                _DatosHora 00DD           WriteI2C@Register 0003                vfpfcnvrt@ap 0047  
              vfpfcnvrt@fp 0043               ??_ReceiveI2C 0002             __end_of_strlen 179C  
      start_initialization 1678                __end_of_LCD 1814                __end_of_pad 136E  
        __size_of_ReadyI2C 0026         __end_of_ReceiveI2C 17CA                vfprintf@fmt 0058  
              __pdataBANK0 0060          __size_of_StartI2C 0008                   ??_strlen 0003  
        __size_of_WriteI2C 0072          __size_of_WriteLCD 000C           _RepeatedStartI2C 1848  
            __pcstackBANK0 00E0                   ?_ReadI2C 0004                   ?_SendI2C 0001  
                 ?_StopI2C 0001          __size_of_settings 0046          __size_of_vfprintf 0062  
              __smallconst 0800                   ?_isalpha 0001                   ?_islower 0001  
                 ?_isupper 0001               ?_SettingsLCD 0001                   ?_sprintf 00E0  
           __size_of_fputc 00CA             __size_of_fputs 0044                   ?_toupper 0007  
           __size_of_putch 0002                   _LATEbits 000F8D                  _vfpfcnvrt 100E  
          WriteI2C@Address 000A                 vfpfcnvrt@c 0055                  copy_data0 168C  
                 _ReadyI2C 17CA           __size_of_ReadI2C 00B8                   __Hrparam 0000  
         __size_of_SendI2C 000C                 vfprintf@ap 005A                   __Lrparam 0000  
               vfprintf@fp 0056                   _StartI2C 1840           __size_of_StopI2C 0008  
               ?_vfpfcnvrt 0043                   _WriteI2C 1426                   _WriteLCD 1820  
               sprintf@fmt 00E2           __size_of_isalpha 003C           __size_of_islower 0038  
                 __ptext10 11DE                   __ptext11 1850                   __ptext20 1838  
                 __ptext12 172E                   __ptext21 1840                   __ptext13 16BA  
                 __ptext22 182C                   __ptext14 15AA                   __ptext23 1848  
                 __ptext15 1814                   __ptext24 179C                   __ptext16 1820  
                 __ptext25 17CA                   __ptext17 17F0                   __ptext18 1426  
                 __ptext19 136E           __size_of_isupper 0038           __size_of_sprintf 0052  
         __size_of_toupper 005E              __size_of_main 0518              __size_of_xtoa 02DA  
 __end_of_RepeatedStartI2C 1850                   _settings 15AA                   _xtoa$301 002F  
                 _xtoa$302 0031                   _vfprintf 1498                   isalpha@c 0001  
     __size_of_SettingsLCD 000C                  sprintf@ap 00EC                   islower@c 0001  
                 isupper@c 0001                ??_vfpfcnvrt 0049                   sprintf@f 00EE  
      __CFG_FOSC$INTOSC_HS 000000                   sprintf@s 00E0                   toupper@c 0007  
          SettingsLCD@word 0002            _DatosCalendario 00D9           ReceiveI2C@buffer 0003  
